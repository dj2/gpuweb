=Grammar:

_blankspace: /[\u0020\u0009\u000a\u000b\u000c\u000d\u0085\u200e\u200f\u2028\u2029]/
_comment: '//' /.*/
access_mode: 'read' | 'write' | 'read_write'
additive_expression: multiplicative_expression | additive_expression plus multiplicative_expression | additive_expression minus multiplicative_expression
address_space: 'function' | 'private' | 'workgroup' | 'uniform' | 'storage'
and: '&'
and_and: '&&'
and_equal: '&='
argument_expression_list: paren_left argument_expression_list/0.1 paren_right
argument_expression_list/0.1: argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 | ε
argument_expression_list/0.1/0.0: argument_expression_list/0.1/0.0/0 | ε
argument_expression_list/0.1/0.0/0: argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 | ε
argument_expression_list/0.1/0.0/0/0.0: expression comma
argument_expression_list/0.1/0.2: comma | ε
array: 'array'
array_type_decl: 'array' less_than type_decl array_type_decl/0.3 greater_than
array_type_decl/0.3: comma element_count_expression | ε
arrow: '->'
assignment_statement: lhs_expression assignment_statement/0.1 expression
assignment_statement/0.1: equal | compound_assignment_operator
atomic: 'atomic'
attr: '@'
attrib_end: attrib_end/0.0 paren_right
attrib_end/0.0: comma | ε
attribute: attr 'align' paren_left int_literal attrib_end | attr 'binding' paren_left int_literal attrib_end | attr 'builtin' paren_left builtin_value_name attrib_end | attr 'const' | attr 'group' paren_left int_literal attrib_end | attr 'id' paren_left int_literal attrib_end | attr 'interpolate' paren_left interpolation_type_name attrib_end | attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end | attr 'invariant' | attr 'location' paren_left int_literal attrib_end | attr 'size' paren_left int_literal attrib_end | attr 'workgroup_size' paren_left ident_or_int_literal attrib_end | attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end | attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end | attr 'vertex' | attr 'fragment' | attr 'compute'
bang: '!'
binary_and_expression: unary_expression | binary_and_expression and unary_expression
binary_or_expression: unary_expression | binary_or_expression or unary_expression
binary_xor_expression: unary_expression | binary_xor_expression xor unary_expression
bitcast: 'bitcast'
bitwise_expression: binary_and_expression and unary_expression | binary_or_expression or unary_expression | binary_xor_expression xor unary_expression
bool: 'bool'
bool_literal: 'true' | 'false'
brace_left: '{'
brace_right: '}'
bracket_left: '['
bracket_right: ']'
break: 'break'
break_if_statement: 'break' 'if' expression semicolon
break_statement: 'break'
builtin_value_name: 'vertex_index' | 'instance_index' | 'position' | 'front_facing' | 'frag_depth' | 'local_invocation_id' | 'local_invocation_index' | 'global_invocation_id' | 'workgroup_id' | 'num_workgroups' | 'sample_index' | 'sample_mask'
callable: ident | type_decl_without_ident | vec_prefix | mat_prefix
case: 'case'
case_compound_statement: brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right
case_compound_statement/0.1: case_compound_statement/0.1/0 | ε
case_compound_statement/0.1/0: statement case_compound_statement/0.1/0 | ε
case_compound_statement/0.2: fallthrough_statement | ε
case_selectors: expression case_selectors/0.1 case_selectors/0.2
case_selectors/0.1: case_selectors/0.1/0 | ε
case_selectors/0.1/0: case_selectors/0.1/0/0.0 case_selectors/0.1/0 | ε
case_selectors/0.1/0/0.0: comma expression
case_selectors/0.2: comma | ε
colon: ':'
comma: ','
compound_assignment_operator: plus_equal | minus_equal | times_equal | division_equal | modulo_equal | and_equal | or_equal | xor_equal | shift_right_equal | shift_left_equal
compound_statement: brace_left compound_statement/0.1 brace_right
compound_statement/0.1: compound_statement/0.1/0 | ε
compound_statement/0.1/0: statement compound_statement/0.1/0 | ε
const: 'const'
const_literal: int_literal | float_literal | bool_literal
continue: 'continue'
continue_statement: 'continue'
continuing: 'continuing'
continuing_compound_statement: brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right
continuing_compound_statement/0.1: continuing_compound_statement/0.1/0 | ε
continuing_compound_statement/0.1/0: statement continuing_compound_statement/0.1/0 | ε
continuing_compound_statement/0.2: break_if_statement | ε
continuing_statement: 'continuing' continuing_compound_statement
core_lhs_expression: ident | paren_left lhs_expression paren_right
decimal_float_literal: /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ | /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ | /[0-9]+[eE][+-]?[0-9]+[fh]?/ | /0[fh]/ | /[1-9][0-9]*[fh]/
decrement_statement: lhs_expression minus_minus
default: 'default'
depth_texture_type: 'texture_depth_2d' | 'texture_depth_2d_array' | 'texture_depth_cube' | 'texture_depth_cube_array' | 'texture_depth_multisampled_2d'
discard: 'discard'
division_equal: '/='
element_count_expression: additive_expression | bitwise_expression
else: 'else'
else_statement: compound_statement | if_statement
enable: 'enable'
enable_directive: 'enable' extension_name semicolon
equal: '='
equal_equal: '=='
expression: relational_expression | short_circuit_or_expression or_or relational_expression | short_circuit_and_expression and_and relational_expression | bitwise_expression
extension_name: 'f16'
fallthrough: 'fallthrough'
fallthrough_statement: 'fallthrough' semicolon
false: 'false'
float16: 'f16'
float32: 'f32'
float_literal: decimal_float_literal | hex_float_literal
fn: 'fn'
for: 'for'
for_header: for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4
for_header/0.0: for_init | ε
for_header/0.2: expression | ε
for_header/0.4: for_update | ε
for_init: variable_statement | increment_statement | decrement_statement | assignment_statement | func_call_statement
for_statement: 'for' paren_left for_header paren_right compound_statement
for_update: increment_statement | decrement_statement | assignment_statement | func_call_statement
forward_slash: '/'
func_call_statement: ident argument_expression_list
function: 'function'
function_decl: function_decl/0.0 function_header compound_statement
function_decl/0.0: function_decl/0.0/0 | ε
function_decl/0.0/0: attribute function_decl/0.0/0 | ε
function_header: 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5
function_header/0.3: param_list | ε
function_header/0.5: arrow function_header/0.5/0.1 type_decl | ε
function_header/0.5/0.1: function_header/0.5/0.1/0 | ε
function_header/0.5/0.1/0: attribute function_header/0.5/0.1/0 | ε
global_constant_decl: 'const' global_constant_decl/0.1 equal expression | global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3
global_constant_decl/0.1: ident | variable_ident_decl
global_constant_decl/1.0: global_constant_decl/1.0/0 | ε
global_constant_decl/1.0/0: attribute global_constant_decl/1.0/0 | ε
global_constant_decl/1.2: ident | variable_ident_decl
global_constant_decl/1.3: equal expression | ε
global_decl: semicolon | global_variable_decl semicolon | global_constant_decl semicolon | type_alias_decl semicolon | struct_decl | function_decl | static_assert_statement semicolon
global_directive: enable_directive
global_variable_decl: global_variable_decl/0.0 variable_decl global_variable_decl/0.2
global_variable_decl/0.0: global_variable_decl/0.0/0 | ε
global_variable_decl/0.0/0: attribute global_variable_decl/0.0/0 | ε
global_variable_decl/0.2: equal expression | ε
greater_than: '>'
greater_than_equal: '>='
hex_float_literal: /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ | /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ | /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/
ident: ident_pattern_token
ident_or_int_literal: int_literal | ident
ident_pattern_token: /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/
if: 'if'
if_statement: 'if' expression compound_statement if_statement/0.3
if_statement/0.3: 'else' else_statement | ε
increment_statement: lhs_expression plus_plus
int32: 'i32'
int_literal: /0[xX][0-9a-fA-F]+[iu]?/ | /0[iu]?/ | /[1-9][0-9]*[iu]?/
interpolation_sample_name: 'center' | 'centroid' | 'sample'
interpolation_type_name: 'perspective' | 'linear' | 'flat'
language: translation_unit EndOfText
less_than: '<'
less_than_equal: '<='
let: 'let'
lhs_expression: lhs_expression/0.0 core_lhs_expression lhs_expression/0.2
lhs_expression/0.0: lhs_expression/0.0/0 | ε
lhs_expression/0.0/0: lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 | ε
lhs_expression/0.0/0/0.0: star | and
lhs_expression/0.2: postfix_expression | ε
loop: 'loop'
loop_statement: 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right
loop_statement/0.2: loop_statement/0.2/0 | ε
loop_statement/0.2/0: statement loop_statement/0.2/0 | ε
loop_statement/0.3: continuing_statement | ε
mat2x2: 'mat2x2'
mat2x3: 'mat2x3'
mat2x4: 'mat2x4'
mat3x2: 'mat3x2'
mat3x3: 'mat3x3'
mat3x4: 'mat3x4'
mat4x2: 'mat4x2'
mat4x3: 'mat4x3'
mat4x4: 'mat4x4'
mat_prefix: 'mat2x2' | 'mat2x3' | 'mat2x4' | 'mat3x2' | 'mat3x3' | 'mat3x4' | 'mat4x2' | 'mat4x3' | 'mat4x4'
member_ident: ident_pattern_token
minus: '-'
minus_equal: '-='
minus_minus: '--'
modulo: '%'
modulo_equal: '%='
multiplicative_expression: unary_expression | multiplicative_expression star unary_expression | multiplicative_expression forward_slash unary_expression | multiplicative_expression modulo unary_expression
multisampled_texture_type: 'texture_multisampled_2d'
not_equal: '!='
or: '|'
or_equal: '|='
or_or: '||'
override: 'override'
param: param/0.0 variable_ident_decl
param/0.0: param/0.0/0 | ε
param/0.0/0: attribute param/0.0/0 | ε
param_list: param_list/0.0 param param_list/0.2
param_list/0.0: param_list/0.0/0 | ε
param_list/0.0/0: param_list/0.0/0/0.0 param_list/0.0/0 | ε
param_list/0.0/0/0.0: param comma
param_list/0.2: comma | ε
paren_expression: paren_left expression paren_right
paren_left: '('
paren_right: ')'
period: '.'
plus: '+'
plus_equal: '+='
plus_plus: '++'
pointer: 'ptr'
postfix_expression: bracket_left expression bracket_right postfix_expression/0.3 | period member_ident postfix_expression/1.2 | period swizzle_name postfix_expression/2.2
postfix_expression/0.3: postfix_expression | ε
postfix_expression/1.2: postfix_expression | ε
postfix_expression/2.2: postfix_expression | ε
primary_expression: ident | callable argument_expression_list | const_literal | paren_expression | 'bitcast' less_than type_decl greater_than paren_expression
private: 'private'
relational_expression: shift_expression | shift_expression less_than shift_expression | shift_expression greater_than shift_expression | shift_expression less_than_equal shift_expression | shift_expression greater_than_equal shift_expression | shift_expression equal_equal shift_expression | shift_expression not_equal shift_expression
return: 'return'
return_statement: 'return' return_statement/0.1
return_statement/0.1: expression | ε
sampled_texture_type: 'texture_1d' | 'texture_2d' | 'texture_2d_array' | 'texture_3d' | 'texture_cube' | 'texture_cube_array'
sampler: 'sampler'
sampler_comparison: 'sampler_comparison'
sampler_type: 'sampler' | 'sampler_comparison'
semicolon: ';'
shift_expression: additive_expression | unary_expression shift_left unary_expression | unary_expression shift_right unary_expression
shift_left: '<<'
shift_left_equal: '<<='
shift_right: '>>'
shift_right_equal: '>>='
short_circuit_and_expression: relational_expression | short_circuit_and_expression and_and relational_expression
short_circuit_or_expression: relational_expression | short_circuit_or_expression or_or relational_expression
singular_expression: primary_expression singular_expression/0.1
singular_expression/0.1: postfix_expression | ε
star: '*'
statement: semicolon | return_statement semicolon | if_statement | switch_statement | loop_statement | for_statement | while_statement | func_call_statement semicolon | variable_statement semicolon | break_statement semicolon | continue_statement semicolon | 'discard' semicolon | assignment_statement semicolon | compound_statement | increment_statement semicolon | decrement_statement semicolon | static_assert_statement semicolon
staticAssert: 'staticAssert'
static_assert_statement: 'staticAssert' expression
storage: 'storage'
storage_texture_type: 'texture_storage_1d' | 'texture_storage_2d' | 'texture_storage_2d_array' | 'texture_storage_3d'
struct: 'struct'
struct_body_decl: brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right
struct_body_decl/0.1: struct_body_decl/0.1/0 | ε
struct_body_decl/0.1/0: struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 | ε
struct_body_decl/0.1/0/0.0: struct_member comma
struct_body_decl/0.3: comma | ε
struct_decl: 'struct' ident struct_body_decl
struct_member: struct_member/0.0 member_ident colon type_decl
struct_member/0.0: struct_member/0.0/0 | ε
struct_member/0.0/0: attribute struct_member/0.0/0 | ε
switch: 'switch'
switch_body: 'case' case_selectors switch_body/0.2 case_compound_statement | 'default' switch_body/1.1 case_compound_statement
switch_body/0.2: colon | ε
switch_body/1.1: colon | ε
switch_statement: 'switch' expression brace_left switch_statement/0.3 brace_right
switch_statement/0.3: switch_statement/0.3/0
switch_statement/0.3/0: switch_body switch_statement/0.3/0 | ε
swizzle_name: '/[rgba]/' | '/[rgba][rgba]/' | '/[rgba][rgba][rgba]/' | '/[rgba][rgba][rgba][rgba]/' | '/[xyzw]/' | '/[xyzw][xyzw]/' | '/[xyzw][xyzw][xyzw]/' | '/[xyzw][xyzw][xyzw][xyzw]/'
texel_format: 'rgba8unorm' | 'rgba8snorm' | 'rgba8uint' | 'rgba8sint' | 'rgba16uint' | 'rgba16sint' | 'rgba16float' | 'r32uint' | 'r32sint' | 'r32float' | 'rg32uint' | 'rg32sint' | 'rg32float' | 'rgba32uint' | 'rgba32sint' | 'rgba32float'
texture_1d: 'texture_1d'
texture_2d: 'texture_2d'
texture_2d_array: 'texture_2d_array'
texture_3d: 'texture_3d'
texture_cube: 'texture_cube'
texture_cube_array: 'texture_cube_array'
texture_depth_2d: 'texture_depth_2d'
texture_depth_2d_array: 'texture_depth_2d_array'
texture_depth_cube: 'texture_depth_cube'
texture_depth_cube_array: 'texture_depth_cube_array'
texture_depth_multisampled_2d: 'texture_depth_multisampled_2d'
texture_multisampled_2d: 'texture_multisampled_2d'
texture_sampler_types: sampler_type | depth_texture_type | sampled_texture_type less_than type_decl greater_than | multisampled_texture_type less_than type_decl greater_than | storage_texture_type less_than texel_format comma access_mode greater_than
texture_storage_1d: 'texture_storage_1d'
texture_storage_2d: 'texture_storage_2d'
texture_storage_2d_array: 'texture_storage_2d_array'
texture_storage_3d: 'texture_storage_3d'
tilde: '~'
times_equal: '*='
translation_unit: translation_unit/0.0 translation_unit/0.1
translation_unit/0.0: translation_unit/0.0/0 | ε
translation_unit/0.0/0: global_directive translation_unit/0.0/0 | ε
translation_unit/0.1: translation_unit/0.1/0 | ε
translation_unit/0.1/0: global_decl translation_unit/0.1/0 | ε
true: 'true'
type: 'type'
type_alias_decl: 'type' ident equal type_decl
type_decl: ident | type_decl_without_ident
type_decl_without_ident: 'bool' | float32 | float16 | int32 | uint32 | pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than | array_type_decl | texture_sampler_types
type_decl_without_ident/7.5: comma access_mode | ε
uint32: 'u32'
unary_expression: singular_expression | minus unary_expression | bang unary_expression | tilde unary_expression | star unary_expression | and unary_expression
underscore: '_'
uniform: 'uniform'
var: 'var'
variable_decl: 'var' variable_decl/0.1 variable_decl/0.2
variable_decl/0.1: variable_qualifier | ε
variable_decl/0.2: ident | variable_ident_decl
variable_ident_decl: ident colon type_decl
variable_qualifier: less_than address_space variable_qualifier/0.2 greater_than
variable_qualifier/0.2: comma access_mode | ε
variable_statement: variable_decl | 'let' variable_statement/2.1 equal expression | 'const' variable_statement/3.1 equal expression
variable_statement/2.1: ident | variable_ident_decl
variable_statement/3.1: ident | variable_ident_decl
vec2: 'vec2'
vec3: 'vec3'
vec4: 'vec4'
vec_prefix: 'vec2' | 'vec3' | 'vec4'
while: 'while'
while_statement: 'while' expression compound_statement
workgroup: 'workgroup'
xor: '^'
xor_equal: '^='

=LALR1 item sets:
#0
language -> · translation_unit EndOfText : {EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit -> · translation_unit/0.0 translation_unit/0.1 : {EndOfText}
translation_unit/0.0 -> · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#1
language -> translation_unit · EndOfText : {EndOfText}

#2
translation_unit -> translation_unit/0.0 · translation_unit/0.1 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' global_constant_decl/0.1 equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'staticAssert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1 -> · translation_unit/0.1/0 : {EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#3
translation_unit/0.0 -> translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#4
translation_unit/0.0/0 -> global_directive · translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_directive -> · 'enable' extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.0/0 -> · global_directive translation_unit/0.0/0 : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#5
global_directive -> 'enable' · extension_name semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
extension_name -> · 'f16' : {';'}

#6
global_directive -> 'enable' extension_name · semicolon : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#7
extension_name -> 'f16' · : {';'}

#8
translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#9
translation_unit -> translation_unit/0.0 translation_unit/0.1 · : {EndOfText}

#10
translation_unit/0.1 -> translation_unit/0.1/0 · : {EndOfText}

#11
translation_unit/0.1/0 -> global_decl · translation_unit/0.1/0 : {EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'fn' 'override' 'var'}
function_decl -> · function_decl/0.0 function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
function_decl/0.0 -> · function_decl/0.0/0 : {'fn'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl -> · 'const' global_constant_decl/0.1 equal expression : {';'}
global_constant_decl -> · global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.0 -> · global_constant_decl/1.0/0 : {'override'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_decl -> · function_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_constant_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · global_variable_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · static_assert_statement semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · struct_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_decl -> · type_alias_decl semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
global_variable_decl -> · global_variable_decl/0.0 variable_decl global_variable_decl/0.2 : {';'}
global_variable_decl/0.0 -> · global_variable_decl/0.0/0 : {'var'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
static_assert_statement -> · 'staticAssert' expression : {';'}
struct_decl -> · 'struct' ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
translation_unit/0.1/0 -> · global_decl translation_unit/0.1/0 : {EndOfText}
type_alias_decl -> · 'type' ident equal type_decl : {';'}

#12
global_decl -> semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#13
global_decl -> global_variable_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#14
global_decl -> global_constant_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#15
global_decl -> type_alias_decl · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#16
global_decl -> struct_decl · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#17
global_decl -> function_decl · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#18
global_decl -> static_assert_statement · semicolon : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
semicolon -> · ';' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#19
semicolon -> ';' · : {'!' '&' '(' ')' '*' '-' ';' '@' 'array' 'bitcast' 'bool' 'break' 'const' 'continue' 'continuing' 'discard' 'enable' 'f16' 'f32' 'fallthrough' 'false' 'fn' 'for' 'i32' 'if' 'let' 'loop' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'override' 'ptr' 'return' 'sampler' 'sampler_comparison' 'staticAssert' 'struct' 'switch' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'type' 'u32' 'var' 'vec2' 'vec3' 'vec4' 'while' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#20
global_variable_decl -> global_variable_decl/0.0 · variable_decl global_variable_decl/0.2 : {';'}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';' '='}

#21
global_constant_decl -> 'const' · global_constant_decl/0.1 equal expression : {';'}
global_constant_decl/0.1 -> · ident : {'='}
global_constant_decl/0.1 -> · variable_ident_decl : {'='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}

#22
global_constant_decl -> global_constant_decl/1.0 · 'override' global_constant_decl/1.2 global_constant_decl/1.3 : {';'}

#23
type_alias_decl -> 'type' · ident equal type_decl : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'='}

#24
struct_decl -> 'struct' · ident struct_body_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}

#25
function_decl -> function_decl/0.0 · function_header compound_statement : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
function_header -> · 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}

#26
static_assert_statement -> 'staticAssert' · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#27
global_variable_decl/0.0 -> global_variable_decl/0.0/0 · : {'var'}

#28
global_constant_decl/1.0 -> global_constant_decl/1.0/0 · : {'override'}

#29
function_decl/0.0 -> function_decl/0.0/0 · : {'fn'}

#30
function_decl/0.0/0 -> attribute · function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> attribute · global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> attribute · global_variable_decl/0.0/0 : {'var'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'compute' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'const' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'fragment' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'invariant' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'vertex' : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'fn' 'override' 'var'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'fn' 'override' 'var'}
function_decl/0.0/0 -> · attribute function_decl/0.0/0 : {'fn'}
global_constant_decl/1.0/0 -> · attribute global_constant_decl/1.0/0 : {'override'}
global_variable_decl/0.0/0 -> · attribute global_variable_decl/0.0/0 : {'var'}

#31
attribute -> attr · 'align' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'binding' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'compute' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'const' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'fragment' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'group' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'id' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'invariant' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'location' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'size' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'vertex' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr · 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#32
attr -> '@' · : {'const'}

#33
attribute -> attr 'align' · paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#34
attribute -> attr 'binding' · paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#35
attribute -> attr 'builtin' · paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#36
attribute -> attr 'const' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#37
attribute -> attr 'group' · paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#38
attribute -> attr 'id' · paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#39
attribute -> attr 'interpolate' · paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'interpolate' · paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#40
attribute -> attr 'invariant' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#41
attribute -> attr 'location' · paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#42
attribute -> attr 'size' · paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#43
attribute -> attr 'workgroup_size' · paren_left ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' · paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' · paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {}

#44
attribute -> attr 'vertex' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#45
attribute -> attr 'fragment' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#46
attribute -> attr 'compute' · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#47
global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 · : {'var'}

#48
global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 · : {'override'}

#49
function_decl/0.0/0 -> attribute function_decl/0.0/0 · : {'fn'}

#50
static_assert_statement -> 'staticAssert' expression · : {';'}

#51
expression -> relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> relational_expression · : {'&&'}
short_circuit_or_expression -> relational_expression · : {'||'}

#52
expression -> short_circuit_or_expression · or_or relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression · or_or relational_expression : {'||'}
or_or -> · '||' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#53
expression -> short_circuit_and_expression · and_and relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression · and_and relational_expression : {'&&'}
and_and -> · '&&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#54
expression -> bitwise_expression · : {')' ',' ':' ';' ']' '{'}

#55
relational_expression -> shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
relational_expression -> shift_expression · not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
equal_equal -> · '==' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
greater_than -> · '>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
greater_than_equal -> · '>=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
less_than -> · '<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
less_than_equal -> · '<=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
not_equal -> · '!=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#56
binary_and_expression -> binary_and_expression · and unary_expression : {'&'}
bitwise_expression -> binary_and_expression · and unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#57
binary_or_expression -> binary_or_expression · or unary_expression : {'|'}
bitwise_expression -> binary_or_expression · or unary_expression : {')' ',' ':' ';' '>' ']' '{'}
or -> · '|' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#58
binary_xor_expression -> binary_xor_expression · xor unary_expression : {'^'}
bitwise_expression -> binary_xor_expression · xor unary_expression : {')' ',' ':' ';' '>' ']' '{'}
xor -> · '^' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#59
additive_expression -> additive_expression · minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> additive_expression · plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> additive_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#60
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#61
additive_expression -> multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#62
unary_expression -> singular_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#63
unary_expression -> minus · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#64
unary_expression -> bang · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#65
unary_expression -> tilde · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#66
unary_expression -> star · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#67
unary_expression -> and · unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#68
singular_expression -> primary_expression · singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}
singular_expression/0.1 -> · postfix_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#69
minus -> '-' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#70
bang -> '!' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#71
tilde -> '~' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#72
star -> '*' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#73
and -> '&' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#74
callable -> ident · : {'('}
primary_expression -> ident · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#75
primary_expression -> callable · argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#76
primary_expression -> const_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#77
primary_expression -> paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#78
primary_expression -> 'bitcast' · less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#79
ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' '(' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||' '}'}

#80
callable -> type_decl_without_ident · : {'('}

#81
callable -> vec_prefix · : {'('}

#82
callable -> mat_prefix · : {'('}

#83
const_literal -> int_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#84
const_literal -> float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#85
const_literal -> bool_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#86
paren_expression -> paren_left · expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')'}
bitwise_expression -> · binary_or_expression or unary_expression : {')'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')'}
expression -> · relational_expression : {')'}
expression -> · short_circuit_and_expression and_and relational_expression : {')'}
expression -> · short_circuit_or_expression or_or relational_expression : {')'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#87
type_decl_without_ident -> 'bool' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#88
type_decl_without_ident -> float32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#89
type_decl_without_ident -> float16 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#90
type_decl_without_ident -> int32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#91
type_decl_without_ident -> uint32 · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#92
type_decl_without_ident -> pointer · less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}

#93
type_decl_without_ident -> array_type_decl · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#94
type_decl_without_ident -> texture_sampler_types · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#95
vec_prefix -> 'vec2' · : {'('}

#96
vec_prefix -> 'vec3' · : {'('}

#97
vec_prefix -> 'vec4' · : {'('}

#98
mat_prefix -> 'mat2x2' · : {'('}

#99
mat_prefix -> 'mat2x3' · : {'('}

#100
mat_prefix -> 'mat2x4' · : {'('}

#101
mat_prefix -> 'mat3x2' · : {'('}

#102
mat_prefix -> 'mat3x3' · : {'('}

#103
mat_prefix -> 'mat3x4' · : {'('}

#104
mat_prefix -> 'mat4x2' · : {'('}

#105
mat_prefix -> 'mat4x3' · : {'('}

#106
mat_prefix -> 'mat4x4' · : {'('}

#107
int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#108
int_literal -> /0[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#109
int_literal -> /[1-9][0-9]*[iu]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#110
float_literal -> decimal_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#111
float_literal -> hex_float_literal · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#112
bool_literal -> 'true' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#113
bool_literal -> 'false' · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#114
paren_left -> '(' · : {'!' '&' '(' ')' '*' '-' ';' '@' 'array' 'bitcast' 'bool' 'const' 'f16' 'f32' 'false' 'i32' 'let' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'var' 'vec2' 'vec3' 'vec4' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#115
float32 -> 'f32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#116
float16 -> 'f16' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#117
int32 -> 'i32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#118
uint32 -> 'u32' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#119
pointer -> 'ptr' · : {'<'}

#120
array_type_decl -> 'array' · less_than type_decl array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#121
texture_sampler_types -> sampler_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#122
texture_sampler_types -> depth_texture_type · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#123
texture_sampler_types -> sampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#124
texture_sampler_types -> multisampled_texture_type · less_than type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#125
texture_sampler_types -> storage_texture_type · less_than texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
less_than -> · '<' : {}

#126
decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#127
decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#128
decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#129
decimal_float_literal -> /0[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#130
decimal_float_literal -> /[1-9][0-9]*[fh]/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#131
hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#132
hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#133
hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#134
sampler_type -> 'sampler' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#135
sampler_type -> 'sampler_comparison' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#136
depth_texture_type -> 'texture_depth_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#137
depth_texture_type -> 'texture_depth_2d_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#138
depth_texture_type -> 'texture_depth_cube' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#139
depth_texture_type -> 'texture_depth_cube_array' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#140
depth_texture_type -> 'texture_depth_multisampled_2d' · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#141
sampled_texture_type -> 'texture_1d' · : {'<'}

#142
sampled_texture_type -> 'texture_2d' · : {'<'}

#143
sampled_texture_type -> 'texture_2d_array' · : {'<'}

#144
sampled_texture_type -> 'texture_3d' · : {'<'}

#145
sampled_texture_type -> 'texture_cube' · : {'<'}

#146
sampled_texture_type -> 'texture_cube_array' · : {'<'}

#147
multisampled_texture_type -> 'texture_multisampled_2d' · : {'<'}

#148
storage_texture_type -> 'texture_storage_1d' · : {'<'}

#149
storage_texture_type -> 'texture_storage_2d' · : {'<'}

#150
storage_texture_type -> 'texture_storage_2d_array' · : {'<'}

#151
storage_texture_type -> 'texture_storage_3d' · : {'<'}

#152
function_decl -> function_decl/0.0 function_header · compound_statement : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#153
function_header -> 'fn' · ident paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}

#154
struct_decl -> 'struct' ident · struct_body_decl : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
brace_left -> · '{' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl -> · brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#155
type_alias_decl -> 'type' ident · equal type_decl : {';'}
equal -> · '=' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#156
global_constant_decl -> global_constant_decl/1.0 'override' · global_constant_decl/1.2 global_constant_decl/1.3 : {';'}
global_constant_decl/1.2 -> · ident : {';' '='}
global_constant_decl/1.2 -> · variable_ident_decl : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
variable_ident_decl -> · ident colon type_decl : {';' '='}

#157
global_constant_decl -> 'const' global_constant_decl/0.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#158
global_constant_decl/0.1 -> ident · : {'='}
variable_ident_decl -> ident · colon type_decl : {'='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#159
global_constant_decl/0.1 -> variable_ident_decl · : {'='}

#160
global_variable_decl -> global_variable_decl/0.0 variable_decl · global_variable_decl/0.2 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
global_variable_decl/0.2 -> · equal expression : {';'}

#161
variable_decl -> 'var' · variable_decl/0.1 variable_decl/0.2 : {';' '='}
less_than -> · '<' : {'function' 'private' 'storage' 'uniform' 'workgroup'}
variable_decl/0.1 -> · variable_qualifier : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_qualifier -> · less_than address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#162
global_decl -> static_assert_statement semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#163
global_decl -> type_alias_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#164
global_decl -> global_constant_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#165
global_decl -> global_variable_decl semicolon · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#166
translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 · : {EndOfText}

#167
global_directive -> 'enable' extension_name semicolon · : {';' '@' 'const' 'enable' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#168
variable_decl -> 'var' variable_decl/0.1 · variable_decl/0.2 : {';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' ';' '='}
variable_decl/0.2 -> · ident : {';' '='}
variable_decl/0.2 -> · variable_ident_decl : {';' '='}
variable_ident_decl -> · ident colon type_decl : {';' '='}

#169
variable_decl/0.1 -> variable_qualifier · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#170
variable_qualifier -> less_than · address_space variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
address_space -> · 'function' : {',' '>'}
address_space -> · 'private' : {',' '>'}
address_space -> · 'storage' : {',' '>'}
address_space -> · 'uniform' : {',' '>'}
address_space -> · 'workgroup' : {',' '>'}

#171
less_than -> '<' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'function' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'private' 'ptr' 'sampler' 'sampler_comparison' 'storage' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'uniform' 'vec2' 'vec3' 'vec4' 'workgroup' '~'}

#172
global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 · : {';'}

#173
global_variable_decl/0.2 -> equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#174
equal -> '=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#175
variable_ident_decl -> ident colon · type_decl : {')' ',' ';' '='}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_2d' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_2d_array' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_cube' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_cube_array' : {')' ',' ';' '='}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {')' ',' ';' '='}
float16 -> · 'f16' : {')' ',' ';' '='}
float32 -> · 'f32' : {')' ',' ';' '='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ',' ';' '='}
int32 -> · 'i32' : {')' ',' ';' '='}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {')' ',' ';' '='}
sampler_type -> · 'sampler_comparison' : {')' ',' ';' '='}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {')' ',' ';' '='}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {')' ',' ';' '='}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {')' ',' ';' '='}
texture_sampler_types -> · sampler_type : {')' ',' ';' '='}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {')' ',' ';' '='}
type_decl -> · ident : {')' ',' ';' '='}
type_decl -> · type_decl_without_ident : {')' ',' ';' '='}
type_decl_without_ident -> · 'bool' : {')' ',' ';' '='}
type_decl_without_ident -> · array_type_decl : {')' ',' ';' '='}
type_decl_without_ident -> · float16 : {')' ',' ';' '='}
type_decl_without_ident -> · float32 : {')' ',' ';' '='}
type_decl_without_ident -> · int32 : {')' ',' ';' '='}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {')' ',' ';' '='}
type_decl_without_ident -> · texture_sampler_types : {')' ',' ';' '='}
type_decl_without_ident -> · uint32 : {')' ',' ';' '='}
uint32 -> · 'u32' : {')' ',' ';' '='}

#176
colon -> ':' · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' '{'}

#177
global_constant_decl -> 'const' global_constant_decl/0.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#178
global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 · global_constant_decl/1.3 : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
global_constant_decl/1.3 -> · equal expression : {';'}

#179
global_constant_decl/1.2 -> ident · : {';' '='}
variable_ident_decl -> ident · colon type_decl : {';' '='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#180
global_constant_decl/1.2 -> variable_ident_decl · : {';' '='}

#181
type_alias_decl -> 'type' ident equal · type_decl : {';'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {';'}
depth_texture_type -> · 'texture_depth_2d' : {';'}
depth_texture_type -> · 'texture_depth_2d_array' : {';'}
depth_texture_type -> · 'texture_depth_cube' : {';'}
depth_texture_type -> · 'texture_depth_cube_array' : {';'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {';'}
float16 -> · 'f16' : {';'}
float32 -> · 'f32' : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {';'}
int32 -> · 'i32' : {';'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {';'}
sampler_type -> · 'sampler_comparison' : {';'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {';'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {';'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {';'}
texture_sampler_types -> · sampler_type : {';'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {';'}
type_decl -> · ident : {';'}
type_decl -> · type_decl_without_ident : {';'}
type_decl_without_ident -> · 'bool' : {';'}
type_decl_without_ident -> · array_type_decl : {';'}
type_decl_without_ident -> · float16 : {';'}
type_decl_without_ident -> · float32 : {';'}
type_decl_without_ident -> · int32 : {';'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {';'}
type_decl_without_ident -> · texture_sampler_types : {';'}
type_decl_without_ident -> · uint32 : {';'}
uint32 -> · 'u32' : {';'}

#182
struct_decl -> 'struct' ident struct_body_decl · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#183
struct_body_decl -> brace_left · struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@'}
struct_body_decl/0.1 -> · struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0 -> · struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0/0.0 -> · struct_member comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#184
brace_left -> '{' · : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#185
function_header -> 'fn' ident · paren_left function_header/0.3 paren_right function_header/0.5 : {'{'}
paren_left -> · '(' : {')' '@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#186
function_decl -> function_decl/0.0 function_header compound_statement · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#187
compound_statement -> brace_left · compound_statement/0.1 brace_right : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1 -> · compound_statement/0.1/0 : {'}'}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#188
texture_sampler_types -> storage_texture_type less_than · texel_format comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
texel_format -> · 'r32float' : {','}
texel_format -> · 'r32sint' : {','}
texel_format -> · 'r32uint' : {','}
texel_format -> · 'rg32float' : {','}
texel_format -> · 'rg32sint' : {','}
texel_format -> · 'rg32uint' : {','}
texel_format -> · 'rgba16float' : {','}
texel_format -> · 'rgba16sint' : {','}
texel_format -> · 'rgba16uint' : {','}
texel_format -> · 'rgba32float' : {','}
texel_format -> · 'rgba32sint' : {','}
texel_format -> · 'rgba32uint' : {','}
texel_format -> · 'rgba8sint' : {','}
texel_format -> · 'rgba8snorm' : {','}
texel_format -> · 'rgba8uint' : {','}
texel_format -> · 'rgba8unorm' : {','}

#189
texture_sampler_types -> multisampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampler_type : {'>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#190
texture_sampler_types -> sampled_texture_type less_than · type_decl greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampler_type : {'>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#191
array_type_decl -> 'array' less_than · type_decl array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {',' '>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_sampler_types -> · sampler_type : {',' '>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
uint32 -> · 'u32' : {',' '>'}

#192
type_decl_without_ident -> pointer less_than · address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
address_space -> · 'function' : {','}
address_space -> · 'private' : {','}
address_space -> · 'storage' : {','}
address_space -> · 'uniform' : {','}
address_space -> · 'workgroup' : {','}

#193
paren_expression -> paren_left expression · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#194
primary_expression -> 'bitcast' less_than · type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'>'}
depth_texture_type -> · 'texture_depth_2d' : {'>'}
depth_texture_type -> · 'texture_depth_2d_array' : {'>'}
depth_texture_type -> · 'texture_depth_cube' : {'>'}
depth_texture_type -> · 'texture_depth_cube_array' : {'>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'>'}
float16 -> · 'f16' : {'>'}
float32 -> · 'f32' : {'>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'>'}
int32 -> · 'i32' : {'>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'>'}
sampler_type -> · 'sampler_comparison' : {'>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'>'}
texture_sampler_types -> · sampler_type : {'>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'>'}
type_decl -> · ident : {'>'}
type_decl -> · type_decl_without_ident : {'>'}
type_decl_without_ident -> · 'bool' : {'>'}
type_decl_without_ident -> · array_type_decl : {'>'}
type_decl_without_ident -> · float16 : {'>'}
type_decl_without_ident -> · float32 : {'>'}
type_decl_without_ident -> · int32 : {'>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'>'}
type_decl_without_ident -> · texture_sampler_types : {'>'}
type_decl_without_ident -> · uint32 : {'>'}
uint32 -> · 'u32' : {'>'}

#195
primary_expression -> callable argument_expression_list · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#196
argument_expression_list -> paren_left · argument_expression_list/0.1 paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1 -> · argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.0 -> · argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0 -> · argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0/0.0 -> · expression comma : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {','}
bitwise_expression -> · binary_or_expression or unary_expression : {','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression and_and relational_expression : {','}
expression -> · short_circuit_or_expression or_or relational_expression : {','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#197
singular_expression -> primary_expression singular_expression/0.1 · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#198
singular_expression/0.1 -> postfix_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#199
postfix_expression -> bracket_left · expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' ']' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {']'}
bitwise_expression -> · binary_or_expression or unary_expression : {']'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {']'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {']'}
expression -> · relational_expression : {']'}
expression -> · short_circuit_and_expression and_and relational_expression : {']'}
expression -> · short_circuit_or_expression or_or relational_expression : {']'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' ']' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ']' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ']' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' ']' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#200
postfix_expression -> period · member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> period · swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[rgba][rgba][rgba][rgba]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}
swizzle_name -> · '/[xyzw][xyzw][xyzw][xyzw]/' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#201
bracket_left -> '[' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#202
period -> '.' · : {}

#203
unary_expression -> and unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#204
unary_expression -> star unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#205
unary_expression -> tilde unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#206
unary_expression -> bang unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#207
unary_expression -> minus unary_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '^' '{' '|' '||'}

#208
multiplicative_expression -> multiplicative_expression star · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#209
multiplicative_expression -> multiplicative_expression forward_slash · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#210
multiplicative_expression -> multiplicative_expression modulo · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#211
forward_slash -> '/' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#212
modulo -> '%' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#213
shift_expression -> unary_expression shift_left · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#214
shift_expression -> unary_expression shift_right · unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '&&' '(' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '&&' ')' ',' '.' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#215
shift_left -> '<<' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#216
shift_right -> '>>' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#217
additive_expression -> additive_expression plus · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#218
additive_expression -> additive_expression minus · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<=' '==' '>' '>=' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#219
plus -> '+' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#220
binary_xor_expression -> binary_xor_expression xor · unary_expression : {'^'}
bitwise_expression -> binary_xor_expression xor · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '^' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '^' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '^' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#221
xor -> '^' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#222
binary_or_expression -> binary_or_expression or · unary_expression : {'|'}
bitwise_expression -> binary_or_expression or · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
bool_literal -> · 'true' : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
const_literal -> · int_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /0[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
float_literal -> · hex_float_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'(' ')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · callable argument_expression_list : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · const_literal : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · ident : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
primary_expression -> · paren_expression : {')' ',' '.' ':' ';' '>' '[' ']' '{' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {')' ',' ':' ';' '>' ']' '{' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · bang unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · minus unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · singular_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · star unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
unary_expression -> · tilde unary_expression : {')' ',' ':' ';' '>' ']' '{' '|'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#223
or -> '|' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#224
binary_and_expression -> binary_and_expression and · unary_expression : {'&'}
bitwise_expression -> binary_and_expression and · unary_expression : {')' ',' ':' ';' '>' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
bool_literal -> · 'true' : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
const_literal -> · int_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'&' '(' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · const_literal : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · ident : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
primary_expression -> · paren_expression : {'&' ')' ',' '.' ':' ';' '>' '[' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'&' ')' ',' ':' ';' '>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · bang unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · minus unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · singular_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · star unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
unary_expression -> · tilde unary_expression : {'&' ')' ',' ':' ';' '>' ']' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#225
relational_expression -> shift_expression less_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#226
relational_expression -> shift_expression greater_than · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#227
relational_expression -> shift_expression less_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#228
relational_expression -> shift_expression greater_than_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#229
relational_expression -> shift_expression equal_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#230
relational_expression -> shift_expression not_equal · shift_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'&&' ')' '+' ',' '-' ':' ';' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<<' '>>' '[' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'&&' ')' ',' ':' ';' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<<' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#231
greater_than -> '>' · : {'!' '&' '(' ')' '*' ',' '-' ';' '=' '>' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#232
less_than_equal -> '<=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#233
greater_than_equal -> '>=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#234
equal_equal -> '==' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#235
not_equal -> '!=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#236
expression -> short_circuit_and_expression and_and · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and · relational_expression : {'&&'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
bool_literal -> · 'true' : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
const_literal -> · int_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · const_literal : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · ident : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
primary_expression -> · paren_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{'}
relational_expression -> · shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' ':' ';' ']' '{'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · singular_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#237
and_and -> '&&' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#238
expression -> short_circuit_or_expression or_or · relational_expression : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or · relational_expression : {'||'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
bool_literal -> · 'false' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
bool_literal -> · 'true' : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
const_literal -> · int_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
float_literal -> · hex_float_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '(' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · const_literal : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · ident : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
primary_expression -> · paren_expression : {'!=' '%' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '{' '||'}
relational_expression -> · shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {')' ',' ':' ';' ']' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · singular_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · star unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' ']' '{' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#239
or_or -> '||' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#240
attribute -> attr 'workgroup_size' paren_left · ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left · ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left · ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
ident_or_int_literal -> · ident : {')' ','}
ident_or_int_literal -> · int_literal : {')' ','}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}

#241
attribute -> attr 'size' paren_left · int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}

#242
attribute -> attr 'location' paren_left · int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}

#243
attribute -> attr 'interpolate' paren_left · interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'interpolate' paren_left · interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_type_name -> · 'flat' : {')' ','}
interpolation_type_name -> · 'linear' : {')' ','}
interpolation_type_name -> · 'perspective' : {')' ','}

#244
attribute -> attr 'id' paren_left · int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}

#245
attribute -> attr 'group' paren_left · int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}

#246
attribute -> attr 'builtin' paren_left · builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
builtin_value_name -> · 'frag_depth' : {')' ','}
builtin_value_name -> · 'front_facing' : {')' ','}
builtin_value_name -> · 'global_invocation_id' : {')' ','}
builtin_value_name -> · 'instance_index' : {')' ','}
builtin_value_name -> · 'local_invocation_id' : {')' ','}
builtin_value_name -> · 'local_invocation_index' : {')' ','}
builtin_value_name -> · 'num_workgroups' : {')' ','}
builtin_value_name -> · 'position' : {')' ','}
builtin_value_name -> · 'sample_index' : {')' ','}
builtin_value_name -> · 'sample_mask' : {')' ','}
builtin_value_name -> · 'vertex_index' : {')' ','}
builtin_value_name -> · 'workgroup_id' : {')' ','}

#247
attribute -> attr 'binding' paren_left · int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}

#248
attribute -> attr 'align' paren_left · int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}

#249
attribute -> attr 'align' paren_left int_literal · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#250
attribute -> attr 'binding' paren_left int_literal · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#251
attribute -> attr 'builtin' paren_left builtin_value_name · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#252
builtin_value_name -> 'vertex_index' · : {')' ','}

#253
builtin_value_name -> 'instance_index' · : {')' ','}

#254
builtin_value_name -> 'position' · : {')' ','}

#255
builtin_value_name -> 'front_facing' · : {')' ','}

#256
builtin_value_name -> 'frag_depth' · : {')' ','}

#257
builtin_value_name -> 'local_invocation_id' · : {')' ','}

#258
builtin_value_name -> 'local_invocation_index' · : {')' ','}

#259
builtin_value_name -> 'global_invocation_id' · : {')' ','}

#260
builtin_value_name -> 'workgroup_id' · : {')' ','}

#261
builtin_value_name -> 'num_workgroups' · : {')' ','}

#262
builtin_value_name -> 'sample_index' · : {')' ','}

#263
builtin_value_name -> 'sample_mask' · : {')' ','}

#264
attribute -> attr 'group' paren_left int_literal · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#265
attribute -> attr 'id' paren_left int_literal · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#266
attribute -> attr 'interpolate' paren_left interpolation_type_name · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'interpolate' paren_left interpolation_type_name · comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#267
interpolation_type_name -> 'perspective' · : {')' ','}

#268
interpolation_type_name -> 'linear' · : {')' ','}

#269
interpolation_type_name -> 'flat' · : {')' ','}

#270
attribute -> attr 'location' paren_left int_literal · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#271
attribute -> attr 'size' paren_left int_literal · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#272
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal · comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal · comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#273
ident_or_int_literal -> int_literal · : {')' ','}

#274
ident_or_int_literal -> ident · : {')' ','}

#275
expression -> short_circuit_or_expression or_or relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression · : {'||'}

#276
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_left unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_expression -> unary_expression · shift_right unary_expression : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
shift_left -> · '<<' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right -> · '>>' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#277
expression -> short_circuit_and_expression and_and relational_expression · : {')' ',' ':' ';' ']' '{'}
short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression · : {'&&'}

#278
relational_expression -> shift_expression not_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#279
relational_expression -> shift_expression equal_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#280
relational_expression -> shift_expression greater_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#281
relational_expression -> shift_expression less_than_equal shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#282
relational_expression -> shift_expression greater_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#283
relational_expression -> shift_expression less_than shift_expression · : {'&&' ')' ',' ':' ';' ']' '{' '||'}

#284
binary_and_expression -> binary_and_expression and unary_expression · : {'&'}
bitwise_expression -> binary_and_expression and unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#285
binary_or_expression -> binary_or_expression or unary_expression · : {'|'}
bitwise_expression -> binary_or_expression or unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#286
binary_xor_expression -> binary_xor_expression xor unary_expression · : {'^'}
bitwise_expression -> binary_xor_expression xor unary_expression · : {')' ',' ':' ';' '>' ']' '{'}

#287
additive_expression -> additive_expression minus multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#288
multiplicative_expression -> unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#289
additive_expression -> additive_expression plus multiplicative_expression · : {'!=' '&&' ')' '+' ',' '-' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
multiplicative_expression -> multiplicative_expression · star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}
forward_slash -> · '/' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
modulo -> · '%' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#290
shift_expression -> unary_expression shift_right unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#291
shift_expression -> unary_expression shift_left unary_expression · : {'!=' '&&' ')' ',' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#292
multiplicative_expression -> multiplicative_expression modulo unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#293
multiplicative_expression -> multiplicative_expression forward_slash unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#294
multiplicative_expression -> multiplicative_expression star unary_expression · : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' ':' ';' '<' '<=' '==' '>' '>=' ']' '{' '||'}

#295
postfix_expression -> period member_ident · postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/1.2 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#296
postfix_expression -> period swizzle_name · postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/2.2 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#297
member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#298
swizzle_name -> '/[rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#299
swizzle_name -> '/[rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#300
swizzle_name -> '/[rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#301
swizzle_name -> '/[rgba][rgba][rgba][rgba]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#302
swizzle_name -> '/[xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#303
swizzle_name -> '/[xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#304
swizzle_name -> '/[xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#305
swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#306
postfix_expression -> bracket_left expression · bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_right -> · ']' : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#307
argument_expression_list -> paren_left argument_expression_list/0.1 · paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_right -> · ')' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#308
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 · expression argument_expression_list/0.1/0.2 : {')'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ','}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ','}
expression -> · relational_expression : {')' ','}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ','}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#309
argument_expression_list/0.1/0.0 -> argument_expression_list/0.1/0.0/0 · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#310
argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 · argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0 -> · argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
argument_expression_list/0.1/0.0/0/0.0 -> · expression comma : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {','}
bitwise_expression -> · binary_or_expression or unary_expression : {','}
bitwise_expression -> · binary_xor_expression xor unary_expression : {','}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {','}
expression -> · relational_expression : {','}
expression -> · short_circuit_and_expression and_and relational_expression : {','}
expression -> · short_circuit_or_expression or_or relational_expression : {','}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#311
argument_expression_list/0.1/0.0/0/0.0 -> expression · comma : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#312
primary_expression -> 'bitcast' less_than type_decl · greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
greater_than -> · '>' : {'('}

#313
type_decl -> ident · : {')' ',' ';' '=' '>' '{' '}'}

#314
type_decl -> type_decl_without_ident · : {')' ',' ';' '=' '>' '{' '}'}

#315
paren_expression -> paren_left expression paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#316
paren_right -> ')' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '->' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '@' '[' ']' '^' '^=' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' '{' '|' '|=' '||' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#317
type_decl_without_ident -> pointer less_than address_space · comma type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#318
address_space -> 'function' · : {',' '>'}

#319
address_space -> 'private' · : {',' '>'}

#320
address_space -> 'workgroup' · : {',' '>'}

#321
address_space -> 'uniform' · : {',' '>'}

#322
address_space -> 'storage' · : {',' '>'}

#323
array_type_decl -> 'array' less_than type_decl · array_type_decl/0.3 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl/0.3 -> · comma element_count_expression : {'>'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#324
texture_sampler_types -> sampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#325
texture_sampler_types -> multisampled_texture_type less_than type_decl · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#326
texture_sampler_types -> storage_texture_type less_than texel_format · comma access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}

#327
texel_format -> 'rgba8unorm' · : {','}

#328
texel_format -> 'rgba8snorm' · : {','}

#329
texel_format -> 'rgba8uint' · : {','}

#330
texel_format -> 'rgba8sint' · : {','}

#331
texel_format -> 'rgba16uint' · : {','}

#332
texel_format -> 'rgba16sint' · : {','}

#333
texel_format -> 'rgba16float' · : {','}

#334
texel_format -> 'r32uint' · : {','}

#335
texel_format -> 'r32sint' · : {','}

#336
texel_format -> 'r32float' · : {','}

#337
texel_format -> 'rg32uint' · : {','}

#338
texel_format -> 'rg32sint' · : {','}

#339
texel_format -> 'rg32float' · : {','}

#340
texel_format -> 'rgba32uint' · : {','}

#341
texel_format -> 'rgba32sint' · : {','}

#342
texel_format -> 'rgba32float' · : {','}

#343
compound_statement -> brace_left compound_statement/0.1 · brace_right : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}
brace_right -> · '}' : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#344
compound_statement/0.1 -> compound_statement/0.1/0 · : {'}'}

#345
compound_statement/0.1/0 -> statement · compound_statement/0.1/0 : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement/0.1/0 -> · statement compound_statement/0.1/0 : {'}'}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#346
statement -> semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#347
statement -> return_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#348
statement -> if_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#349
statement -> switch_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#350
statement -> loop_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#351
statement -> for_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#352
statement -> while_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#353
statement -> func_call_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#354
statement -> variable_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#355
statement -> break_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#356
statement -> continue_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#357
statement -> 'discard' · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#358
statement -> assignment_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#359
statement -> compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#360
statement -> increment_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#361
statement -> decrement_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#362
statement -> static_assert_statement · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#363
return_statement -> 'return' · return_statement/0.1 : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
return_statement/0.1 -> · expression : {';'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#364
if_statement -> 'if' · expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#365
switch_statement -> 'switch' · expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#366
loop_statement -> 'loop' · brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#367
for_statement -> 'for' · paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_left -> · '(' : {'&' '(' '*' ';' 'const' 'let' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#368
while_statement -> 'while' · expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'{'}
bitwise_expression -> · binary_or_expression or unary_expression : {'{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {'{'}
expression -> · relational_expression : {'{'}
expression -> · short_circuit_and_expression and_and relational_expression : {'{'}
expression -> · short_circuit_or_expression or_or relational_expression : {'{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#369
func_call_statement -> ident · argument_expression_list : {')' ';'}
argument_expression_list -> · paren_left argument_expression_list/0.1 paren_right : {')' ';'}
paren_left -> · '(' : {'!' '&' '(' ')' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#370
variable_statement -> variable_decl · : {';'}

#371
variable_statement -> 'let' · variable_statement/2.1 equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}
variable_statement/2.1 -> · ident : {'='}
variable_statement/2.1 -> · variable_ident_decl : {'='}

#372
variable_statement -> 'const' · variable_statement/3.1 equal expression : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':' '='}
variable_ident_decl -> · ident colon type_decl : {'='}
variable_statement/3.1 -> · ident : {'='}
variable_statement/3.1 -> · variable_ident_decl : {'='}

#373
break_statement -> 'break' · : {';'}

#374
continue_statement -> 'continue' · : {';'}

#375
assignment_statement -> lhs_expression · assignment_statement/0.1 expression : {')' ';'}
decrement_statement -> lhs_expression · minus_minus : {')' ';'}
increment_statement -> lhs_expression · plus_plus : {')' ';'}
and_equal -> · '&=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
assignment_statement/0.1 -> · compound_assignment_operator : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
assignment_statement/0.1 -> · equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · and_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · division_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · minus_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · modulo_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · or_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · plus_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · shift_left_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · shift_right_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · times_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
compound_assignment_operator -> · xor_equal : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
division_equal -> · '/=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus_equal -> · '-=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
minus_minus -> · '--' : {')' ';'}
modulo_equal -> · '%=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
or_equal -> · '|=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus_equal -> · '+=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus_plus -> · '++' : {')' ';'}
shift_left_equal -> · '<<=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
shift_right_equal -> · '>>=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
times_equal -> · '*=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
xor_equal -> · '^=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#376
lhs_expression -> lhs_expression/0.0 · core_lhs_expression lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
core_lhs_expression -> · ident : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
core_lhs_expression -> · paren_left lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_left -> · '(' : {'&' '(' '*'}

#377
lhs_expression/0.0 -> lhs_expression/0.0/0 · : {'('}

#378
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 · lhs_expression/0.0/0 : {'('}
and -> · '&' : {'&' '(' '*'}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#379
lhs_expression/0.0/0/0.0 -> star · : {'&' '(' '*'}

#380
lhs_expression/0.0/0/0.0 -> and · : {'&' '(' '*'}

#381
function_header -> 'fn' ident paren_left · function_header/0.3 paren_right function_header/0.5 : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
function_header/0.3 -> · param_list : {')'}
param -> · param/0.0 variable_ident_decl : {','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list -> · param_list/0.0 param param_list/0.2 : {')'}
param_list/0.0 -> · param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0 -> · param_list/0.0/0/0.0 param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0/0.0 -> · param comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#382
struct_body_decl -> brace_left struct_body_decl/0.1 · struct_member struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@'}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {',' '}'}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#383
struct_body_decl/0.1 -> struct_body_decl/0.1/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#384
struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 · struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@'}
struct_body_decl/0.1/0 -> · struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_body_decl/0.1/0/0.0 -> · struct_member comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
struct_member -> · struct_member/0.0 member_ident colon type_decl : {','}
struct_member/0.0 -> · struct_member/0.0/0 : {}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#385
struct_body_decl/0.1/0/0.0 -> struct_member · comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#386
struct_member -> struct_member/0.0 · member_ident colon type_decl : {',' '}'}
member_ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}

#387
struct_member/0.0 -> struct_member/0.0/0 · : {}

#388
struct_member/0.0/0 -> attribute · struct_member/0.0/0 : {}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@'}
attribute -> · attr 'compute' : {'@'}
attribute -> · attr 'const' : {'@'}
attribute -> · attr 'fragment' : {'@'}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@'}
attribute -> · attr 'invariant' : {'@'}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@'}
attribute -> · attr 'vertex' : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@'}
struct_member/0.0/0 -> · attribute struct_member/0.0/0 : {}

#389
type_alias_decl -> 'type' ident equal type_decl · : {';'}

#390
global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 · : {';'}

#391
global_constant_decl/1.3 -> equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#392
global_constant_decl -> 'const' global_constant_decl/0.1 equal expression · : {';'}

#393
variable_ident_decl -> ident colon type_decl · : {')' ',' ';' '='}

#394
global_variable_decl/0.2 -> equal expression · : {';'}

#395
variable_qualifier -> less_than address_space · variable_qualifier/0.2 greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {}
variable_qualifier/0.2 -> · comma access_mode : {'>'}

#396
variable_decl -> 'var' variable_decl/0.1 variable_decl/0.2 · : {';' '='}

#397
variable_decl/0.2 -> ident · : {';' '='}
variable_ident_decl -> ident · colon type_decl : {';' '='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#398
variable_decl/0.2 -> variable_ident_decl · : {';' '='}

#399
variable_qualifier -> less_than address_space variable_qualifier/0.2 · greater_than : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
greater_than -> · '>' : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#400
variable_qualifier/0.2 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#401
comma -> ',' · : {'!' '&' '(' ')' '*' '-' ':' '@' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '{' '}' '~' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#402
global_constant_decl/1.3 -> equal expression · : {';'}

#403
struct_member/0.0/0 -> attribute struct_member/0.0/0 · : {}

#404
struct_member -> struct_member/0.0 member_ident · colon type_decl : {',' '}'}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#405
struct_body_decl/0.1/0/0.0 -> struct_member comma · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#406
struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#407
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member · struct_body_decl/0.3 brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
comma -> · ',' : {'}'}
struct_body_decl/0.3 -> · comma : {'}'}

#408
function_header -> 'fn' ident paren_left function_header/0.3 · paren_right function_header/0.5 : {'{'}
paren_right -> · ')' : {'->' '{'}

#409
function_header/0.3 -> param_list · : {')'}

#410
param_list -> param_list/0.0 · param param_list/0.2 : {')'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 variable_ident_decl : {')' ','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#411
param_list/0.0 -> param_list/0.0/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#412
param_list/0.0/0 -> param_list/0.0/0/0.0 · param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param -> · param/0.0 variable_ident_decl : {','}
param/0.0 -> · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0 -> · param_list/0.0/0/0.0 param_list/0.0/0 : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param_list/0.0/0/0.0 -> · param comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#413
param_list/0.0/0/0.0 -> param · comma : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
comma -> · ',' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#414
param -> param/0.0 · variable_ident_decl : {')' ','}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {':'}
variable_ident_decl -> · ident colon type_decl : {')' ','}

#415
param/0.0 -> param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#416
param/0.0/0 -> attribute · param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'compute' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'const' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'fragment' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'invariant' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'vertex' : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
param/0.0/0 -> · attribute param/0.0/0 : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#417
lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 · : {'('}

#418
lhs_expression -> lhs_expression/0.0 core_lhs_expression · lhs_expression/0.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
lhs_expression/0.2 -> · postfix_expression : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#419
core_lhs_expression -> ident · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#420
core_lhs_expression -> paren_left · lhs_expression paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
and -> · '&' : {'&' '(' '*'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {')'}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#421
assignment_statement -> lhs_expression assignment_statement/0.1 · expression : {')' ';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' ')' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {')' ';'}
bitwise_expression -> · binary_or_expression or unary_expression : {')' ';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {')' ';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {')' ';'}
expression -> · relational_expression : {')' ';'}
expression -> · short_circuit_and_expression and_and relational_expression : {')' ';'}
expression -> · short_circuit_or_expression or_or relational_expression : {')' ';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' ')' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ')' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ')' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ')' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' ')' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#422
increment_statement -> lhs_expression plus_plus · : {')' ';'}

#423
decrement_statement -> lhs_expression minus_minus · : {')' ';'}

#424
assignment_statement/0.1 -> equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#425
assignment_statement/0.1 -> compound_assignment_operator · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#426
plus_plus -> '++' · : {')' ';'}

#427
minus_minus -> '--' · : {')' ';'}

#428
compound_assignment_operator -> plus_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#429
compound_assignment_operator -> minus_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#430
compound_assignment_operator -> times_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#431
compound_assignment_operator -> division_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#432
compound_assignment_operator -> modulo_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#433
compound_assignment_operator -> and_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#434
compound_assignment_operator -> or_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#435
compound_assignment_operator -> xor_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#436
compound_assignment_operator -> shift_right_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#437
compound_assignment_operator -> shift_left_equal · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#438
plus_equal -> '+=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#439
minus_equal -> '-=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#440
times_equal -> '*=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#441
division_equal -> '/=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#442
modulo_equal -> '%=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#443
and_equal -> '&=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#444
or_equal -> '|=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#445
xor_equal -> '^=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#446
shift_right_equal -> '>>=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#447
shift_left_equal -> '<<=' · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#448
variable_statement -> 'const' variable_statement/3.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#449
variable_ident_decl -> ident · colon type_decl : {'='}
variable_statement/3.1 -> ident · : {'='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#450
variable_statement/3.1 -> variable_ident_decl · : {'='}

#451
variable_statement -> 'let' variable_statement/2.1 · equal expression : {';'}
equal -> · '=' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#452
variable_ident_decl -> ident · colon type_decl : {'='}
variable_statement/2.1 -> ident · : {'='}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#453
variable_statement/2.1 -> variable_ident_decl · : {'='}

#454
func_call_statement -> ident argument_expression_list · : {')' ';'}

#455
while_statement -> 'while' expression · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#456
for_statement -> 'for' paren_left · for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_header -> · for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
for_header/0.0 -> · for_init : {';'}
for_init -> · assignment_statement : {';'}
for_init -> · decrement_statement : {';'}
for_init -> · func_call_statement : {';'}
for_init -> · increment_statement : {';'}
for_init -> · variable_statement : {';'}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}

#457
loop_statement -> 'loop' brace_left · loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2 -> · loop_statement/0.2/0 : {'continuing' '}'}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#458
switch_statement -> 'switch' expression · brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'case' 'default' '}'}

#459
if_statement -> 'if' expression · compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#460
return_statement -> 'return' return_statement/0.1 · : {';'}

#461
return_statement/0.1 -> expression · : {';'}

#462
statement -> static_assert_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#463
statement -> decrement_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#464
statement -> increment_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#465
statement -> assignment_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#466
statement -> 'discard' semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#467
statement -> continue_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#468
statement -> break_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#469
statement -> variable_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#470
statement -> func_call_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#471
statement -> return_statement semicolon · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#472
compound_statement/0.1/0 -> statement compound_statement/0.1/0 · : {'}'}

#473
compound_statement -> brace_left compound_statement/0.1 brace_right · : {'&' '(' '*' ';' '@' 'break' 'const' 'continue' 'continuing' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#474
brace_right -> '}' · : {'&' '(' '*' ';' '@' 'break' 'case' 'const' 'continue' 'continuing' 'default' 'discard' 'else' 'fallthrough' 'fn' 'for' 'if' 'let' 'loop' 'override' 'return' 'staticAssert' 'struct' 'switch' 'type' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ EndOfText}

#475
texture_sampler_types -> storage_texture_type less_than texel_format comma · access_mode greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#476
texture_sampler_types -> multisampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#477
texture_sampler_types -> sampled_texture_type less_than type_decl greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#478
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#479
array_type_decl/0.3 -> comma · element_count_expression : {'>'}
additive_expression -> · additive_expression minus multiplicative_expression : {'+' '-' '>'}
additive_expression -> · additive_expression plus multiplicative_expression : {'+' '-' '>'}
additive_expression -> · multiplicative_expression : {'+' '-' '>'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {'>'}
bitwise_expression -> · binary_or_expression or unary_expression : {'>'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {'>'}
bool_literal -> · 'false' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
bool_literal -> · 'true' : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
const_literal -> · int_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /0[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
element_count_expression -> · additive_expression : {'>'}
element_count_expression -> · bitwise_expression : {'>'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
float_literal -> · hex_float_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'%' '&' '(' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'%' '*' '+' '-' '/' '>'}
multiplicative_expression -> · unary_expression : {'%' '*' '+' '-' '/' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · callable argument_expression_list : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · const_literal : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · ident : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
primary_expression -> · paren_expression : {'%' '&' '*' '+' '-' '.' '/' '>' '[' '^' '|'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
singular_expression -> · primary_expression singular_expression/0.1 : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · bang unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · minus unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · singular_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · star unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
unary_expression -> · tilde unary_expression : {'%' '&' '*' '+' '-' '/' '>' '^' '|'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#480
type_decl_without_ident -> pointer less_than address_space comma · type_decl type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '>'}
depth_texture_type -> · 'texture_depth_2d' : {',' '>'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube' : {',' '>'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '>'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '>'}
float16 -> · 'f16' : {',' '>'}
float32 -> · 'f32' : {',' '>'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '>'}
int32 -> · 'i32' : {',' '>'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '>'}
sampler_type -> · 'sampler_comparison' : {',' '>'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {',' '>'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '>'}
texture_sampler_types -> · sampler_type : {',' '>'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '>'}
type_decl -> · ident : {',' '>'}
type_decl -> · type_decl_without_ident : {',' '>'}
type_decl_without_ident -> · 'bool' : {',' '>'}
type_decl_without_ident -> · array_type_decl : {',' '>'}
type_decl_without_ident -> · float16 : {',' '>'}
type_decl_without_ident -> · float32 : {',' '>'}
type_decl_without_ident -> · int32 : {',' '>'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '>'}
type_decl_without_ident -> · texture_sampler_types : {',' '>'}
type_decl_without_ident -> · uint32 : {',' '>'}
uint32 -> · 'u32' : {',' '>'}

#481
primary_expression -> 'bitcast' less_than type_decl greater_than · paren_expression : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#482
argument_expression_list/0.1/0.0/0/0.0 -> expression comma · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#483
argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 · : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#484
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression · argument_expression_list/0.1/0.2 : {')'}
argument_expression_list/0.1/0.2 -> · comma : {')'}
comma -> · ',' : {')'}

#485
argument_expression_list -> paren_left argument_expression_list/0.1 paren_right · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#486
postfix_expression -> bracket_left expression bracket_right · postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
bracket_left -> · '[' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
period -> · '.' : {}
postfix_expression -> · bracket_left expression bracket_right postfix_expression/0.3 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period member_ident postfix_expression/1.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression -> · period swizzle_name postfix_expression/2.2 : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}
postfix_expression/0.3 -> · postfix_expression : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#487
bracket_right -> ']' · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '.' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' '[' ']' '^' '^=' '{' '|' '|=' '||'}

#488
postfix_expression -> period swizzle_name postfix_expression/2.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#489
postfix_expression/2.2 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#490
postfix_expression -> period member_ident postfix_expression/1.2 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#491
postfix_expression/1.2 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#492
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#493
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma · ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma · ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
ident_or_int_literal -> · ident : {')' ','}
ident_or_int_literal -> · int_literal : {')' ','}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}

#494
attrib_end -> attrib_end/0.0 · paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#495
attribute -> attr 'size' paren_left int_literal attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#496
attrib_end/0.0 -> comma · : {')'}

#497
attribute -> attr 'location' paren_left int_literal attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#498
attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#499
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'interpolate' paren_left interpolation_type_name comma · interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
interpolation_sample_name -> · 'center' : {')' ','}
interpolation_sample_name -> · 'centroid' : {')' ','}
interpolation_sample_name -> · 'sample' : {')' ','}

#500
attribute -> attr 'id' paren_left int_literal attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#501
attribute -> attr 'group' paren_left int_literal attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#502
attribute -> attr 'builtin' paren_left builtin_value_name attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#503
attribute -> attr 'binding' paren_left int_literal attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#504
attribute -> attr 'align' paren_left int_literal attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#505
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#506
interpolation_sample_name -> 'center' · : {')' ','}

#507
interpolation_sample_name -> 'centroid' · : {')' ','}

#508
interpolation_sample_name -> 'sample' · : {')' ','}

#509
attrib_end -> attrib_end/0.0 paren_right · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#510
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal · comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#511
postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#512
postfix_expression/0.3 -> postfix_expression · : {'!=' '%' '%=' '&&' '&' '&=' ')' '*' '*=' '+' '++' '+=' ',' '-' '--' '-=' '/' '/=' ':' ';' '<' '<<' '<<=' '<=' '=' '==' '>' '>=' '>>' '>>=' ']' '^' '^=' '{' '|' '|=' '||'}

#513
argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 · : {')'}

#514
argument_expression_list/0.1/0.2 -> comma · : {')'}

#515
primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression · : {'!=' '%' '&&' '&' ')' '*' '+' ',' '-' '.' '/' ':' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' ']' '^' '{' '|' '||'}

#516
type_decl_without_ident -> pointer less_than address_space comma type_decl · type_decl_without_ident/7.5 greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
comma -> · ',' : {}
type_decl_without_ident/7.5 -> · comma access_mode : {'>'}

#517
array_type_decl/0.3 -> comma element_count_expression · : {'>'}

#518
additive_expression -> additive_expression · minus multiplicative_expression : {'+' '-' '>'}
additive_expression -> additive_expression · plus multiplicative_expression : {'+' '-' '>'}
element_count_expression -> additive_expression · : {'>'}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
plus -> · '+' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#519
element_count_expression -> bitwise_expression · : {'>'}

#520
binary_and_expression -> unary_expression · : {'&'}
binary_or_expression -> unary_expression · : {'|'}
binary_xor_expression -> unary_expression · : {'^'}
multiplicative_expression -> unary_expression · : {'%' '*' '+' '-' '/' '>'}

#521
array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#522
texture_sampler_types -> storage_texture_type less_than texel_format comma access_mode · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#523
access_mode -> 'read' · : {'>'}

#524
access_mode -> 'write' · : {'>'}

#525
access_mode -> 'read_write' · : {'>'}

#526
if_statement -> 'if' expression compound_statement · if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement/0.3 -> · 'else' else_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#527
switch_statement -> 'switch' expression brace_left · switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
switch_body -> · 'case' case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
switch_body -> · 'default' switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
switch_statement/0.3 -> · switch_statement/0.3/0 : {'}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#528
loop_statement -> 'loop' brace_left loop_statement/0.2 · loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_statement -> · 'continuing' continuing_compound_statement : {'}'}
loop_statement/0.3 -> · continuing_statement : {'}'}

#529
loop_statement/0.2 -> loop_statement/0.2/0 · : {'continuing' '}'}

#530
loop_statement/0.2/0 -> statement · loop_statement/0.2/0 : {'continuing' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
loop_statement/0.2/0 -> · statement loop_statement/0.2/0 : {'continuing' '}'}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#531
for_statement -> 'for' paren_left for_header · paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
paren_right -> · ')' : {'{'}

#532
for_header -> for_header/0.0 · semicolon for_header/0.2 semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'!' '&' '(' '*' '-' ';' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#533
for_header/0.0 -> for_init · : {';'}

#534
for_init -> variable_statement · : {';'}

#535
for_init -> increment_statement · : {';'}

#536
for_init -> decrement_statement · : {';'}

#537
for_init -> assignment_statement · : {';'}

#538
for_init -> func_call_statement · : {';'}

#539
while_statement -> 'while' expression compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#540
variable_statement -> 'let' variable_statement/2.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#541
variable_statement -> 'const' variable_statement/3.1 equal · expression : {';'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#542
assignment_statement -> lhs_expression assignment_statement/0.1 expression · : {')' ';'}

#543
core_lhs_expression -> paren_left lhs_expression · paren_right : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}
paren_right -> · ')' : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#544
lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#545
lhs_expression/0.2 -> postfix_expression · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}

#546
param/0.0/0 -> attribute param/0.0/0 · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#547
param -> param/0.0 variable_ident_decl · : {')' ','}

#548
variable_ident_decl -> ident · colon type_decl : {')' ','}
colon -> · ':' : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#549
param_list/0.0/0/0.0 -> param comma · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#550
param_list/0.0/0 -> param_list/0.0/0/0.0 param_list/0.0/0 · : {'@' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#551
param_list -> param_list/0.0 param · param_list/0.2 : {')'}
comma -> · ',' : {')'}
param_list/0.2 -> · comma : {')'}

#552
function_header -> 'fn' ident paren_left function_header/0.3 paren_right · function_header/0.5 : {'{'}
arrow -> · '->' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5 -> · arrow function_header/0.5/0.1 type_decl : {'{'}

#553
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 · brace_right : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}
brace_right -> · '}' : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#554
struct_body_decl/0.3 -> comma · : {'}'}

#555
struct_member -> struct_member/0.0 member_ident colon · type_decl : {',' '}'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {',' '}'}
depth_texture_type -> · 'texture_depth_2d' : {',' '}'}
depth_texture_type -> · 'texture_depth_2d_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube' : {',' '}'}
depth_texture_type -> · 'texture_depth_cube_array' : {',' '}'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {',' '}'}
float16 -> · 'f16' : {',' '}'}
float32 -> · 'f32' : {',' '}'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {',' '}'}
int32 -> · 'i32' : {',' '}'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {',' '}'}
sampler_type -> · 'sampler_comparison' : {',' '}'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {',' '}'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {',' '}'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {',' '}'}
texture_sampler_types -> · sampler_type : {',' '}'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {',' '}'}
type_decl -> · ident : {',' '}'}
type_decl -> · type_decl_without_ident : {',' '}'}
type_decl_without_ident -> · 'bool' : {',' '}'}
type_decl_without_ident -> · array_type_decl : {',' '}'}
type_decl_without_ident -> · float16 : {',' '}'}
type_decl_without_ident -> · float32 : {',' '}'}
type_decl_without_ident -> · int32 : {',' '}'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {',' '}'}
type_decl_without_ident -> · texture_sampler_types : {',' '}'}
type_decl_without_ident -> · uint32 : {',' '}'}
uint32 -> · 'u32' : {',' '}'}

#556
variable_qualifier/0.2 -> comma access_mode · : {'>'}

#557
variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than · : {/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#558
struct_member -> struct_member/0.0 member_ident colon type_decl · : {',' '}'}

#559
struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right · : {';' '@' 'const' 'fn' 'override' 'staticAssert' 'struct' 'type' 'var' EndOfText}

#560
function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 · : {'{'}

#561
function_header/0.5 -> arrow · function_header/0.5/0.1 type_decl : {'{'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'compute' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'const' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'fragment' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'invariant' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'vertex' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5/0.1 -> · function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#562
arrow -> '->' · : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#563
param_list -> param_list/0.0 param param_list/0.2 · : {')'}

#564
param_list/0.2 -> comma · : {')'}

#565
core_lhs_expression -> paren_left lhs_expression paren_right · : {'%=' '&=' ')' '*=' '++' '+=' '--' '-=' '.' '/=' '<<=' '=' '>>=' '[' '^=' '|='}

#566
variable_statement -> 'const' variable_statement/3.1 equal expression · : {';'}

#567
variable_statement -> 'let' variable_statement/2.1 equal expression · : {';'}

#568
for_header -> for_header/0.0 semicolon · for_header/0.2 semicolon for_header/0.4 : {')'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
for_header/0.2 -> · expression : {';'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#569
for_statement -> 'for' paren_left for_header paren_right · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#570
loop_statement/0.2/0 -> statement loop_statement/0.2/0 · : {'continuing' '}'}

#571
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 · brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#572
loop_statement/0.3 -> continuing_statement · : {'}'}

#573
continuing_statement -> 'continuing' · continuing_compound_statement : {'}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continuing_compound_statement -> · brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}

#574
switch_statement -> 'switch' expression brace_left switch_statement/0.3 · brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_right -> · '}' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#575
switch_statement/0.3 -> switch_statement/0.3/0 · : {'}'}

#576
switch_statement/0.3/0 -> switch_body · switch_statement/0.3/0 : {'}'}
switch_body -> · 'case' case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
switch_body -> · 'default' switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
switch_statement/0.3/0 -> · switch_body switch_statement/0.3/0 : {'}'}

#577
switch_body -> 'case' · case_selectors switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
case_selectors -> · expression case_selectors/0.1 case_selectors/0.2 : {':' '{'}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#578
switch_body -> 'default' · switch_body/1.1 case_compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
switch_body/1.1 -> · colon : {'{'}

#579
if_statement -> 'if' expression compound_statement if_statement/0.3 · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#580
if_statement/0.3 -> 'else' · else_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
else_statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#581
texture_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#582
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 · greater_than : {'(' ')' ',' ';' '=' '>' '{' '}'}
greater_than -> · '>' : {'(' ')' ',' ';' '=' '>' '{' '}'}

#583
type_decl_without_ident/7.5 -> comma · access_mode : {'>'}
access_mode -> · 'read' : {'>'}
access_mode -> · 'read_write' : {'>'}
access_mode -> · 'write' : {'>'}

#584
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#585
attrib_end/0.0 -> comma · : {')'}
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma · ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {')' ','}
ident_or_int_literal -> · ident : {')' ','}
ident_or_int_literal -> · int_literal : {')' ','}
int_literal -> · /0[iu]?/ : {')' ','}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {')' ','}
int_literal -> · /[1-9][0-9]*[iu]?/ : {')' ','}

#586
attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#587
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal · attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end -> · attrib_end/0.0 paren_right : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
attrib_end/0.0 -> · comma : {')'}
comma -> · ',' : {')'}

#588
type_decl_without_ident/7.5 -> comma access_mode · : {'>'}

#589
type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than · : {'(' ')' ',' ';' '=' '>' '{' '}'}

#590
if_statement/0.3 -> 'else' else_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#591
else_statement -> compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#592
else_statement -> if_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#593
switch_body -> 'default' switch_body/1.1 · case_compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_compound_statement -> · brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}

#594
switch_body/1.1 -> colon · : {'{'}

#595
switch_body -> 'case' case_selectors · switch_body/0.2 case_compound_statement : {'case' 'default' '}'}
colon -> · ':' : {'{'}
switch_body/0.2 -> · colon : {'{'}

#596
case_selectors -> expression · case_selectors/0.1 case_selectors/0.2 : {':' '{'}
case_selectors/0.1 -> · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma expression : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#597
switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 · : {'}'}

#598
switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#599
continuing_statement -> 'continuing' continuing_compound_statement · : {'}'}

#600
continuing_compound_statement -> brace_left · continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right : {'}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1 -> · continuing_compound_statement/0.1/0 : {'break' '}'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#601
loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#602
for_statement -> 'for' paren_left for_header paren_right compound_statement · : {'&' '(' '*' ';' 'break' 'const' 'continue' 'continuing' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#603
for_header -> for_header/0.0 semicolon for_header/0.2 · semicolon for_header/0.4 : {')'}
semicolon -> · ';' : {'&' '(' ')' '*' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#604
for_header/0.2 -> expression · : {';'}

#605
function_header/0.5 -> arrow function_header/0.5/0.1 · type_decl : {'{'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'{'}
depth_texture_type -> · 'texture_depth_2d' : {'{'}
depth_texture_type -> · 'texture_depth_2d_array' : {'{'}
depth_texture_type -> · 'texture_depth_cube' : {'{'}
depth_texture_type -> · 'texture_depth_cube_array' : {'{'}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'{'}
float16 -> · 'f16' : {'{'}
float32 -> · 'f32' : {'{'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'{'}
int32 -> · 'i32' : {'{'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
pointer -> · 'ptr' : {'<'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'{'}
sampler_type -> · 'sampler_comparison' : {'{'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'{'}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'{'}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'{'}
texture_sampler_types -> · sampler_type : {'{'}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'{'}
type_decl -> · ident : {'{'}
type_decl -> · type_decl_without_ident : {'{'}
type_decl_without_ident -> · 'bool' : {'{'}
type_decl_without_ident -> · array_type_decl : {'{'}
type_decl_without_ident -> · float16 : {'{'}
type_decl_without_ident -> · float32 : {'{'}
type_decl_without_ident -> · int32 : {'{'}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'{'}
type_decl_without_ident -> · texture_sampler_types : {'{'}
type_decl_without_ident -> · uint32 : {'{'}
uint32 -> · 'u32' : {'{'}

#606
function_header/0.5/0.1 -> function_header/0.5/0.1/0 · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#607
function_header/0.5/0.1/0 -> attribute · function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attr -> · '@' : {'const'}
attribute -> · attr 'align' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'binding' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'builtin' paren_left builtin_value_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'compute' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'const' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'fragment' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'group' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'id' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'invariant' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'location' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'size' paren_left int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'vertex' : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
attribute -> · attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end : {'@' 'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}
function_header/0.5/0.1/0 -> · attribute function_header/0.5/0.1/0 : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#608
function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 · : {'array' 'bool' 'f16' 'f32' 'i32' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32'}

#609
function_header/0.5 -> arrow function_header/0.5/0.1 type_decl · : {'{'}

#610
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon · for_header/0.4 : {')'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {')'}
decrement_statement -> · lhs_expression minus_minus : {')'}
for_header/0.4 -> · for_update : {')'}
for_update -> · assignment_statement : {')'}
for_update -> · decrement_statement : {')'}
for_update -> · func_call_statement : {')'}
for_update -> · increment_statement : {')'}
func_call_statement -> · ident argument_expression_list : {')'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
increment_statement -> · lhs_expression plus_plus : {')'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
star -> · '*' : {'&' '(' '*'}

#611
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 · continuing_compound_statement/0.2 brace_right : {'}'}
break_if_statement -> · 'break' 'if' expression semicolon : {'}'}
continuing_compound_statement/0.2 -> · break_if_statement : {'}'}

#612
continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 · : {'break' '}'}

#613
continuing_compound_statement/0.1/0 -> statement · continuing_compound_statement/0.1/0 : {'break' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
continuing_compound_statement/0.1/0 -> · statement continuing_compound_statement/0.1/0 : {'break' '}'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#614
case_selectors -> expression case_selectors/0.1 · case_selectors/0.2 : {':' '{'}
case_selectors/0.2 -> · comma : {':' '{'}
comma -> · ',' : {':' '{'}

#615
case_selectors/0.1 -> case_selectors/0.1/0 · : {',' ':' '{'}

#616
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 · case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0 -> · case_selectors/0.1/0/0.0 case_selectors/0.1/0 : {',' ':' '{'}
case_selectors/0.1/0/0.0 -> · comma expression : {',' ':' '{'}
comma -> · ',' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}

#617
case_selectors/0.1/0/0.0 -> comma · expression : {',' ':' '{'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' ',' '-' ':' '<' '<=' '==' '>' '>=' '{' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_or_expression or unary_expression : {',' ':' '{'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {',' ':' '{'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {',' ':' '{'}
expression -> · relational_expression : {',' ':' '{'}
expression -> · short_circuit_and_expression and_and relational_expression : {',' ':' '{'}
expression -> · short_circuit_or_expression or_or relational_expression : {',' ':' '{'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' ',' '-' '/' ':' '<' '<=' '==' '>' '>=' '{' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '.' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '{' '|' '||'}
relational_expression -> · shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ',' ':' '{' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ',' ':' '{' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ',' ':' '<' '<=' '==' '>' '>=' '{' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' ',' '-' '/' ':' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '{' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#618
switch_body -> 'case' case_selectors switch_body/0.2 · case_compound_statement : {'case' 'default' '}'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
case_compound_statement -> · brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}

#619
switch_body/0.2 -> colon · : {'{'}

#620
switch_body -> 'default' switch_body/1.1 case_compound_statement · : {'case' 'default' '}'}

#621
case_compound_statement -> brace_left · case_compound_statement/0.1 case_compound_statement/0.2 brace_right : {'case' 'default' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
case_compound_statement/0.1 -> · case_compound_statement/0.1/0 : {'fallthrough' '}'}
case_compound_statement/0.1/0 -> · statement case_compound_statement/0.1/0 : {'fallthrough' '}'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#622
attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end · : {'@' 'array' 'bool' 'f16' 'f32' 'fn' 'i32' 'override' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'u32' 'var' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#623
case_compound_statement -> brace_left case_compound_statement/0.1 · case_compound_statement/0.2 brace_right : {'case' 'default' '}'}
case_compound_statement/0.2 -> · fallthrough_statement : {'}'}
fallthrough_statement -> · 'fallthrough' semicolon : {'}'}

#624
case_compound_statement/0.1 -> case_compound_statement/0.1/0 · : {'fallthrough' '}'}

#625
case_compound_statement/0.1/0 -> statement · case_compound_statement/0.1/0 : {'fallthrough' '}'}
and -> · '&' : {'&' '(' '*'}
assignment_statement -> · lhs_expression assignment_statement/0.1 expression : {';'}
brace_left -> · '{' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
break_statement -> · 'break' : {';'}
case_compound_statement/0.1/0 -> · statement case_compound_statement/0.1/0 : {'fallthrough' '}'}
compound_statement -> · brace_left compound_statement/0.1 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
continue_statement -> · 'continue' : {';'}
decrement_statement -> · lhs_expression minus_minus : {';'}
for_statement -> · 'for' paren_left for_header paren_right compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
func_call_statement -> · ident argument_expression_list : {';'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'('}
if_statement -> · 'if' expression compound_statement if_statement/0.3 : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
increment_statement -> · lhs_expression plus_plus : {';'}
lhs_expression -> · lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 : {'%=' '&=' '*=' '++' '+=' '--' '-=' '/=' '<<=' '=' '>>=' '^=' '|='}
lhs_expression/0.0 -> · lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0 -> · lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 : {'('}
lhs_expression/0.0/0/0.0 -> · and : {'&' '(' '*'}
lhs_expression/0.0/0/0.0 -> · star : {'&' '(' '*'}
loop_statement -> · 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
return_statement -> · 'return' return_statement/0.1 : {';'}
semicolon -> · ';' : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
star -> · '*' : {'&' '(' '*'}
statement -> · 'discard' semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · assignment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · break_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · continue_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · decrement_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · for_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · func_call_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · if_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · increment_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · loop_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · return_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · static_assert_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · switch_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · variable_statement semicolon : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
statement -> · while_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
static_assert_statement -> · 'staticAssert' expression : {';'}
switch_statement -> · 'switch' expression brace_left switch_statement/0.3 brace_right : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}
variable_decl -> · 'var' variable_decl/0.1 variable_decl/0.2 : {';'}
variable_statement -> · 'const' variable_statement/3.1 equal expression : {';'}
variable_statement -> · 'let' variable_statement/2.1 equal expression : {';'}
variable_statement -> · variable_decl : {';'}
while_statement -> · 'while' expression compound_statement : {'&' '(' '*' ';' 'break' 'const' 'continue' 'discard' 'fallthrough' 'for' 'if' 'let' 'loop' 'return' 'staticAssert' 'switch' 'var' 'while' '{' '}' /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/}

#626
switch_body -> 'case' case_selectors switch_body/0.2 case_compound_statement · : {'case' 'default' '}'}

#627
case_selectors/0.1/0/0.0 -> comma expression · : {',' ':' '{'}

#628
case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 · : {',' ':' '{'}

#629
case_selectors -> expression case_selectors/0.1 case_selectors/0.2 · : {':' '{'}

#630
case_selectors/0.2 -> comma · : {':' '{'}

#631
continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 · : {'break' '}'}

#632
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 · brace_right : {'}'}
brace_right -> · '}' : {'}'}

#633
continuing_compound_statement/0.2 -> break_if_statement · : {'}'}

#634
break_if_statement -> 'break' · 'if' expression semicolon : {'}'}

#635
for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 · : {')'}

#636
for_header/0.4 -> for_update · : {')'}

#637
for_update -> increment_statement · : {')'}

#638
for_update -> decrement_statement · : {')'}

#639
for_update -> assignment_statement · : {')'}

#640
for_update -> func_call_statement · : {')'}

#641
break_if_statement -> 'break' 'if' · expression semicolon : {'}'}
additive_expression -> · additive_expression minus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · additive_expression plus multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
additive_expression -> · multiplicative_expression : {'!=' '&&' '+' '-' ';' '<' '<=' '==' '>' '>=' '||'}
and -> · '&' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
array_type_decl -> · 'array' less_than type_decl array_type_decl/0.3 greater_than : {'('}
bang -> · '!' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
binary_and_expression -> · binary_and_expression and unary_expression : {'&'}
binary_and_expression -> · unary_expression : {'&'}
binary_or_expression -> · binary_or_expression or unary_expression : {'|'}
binary_or_expression -> · unary_expression : {'|'}
binary_xor_expression -> · binary_xor_expression xor unary_expression : {'^'}
binary_xor_expression -> · unary_expression : {'^'}
bitwise_expression -> · binary_and_expression and unary_expression : {';'}
bitwise_expression -> · binary_or_expression or unary_expression : {';'}
bitwise_expression -> · binary_xor_expression xor unary_expression : {';'}
bool_literal -> · 'false' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
bool_literal -> · 'true' : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
callable -> · ident : {'('}
callable -> · mat_prefix : {'('}
callable -> · type_decl_without_ident : {'('}
callable -> · vec_prefix : {'('}
const_literal -> · bool_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
const_literal -> · int_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /0[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+[eE][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
decimal_float_literal -> · /[1-9][0-9]*[fh]/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
depth_texture_type -> · 'texture_depth_2d' : {'('}
depth_texture_type -> · 'texture_depth_2d_array' : {'('}
depth_texture_type -> · 'texture_depth_cube' : {'('}
depth_texture_type -> · 'texture_depth_cube_array' : {'('}
depth_texture_type -> · 'texture_depth_multisampled_2d' : {'('}
expression -> · bitwise_expression : {';'}
expression -> · relational_expression : {';'}
expression -> · short_circuit_and_expression and_and relational_expression : {';'}
expression -> · short_circuit_or_expression or_or relational_expression : {';'}
float16 -> · 'f16' : {'('}
float32 -> · 'f32' : {'('}
float_literal -> · decimal_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
float_literal -> · hex_float_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
hex_float_literal -> · /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
ident -> · /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ : {'!=' '%' '&&' '&' '(' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int32 -> · 'i32' : {'('}
int_literal -> · /0[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /0[xX][0-9a-fA-F]+[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
int_literal -> · /[1-9][0-9]*[iu]?/ : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
mat_prefix -> · 'mat2x2' : {'('}
mat_prefix -> · 'mat2x3' : {'('}
mat_prefix -> · 'mat2x4' : {'('}
mat_prefix -> · 'mat3x2' : {'('}
mat_prefix -> · 'mat3x3' : {'('}
mat_prefix -> · 'mat3x4' : {'('}
mat_prefix -> · 'mat4x2' : {'('}
mat_prefix -> · 'mat4x3' : {'('}
mat_prefix -> · 'mat4x4' : {'('}
minus -> · '-' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
multiplicative_expression -> · multiplicative_expression forward_slash unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression modulo unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · multiplicative_expression star unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multiplicative_expression -> · unary_expression : {'!=' '%' '&&' '*' '+' '-' '/' ';' '<' '<=' '==' '>' '>=' '||'}
multisampled_texture_type -> · 'texture_multisampled_2d' : {'<'}
paren_expression -> · paren_left expression paren_right : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
paren_left -> · '(' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
pointer -> · 'ptr' : {'<'}
primary_expression -> · 'bitcast' less_than type_decl greater_than paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · callable argument_expression_list : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · const_literal : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · ident : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
primary_expression -> · paren_expression : {'!=' '%' '&&' '&' '*' '+' '-' '.' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '[' '^' '|' '||'}
relational_expression -> · shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression equal_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression greater_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression less_than_equal shift_expression : {'&&' ';' '||'}
relational_expression -> · shift_expression not_equal shift_expression : {'&&' ';' '||'}
sampled_texture_type -> · 'texture_1d' : {'<'}
sampled_texture_type -> · 'texture_2d' : {'<'}
sampled_texture_type -> · 'texture_2d_array' : {'<'}
sampled_texture_type -> · 'texture_3d' : {'<'}
sampled_texture_type -> · 'texture_cube' : {'<'}
sampled_texture_type -> · 'texture_cube_array' : {'<'}
sampler_type -> · 'sampler' : {'('}
sampler_type -> · 'sampler_comparison' : {'('}
shift_expression -> · additive_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_left unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
shift_expression -> · unary_expression shift_right unary_expression : {'!=' '&&' ';' '<' '<=' '==' '>' '>=' '||'}
short_circuit_and_expression -> · relational_expression : {'&&'}
short_circuit_and_expression -> · short_circuit_and_expression and_and relational_expression : {'&&'}
short_circuit_or_expression -> · relational_expression : {'||'}
short_circuit_or_expression -> · short_circuit_or_expression or_or relational_expression : {'||'}
singular_expression -> · primary_expression singular_expression/0.1 : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
star -> · '*' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
storage_texture_type -> · 'texture_storage_1d' : {'<'}
storage_texture_type -> · 'texture_storage_2d' : {'<'}
storage_texture_type -> · 'texture_storage_2d_array' : {'<'}
storage_texture_type -> · 'texture_storage_3d' : {'<'}
texture_sampler_types -> · depth_texture_type : {'('}
texture_sampler_types -> · multisampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampled_texture_type less_than type_decl greater_than : {'('}
texture_sampler_types -> · sampler_type : {'('}
texture_sampler_types -> · storage_texture_type less_than texel_format comma access_mode greater_than : {'('}
tilde -> · '~' : {'!' '&' '(' '*' '-' 'array' 'bitcast' 'bool' 'f16' 'f32' 'false' 'i32' 'mat2x2' 'mat2x3' 'mat2x4' 'mat3x2' 'mat3x3' 'mat3x4' 'mat4x2' 'mat4x3' 'mat4x4' 'ptr' 'sampler' 'sampler_comparison' 'texture_1d' 'texture_2d' 'texture_2d_array' 'texture_3d' 'texture_cube' 'texture_cube_array' 'texture_depth_2d' 'texture_depth_2d_array' 'texture_depth_cube' 'texture_depth_cube_array' 'texture_depth_multisampled_2d' 'texture_multisampled_2d' 'texture_storage_1d' 'texture_storage_2d' 'texture_storage_2d_array' 'texture_storage_3d' 'true' 'u32' 'vec2' 'vec3' 'vec4' '~'}
type_decl_without_ident -> · 'bool' : {'('}
type_decl_without_ident -> · array_type_decl : {'('}
type_decl_without_ident -> · float16 : {'('}
type_decl_without_ident -> · float32 : {'('}
type_decl_without_ident -> · int32 : {'('}
type_decl_without_ident -> · pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than : {'('}
type_decl_without_ident -> · texture_sampler_types : {'('}
type_decl_without_ident -> · uint32 : {'('}
uint32 -> · 'u32' : {'('}
unary_expression -> · and unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · bang unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · minus unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · singular_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · star unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
unary_expression -> · tilde unary_expression : {'!=' '%' '&&' '&' '*' '+' '-' '/' ';' '<' '<<' '<=' '==' '>' '>=' '>>' '^' '|' '||'}
vec_prefix -> · 'vec2' : {'('}
vec_prefix -> · 'vec3' : {'('}
vec_prefix -> · 'vec4' : {'('}

#642
continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right · : {'}'}

#643
case_compound_statement/0.1/0 -> statement case_compound_statement/0.1/0 · : {'fallthrough' '}'}

#644
case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 · brace_right : {'case' 'default' '}'}
brace_right -> · '}' : {'case' 'default' '}'}

#645
case_compound_statement/0.2 -> fallthrough_statement · : {'}'}

#646
fallthrough_statement -> 'fallthrough' · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#647
fallthrough_statement -> 'fallthrough' semicolon · : {'}'}

#648
case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right · : {'case' 'default' '}'}

#649
break_if_statement -> 'break' 'if' expression · semicolon : {'}'}
semicolon -> · ';' : {'}'}

#650
break_if_statement -> 'break' 'if' expression semicolon · : {'}'}


=Reductions:
r#0 translation_unit/0.0 -> translation_unit/0.0/0 ·
r#1 extension_name -> 'f16' ·
r#2 translation_unit/0.0/0 -> global_directive translation_unit/0.0/0 ·
r#3 translation_unit -> translation_unit/0.0 translation_unit/0.1 ·
r#4 translation_unit/0.1 -> translation_unit/0.1/0 ·
r#5 global_decl -> semicolon ·
r#6 global_decl -> struct_decl ·
r#7 global_decl -> function_decl ·
r#8 semicolon -> ';' ·
r#9 global_variable_decl/0.0 -> global_variable_decl/0.0/0 ·
r#10 global_constant_decl/1.0 -> global_constant_decl/1.0/0 ·
r#11 function_decl/0.0 -> function_decl/0.0/0 ·
r#12 attr -> '@' ·
r#13 attribute -> attr 'const' ·
r#14 attribute -> attr 'invariant' ·
r#15 attribute -> attr 'vertex' ·
r#16 attribute -> attr 'fragment' ·
r#17 attribute -> attr 'compute' ·
r#18 global_variable_decl/0.0/0 -> attribute global_variable_decl/0.0/0 ·
r#19 global_constant_decl/1.0/0 -> attribute global_constant_decl/1.0/0 ·
r#20 function_decl/0.0/0 -> attribute function_decl/0.0/0 ·
r#21 static_assert_statement -> 'staticAssert' expression ·
r#22 expression -> relational_expression ·
r#23 short_circuit_or_expression -> relational_expression ·
r#24 short_circuit_and_expression -> relational_expression ·
r#25 expression -> bitwise_expression ·
r#26 relational_expression -> shift_expression ·
r#27 shift_expression -> additive_expression ·
r#28 binary_and_expression -> unary_expression ·
r#29 binary_or_expression -> unary_expression ·
r#30 binary_xor_expression -> unary_expression ·
r#31 multiplicative_expression -> unary_expression ·
r#32 additive_expression -> multiplicative_expression ·
r#33 unary_expression -> singular_expression ·
r#34 minus -> '-' ·
r#35 bang -> '!' ·
r#36 tilde -> '~' ·
r#37 star -> '*' ·
r#38 and -> '&' ·
r#39 primary_expression -> ident ·
r#40 callable -> ident ·
r#41 primary_expression -> const_literal ·
r#42 primary_expression -> paren_expression ·
r#43 ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#44 callable -> type_decl_without_ident ·
r#45 callable -> vec_prefix ·
r#46 callable -> mat_prefix ·
r#47 const_literal -> int_literal ·
r#48 const_literal -> float_literal ·
r#49 const_literal -> bool_literal ·
r#50 type_decl_without_ident -> 'bool' ·
r#51 type_decl_without_ident -> float32 ·
r#52 type_decl_without_ident -> float16 ·
r#53 type_decl_without_ident -> int32 ·
r#54 type_decl_without_ident -> uint32 ·
r#55 type_decl_without_ident -> array_type_decl ·
r#56 type_decl_without_ident -> texture_sampler_types ·
r#57 vec_prefix -> 'vec2' ·
r#58 vec_prefix -> 'vec3' ·
r#59 vec_prefix -> 'vec4' ·
r#60 mat_prefix -> 'mat2x2' ·
r#61 mat_prefix -> 'mat2x3' ·
r#62 mat_prefix -> 'mat2x4' ·
r#63 mat_prefix -> 'mat3x2' ·
r#64 mat_prefix -> 'mat3x3' ·
r#65 mat_prefix -> 'mat3x4' ·
r#66 mat_prefix -> 'mat4x2' ·
r#67 mat_prefix -> 'mat4x3' ·
r#68 mat_prefix -> 'mat4x4' ·
r#69 int_literal -> /0[xX][0-9a-fA-F]+[iu]?/ ·
r#70 int_literal -> /0[iu]?/ ·
r#71 int_literal -> /[1-9][0-9]*[iu]?/ ·
r#72 float_literal -> decimal_float_literal ·
r#73 float_literal -> hex_float_literal ·
r#74 bool_literal -> 'true' ·
r#75 bool_literal -> 'false' ·
r#76 paren_left -> '(' ·
r#77 float32 -> 'f32' ·
r#78 float16 -> 'f16' ·
r#79 int32 -> 'i32' ·
r#80 uint32 -> 'u32' ·
r#81 pointer -> 'ptr' ·
r#82 texture_sampler_types -> sampler_type ·
r#83 texture_sampler_types -> depth_texture_type ·
r#84 decimal_float_literal -> /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/ ·
r#85 decimal_float_literal -> /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/ ·
r#86 decimal_float_literal -> /[0-9]+[eE][+-]?[0-9]+[fh]?/ ·
r#87 decimal_float_literal -> /0[fh]/ ·
r#88 decimal_float_literal -> /[1-9][0-9]*[fh]/ ·
r#89 hex_float_literal -> /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/ ·
r#90 hex_float_literal -> /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/ ·
r#91 hex_float_literal -> /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/ ·
r#92 sampler_type -> 'sampler' ·
r#93 sampler_type -> 'sampler_comparison' ·
r#94 depth_texture_type -> 'texture_depth_2d' ·
r#95 depth_texture_type -> 'texture_depth_2d_array' ·
r#96 depth_texture_type -> 'texture_depth_cube' ·
r#97 depth_texture_type -> 'texture_depth_cube_array' ·
r#98 depth_texture_type -> 'texture_depth_multisampled_2d' ·
r#99 sampled_texture_type -> 'texture_1d' ·
r#100 sampled_texture_type -> 'texture_2d' ·
r#101 sampled_texture_type -> 'texture_2d_array' ·
r#102 sampled_texture_type -> 'texture_3d' ·
r#103 sampled_texture_type -> 'texture_cube' ·
r#104 sampled_texture_type -> 'texture_cube_array' ·
r#105 multisampled_texture_type -> 'texture_multisampled_2d' ·
r#106 storage_texture_type -> 'texture_storage_1d' ·
r#107 storage_texture_type -> 'texture_storage_2d' ·
r#108 storage_texture_type -> 'texture_storage_2d_array' ·
r#109 storage_texture_type -> 'texture_storage_3d' ·
r#110 global_constant_decl/0.1 -> ident ·
r#111 global_constant_decl/0.1 -> variable_ident_decl ·
r#112 global_decl -> static_assert_statement semicolon ·
r#113 global_decl -> type_alias_decl semicolon ·
r#114 global_decl -> global_constant_decl semicolon ·
r#115 global_decl -> global_variable_decl semicolon ·
r#116 translation_unit/0.1/0 -> global_decl translation_unit/0.1/0 ·
r#117 global_directive -> 'enable' extension_name semicolon ·
r#118 variable_decl/0.1 -> variable_qualifier ·
r#119 less_than -> '<' ·
r#120 global_variable_decl -> global_variable_decl/0.0 variable_decl global_variable_decl/0.2 ·
r#121 equal -> '=' ·
r#122 colon -> ':' ·
r#123 global_constant_decl/1.2 -> ident ·
r#124 global_constant_decl/1.2 -> variable_ident_decl ·
r#125 struct_decl -> 'struct' ident struct_body_decl ·
r#126 brace_left -> '{' ·
r#127 function_decl -> function_decl/0.0 function_header compound_statement ·
r#128 primary_expression -> callable argument_expression_list ·
r#129 singular_expression -> primary_expression singular_expression/0.1 ·
r#130 singular_expression/0.1 -> postfix_expression ·
r#131 bracket_left -> '[' ·
r#132 unary_expression -> and unary_expression ·
r#133 unary_expression -> star unary_expression ·
r#134 unary_expression -> tilde unary_expression ·
r#135 unary_expression -> bang unary_expression ·
r#136 unary_expression -> minus unary_expression ·
r#137 forward_slash -> '/' ·
r#138 modulo -> '%' ·
r#139 shift_left -> '<<' ·
r#140 shift_right -> '>>' ·
r#141 plus -> '+' ·
r#142 xor -> '^' ·
r#143 or -> '|' ·
r#144 greater_than -> '>' ·
r#145 less_than_equal -> '<=' ·
r#146 greater_than_equal -> '>=' ·
r#147 equal_equal -> '==' ·
r#148 not_equal -> '!=' ·
r#149 and_and -> '&&' ·
r#150 or_or -> '||' ·
r#151 builtin_value_name -> 'vertex_index' ·
r#152 builtin_value_name -> 'instance_index' ·
r#153 builtin_value_name -> 'position' ·
r#154 builtin_value_name -> 'front_facing' ·
r#155 builtin_value_name -> 'frag_depth' ·
r#156 builtin_value_name -> 'local_invocation_id' ·
r#157 builtin_value_name -> 'local_invocation_index' ·
r#158 builtin_value_name -> 'global_invocation_id' ·
r#159 builtin_value_name -> 'workgroup_id' ·
r#160 builtin_value_name -> 'num_workgroups' ·
r#161 builtin_value_name -> 'sample_index' ·
r#162 builtin_value_name -> 'sample_mask' ·
r#163 interpolation_type_name -> 'perspective' ·
r#164 interpolation_type_name -> 'linear' ·
r#165 interpolation_type_name -> 'flat' ·
r#166 ident_or_int_literal -> int_literal ·
r#167 ident_or_int_literal -> ident ·
r#168 expression -> short_circuit_or_expression or_or relational_expression ·
r#169 short_circuit_or_expression -> short_circuit_or_expression or_or relational_expression ·
r#170 expression -> short_circuit_and_expression and_and relational_expression ·
r#171 short_circuit_and_expression -> short_circuit_and_expression and_and relational_expression ·
r#172 relational_expression -> shift_expression not_equal shift_expression ·
r#173 relational_expression -> shift_expression equal_equal shift_expression ·
r#174 relational_expression -> shift_expression greater_than_equal shift_expression ·
r#175 relational_expression -> shift_expression less_than_equal shift_expression ·
r#176 relational_expression -> shift_expression greater_than shift_expression ·
r#177 relational_expression -> shift_expression less_than shift_expression ·
r#178 bitwise_expression -> binary_and_expression and unary_expression ·
r#179 binary_and_expression -> binary_and_expression and unary_expression ·
r#180 bitwise_expression -> binary_or_expression or unary_expression ·
r#181 binary_or_expression -> binary_or_expression or unary_expression ·
r#182 bitwise_expression -> binary_xor_expression xor unary_expression ·
r#183 binary_xor_expression -> binary_xor_expression xor unary_expression ·
r#184 additive_expression -> additive_expression minus multiplicative_expression ·
r#185 additive_expression -> additive_expression plus multiplicative_expression ·
r#186 shift_expression -> unary_expression shift_right unary_expression ·
r#187 shift_expression -> unary_expression shift_left unary_expression ·
r#188 multiplicative_expression -> multiplicative_expression modulo unary_expression ·
r#189 multiplicative_expression -> multiplicative_expression forward_slash unary_expression ·
r#190 multiplicative_expression -> multiplicative_expression star unary_expression ·
r#191 member_ident -> /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/ ·
r#192 swizzle_name -> '/[rgba]/' ·
r#193 swizzle_name -> '/[rgba][rgba]/' ·
r#194 swizzle_name -> '/[rgba][rgba][rgba]/' ·
r#195 swizzle_name -> '/[rgba][rgba][rgba][rgba]/' ·
r#196 swizzle_name -> '/[xyzw]/' ·
r#197 swizzle_name -> '/[xyzw][xyzw]/' ·
r#198 swizzle_name -> '/[xyzw][xyzw][xyzw]/' ·
r#199 swizzle_name -> '/[xyzw][xyzw][xyzw][xyzw]/' ·
r#200 argument_expression_list/0.1/0.0 -> argument_expression_list/0.1/0.0/0 ·
r#201 type_decl -> ident ·
r#202 type_decl -> type_decl_without_ident ·
r#203 paren_expression -> paren_left expression paren_right ·
r#204 paren_right -> ')' ·
r#205 address_space -> 'function' ·
r#206 address_space -> 'private' ·
r#207 address_space -> 'workgroup' ·
r#208 address_space -> 'uniform' ·
r#209 address_space -> 'storage' ·
r#210 texel_format -> 'rgba8unorm' ·
r#211 texel_format -> 'rgba8snorm' ·
r#212 texel_format -> 'rgba8uint' ·
r#213 texel_format -> 'rgba8sint' ·
r#214 texel_format -> 'rgba16uint' ·
r#215 texel_format -> 'rgba16sint' ·
r#216 texel_format -> 'rgba16float' ·
r#217 texel_format -> 'r32uint' ·
r#218 texel_format -> 'r32sint' ·
r#219 texel_format -> 'r32float' ·
r#220 texel_format -> 'rg32uint' ·
r#221 texel_format -> 'rg32sint' ·
r#222 texel_format -> 'rg32float' ·
r#223 texel_format -> 'rgba32uint' ·
r#224 texel_format -> 'rgba32sint' ·
r#225 texel_format -> 'rgba32float' ·
r#226 compound_statement/0.1 -> compound_statement/0.1/0 ·
r#227 statement -> semicolon ·
r#228 statement -> if_statement ·
r#229 statement -> switch_statement ·
r#230 statement -> loop_statement ·
r#231 statement -> for_statement ·
r#232 statement -> while_statement ·
r#233 statement -> compound_statement ·
r#234 variable_statement -> variable_decl ·
r#235 break_statement -> 'break' ·
r#236 continue_statement -> 'continue' ·
r#237 lhs_expression/0.0 -> lhs_expression/0.0/0 ·
r#238 lhs_expression/0.0/0/0.0 -> star ·
r#239 lhs_expression/0.0/0/0.0 -> and ·
r#240 struct_body_decl/0.1 -> struct_body_decl/0.1/0 ·
r#241 type_alias_decl -> 'type' ident equal type_decl ·
r#242 global_constant_decl -> global_constant_decl/1.0 'override' global_constant_decl/1.2 global_constant_decl/1.3 ·
r#243 global_constant_decl -> 'const' global_constant_decl/0.1 equal expression ·
r#244 variable_ident_decl -> ident colon type_decl ·
r#245 global_variable_decl/0.2 -> equal expression ·
r#246 variable_decl -> 'var' variable_decl/0.1 variable_decl/0.2 ·
r#247 variable_decl/0.2 -> ident ·
r#248 variable_decl/0.2 -> variable_ident_decl ·
r#249 comma -> ',' ·
r#250 global_constant_decl/1.3 -> equal expression ·
r#251 struct_body_decl/0.1/0/0.0 -> struct_member comma ·
r#252 struct_body_decl/0.1/0 -> struct_body_decl/0.1/0/0.0 struct_body_decl/0.1/0 ·
r#253 function_header/0.3 -> param_list ·
r#254 param_list/0.0 -> param_list/0.0/0 ·
r#255 param/0.0 -> param/0.0/0 ·
r#256 lhs_expression/0.0/0 -> lhs_expression/0.0/0/0.0 lhs_expression/0.0/0 ·
r#257 core_lhs_expression -> ident ·
r#258 increment_statement -> lhs_expression plus_plus ·
r#259 decrement_statement -> lhs_expression minus_minus ·
r#260 assignment_statement/0.1 -> equal ·
r#261 assignment_statement/0.1 -> compound_assignment_operator ·
r#262 plus_plus -> '++' ·
r#263 minus_minus -> '--' ·
r#264 compound_assignment_operator -> plus_equal ·
r#265 compound_assignment_operator -> minus_equal ·
r#266 compound_assignment_operator -> times_equal ·
r#267 compound_assignment_operator -> division_equal ·
r#268 compound_assignment_operator -> modulo_equal ·
r#269 compound_assignment_operator -> and_equal ·
r#270 compound_assignment_operator -> or_equal ·
r#271 compound_assignment_operator -> xor_equal ·
r#272 compound_assignment_operator -> shift_right_equal ·
r#273 compound_assignment_operator -> shift_left_equal ·
r#274 plus_equal -> '+=' ·
r#275 minus_equal -> '-=' ·
r#276 times_equal -> '*=' ·
r#277 division_equal -> '/=' ·
r#278 modulo_equal -> '%=' ·
r#279 and_equal -> '&=' ·
r#280 or_equal -> '|=' ·
r#281 xor_equal -> '^=' ·
r#282 shift_right_equal -> '>>=' ·
r#283 shift_left_equal -> '<<=' ·
r#284 variable_statement/3.1 -> ident ·
r#285 variable_statement/3.1 -> variable_ident_decl ·
r#286 variable_statement/2.1 -> ident ·
r#287 variable_statement/2.1 -> variable_ident_decl ·
r#288 func_call_statement -> ident argument_expression_list ·
r#289 return_statement -> 'return' return_statement/0.1 ·
r#290 return_statement/0.1 -> expression ·
r#291 statement -> static_assert_statement semicolon ·
r#292 statement -> decrement_statement semicolon ·
r#293 statement -> increment_statement semicolon ·
r#294 statement -> assignment_statement semicolon ·
r#295 statement -> 'discard' semicolon ·
r#296 statement -> continue_statement semicolon ·
r#297 statement -> break_statement semicolon ·
r#298 statement -> variable_statement semicolon ·
r#299 statement -> func_call_statement semicolon ·
r#300 statement -> return_statement semicolon ·
r#301 compound_statement/0.1/0 -> statement compound_statement/0.1/0 ·
r#302 compound_statement -> brace_left compound_statement/0.1 brace_right ·
r#303 brace_right -> '}' ·
r#304 texture_sampler_types -> multisampled_texture_type less_than type_decl greater_than ·
r#305 texture_sampler_types -> sampled_texture_type less_than type_decl greater_than ·
r#306 argument_expression_list/0.1/0.0/0/0.0 -> expression comma ·
r#307 argument_expression_list/0.1/0.0/0 -> argument_expression_list/0.1/0.0/0/0.0 argument_expression_list/0.1/0.0/0 ·
r#308 argument_expression_list -> paren_left argument_expression_list/0.1 paren_right ·
r#309 bracket_right -> ']' ·
r#310 postfix_expression -> period swizzle_name postfix_expression/2.2 ·
r#311 postfix_expression/2.2 -> postfix_expression ·
r#312 postfix_expression -> period member_ident postfix_expression/1.2 ·
r#313 postfix_expression/1.2 -> postfix_expression ·
r#314 attribute -> attr 'workgroup_size' paren_left ident_or_int_literal attrib_end ·
r#315 attrib_end/0.0 -> comma ·
r#316 attribute -> attr 'size' paren_left int_literal attrib_end ·
r#317 attribute -> attr 'location' paren_left int_literal attrib_end ·
r#318 attribute -> attr 'interpolate' paren_left interpolation_type_name attrib_end ·
r#319 attribute -> attr 'id' paren_left int_literal attrib_end ·
r#320 attribute -> attr 'group' paren_left int_literal attrib_end ·
r#321 attribute -> attr 'builtin' paren_left builtin_value_name attrib_end ·
r#322 attribute -> attr 'binding' paren_left int_literal attrib_end ·
r#323 attribute -> attr 'align' paren_left int_literal attrib_end ·
r#324 interpolation_sample_name -> 'center' ·
r#325 interpolation_sample_name -> 'centroid' ·
r#326 interpolation_sample_name -> 'sample' ·
r#327 attrib_end -> attrib_end/0.0 paren_right ·
r#328 postfix_expression -> bracket_left expression bracket_right postfix_expression/0.3 ·
r#329 postfix_expression/0.3 -> postfix_expression ·
r#330 argument_expression_list/0.1 -> argument_expression_list/0.1/0.0 expression argument_expression_list/0.1/0.2 ·
r#331 argument_expression_list/0.1/0.2 -> comma ·
r#332 primary_expression -> 'bitcast' less_than type_decl greater_than paren_expression ·
r#333 array_type_decl/0.3 -> comma element_count_expression ·
r#334 element_count_expression -> additive_expression ·
r#335 element_count_expression -> bitwise_expression ·
r#336 array_type_decl -> 'array' less_than type_decl array_type_decl/0.3 greater_than ·
r#337 access_mode -> 'read' ·
r#338 access_mode -> 'write' ·
r#339 access_mode -> 'read_write' ·
r#340 loop_statement/0.2 -> loop_statement/0.2/0 ·
r#341 for_header/0.0 -> for_init ·
r#342 for_init -> variable_statement ·
r#343 for_init -> increment_statement ·
r#344 for_init -> decrement_statement ·
r#345 for_init -> assignment_statement ·
r#346 for_init -> func_call_statement ·
r#347 while_statement -> 'while' expression compound_statement ·
r#348 assignment_statement -> lhs_expression assignment_statement/0.1 expression ·
r#349 lhs_expression -> lhs_expression/0.0 core_lhs_expression lhs_expression/0.2 ·
r#350 lhs_expression/0.2 -> postfix_expression ·
r#351 param/0.0/0 -> attribute param/0.0/0 ·
r#352 param -> param/0.0 variable_ident_decl ·
r#353 param_list/0.0/0/0.0 -> param comma ·
r#354 param_list/0.0/0 -> param_list/0.0/0/0.0 param_list/0.0/0 ·
r#355 struct_body_decl/0.3 -> comma ·
r#356 variable_qualifier/0.2 -> comma access_mode ·
r#357 variable_qualifier -> less_than address_space variable_qualifier/0.2 greater_than ·
r#358 struct_member -> struct_member/0.0 member_ident colon type_decl ·
r#359 struct_body_decl -> brace_left struct_body_decl/0.1 struct_member struct_body_decl/0.3 brace_right ·
r#360 function_header -> 'fn' ident paren_left function_header/0.3 paren_right function_header/0.5 ·
r#361 arrow -> '->' ·
r#362 param_list -> param_list/0.0 param param_list/0.2 ·
r#363 param_list/0.2 -> comma ·
r#364 core_lhs_expression -> paren_left lhs_expression paren_right ·
r#365 variable_statement -> 'const' variable_statement/3.1 equal expression ·
r#366 variable_statement -> 'let' variable_statement/2.1 equal expression ·
r#367 loop_statement/0.2/0 -> statement loop_statement/0.2/0 ·
r#368 loop_statement/0.3 -> continuing_statement ·
r#369 switch_statement/0.3 -> switch_statement/0.3/0 ·
r#370 if_statement -> 'if' expression compound_statement if_statement/0.3 ·
r#371 texture_sampler_types -> storage_texture_type less_than texel_format comma access_mode greater_than ·
r#372 attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal attrib_end ·
r#373 attribute -> attr 'interpolate' paren_left interpolation_type_name comma interpolation_sample_name attrib_end ·
r#374 type_decl_without_ident/7.5 -> comma access_mode ·
r#375 type_decl_without_ident -> pointer less_than address_space comma type_decl type_decl_without_ident/7.5 greater_than ·
r#376 if_statement/0.3 -> 'else' else_statement ·
r#377 else_statement -> compound_statement ·
r#378 else_statement -> if_statement ·
r#379 switch_body/1.1 -> colon ·
r#380 switch_statement/0.3/0 -> switch_body switch_statement/0.3/0 ·
r#381 switch_statement -> 'switch' expression brace_left switch_statement/0.3 brace_right ·
r#382 continuing_statement -> 'continuing' continuing_compound_statement ·
r#383 loop_statement -> 'loop' brace_left loop_statement/0.2 loop_statement/0.3 brace_right ·
r#384 for_statement -> 'for' paren_left for_header paren_right compound_statement ·
r#385 for_header/0.2 -> expression ·
r#386 function_header/0.5/0.1 -> function_header/0.5/0.1/0 ·
r#387 function_header/0.5/0.1/0 -> attribute function_header/0.5/0.1/0 ·
r#388 function_header/0.5 -> arrow function_header/0.5/0.1 type_decl ·
r#389 continuing_compound_statement/0.1 -> continuing_compound_statement/0.1/0 ·
r#390 case_selectors/0.1 -> case_selectors/0.1/0 ·
r#391 switch_body/0.2 -> colon ·
r#392 switch_body -> 'default' switch_body/1.1 case_compound_statement ·
r#393 attribute -> attr 'workgroup_size' paren_left ident_or_int_literal comma ident_or_int_literal comma ident_or_int_literal attrib_end ·
r#394 case_compound_statement/0.1 -> case_compound_statement/0.1/0 ·
r#395 switch_body -> 'case' case_selectors switch_body/0.2 case_compound_statement ·
r#396 case_selectors/0.1/0/0.0 -> comma expression ·
r#397 case_selectors/0.1/0 -> case_selectors/0.1/0/0.0 case_selectors/0.1/0 ·
r#398 case_selectors -> expression case_selectors/0.1 case_selectors/0.2 ·
r#399 case_selectors/0.2 -> comma ·
r#400 continuing_compound_statement/0.1/0 -> statement continuing_compound_statement/0.1/0 ·
r#401 continuing_compound_statement/0.2 -> break_if_statement ·
r#402 for_header -> for_header/0.0 semicolon for_header/0.2 semicolon for_header/0.4 ·
r#403 for_header/0.4 -> for_update ·
r#404 for_update -> increment_statement ·
r#405 for_update -> decrement_statement ·
r#406 for_update -> assignment_statement ·
r#407 for_update -> func_call_statement ·
r#408 continuing_compound_statement -> brace_left continuing_compound_statement/0.1 continuing_compound_statement/0.2 brace_right ·
r#409 case_compound_statement/0.1/0 -> statement case_compound_statement/0.1/0 ·
r#410 case_compound_statement/0.2 -> fallthrough_statement ·
r#411 fallthrough_statement -> 'fallthrough' semicolon ·
r#412 case_compound_statement -> brace_left case_compound_statement/0.1 case_compound_statement/0.2 brace_right ·
r#413 break_if_statement -> 'break' 'if' expression semicolon ·

=Action:
[#0 'enable']: s#5
[#1 EndOfText]: acc
[#2 ';']: s#19
[#2 '@']: s#32
[#2 'const']: s#21
[#2 'staticAssert']: s#26
[#2 'struct']: s#24
[#2 'type']: s#23
[#3 ';']: r#0
[#3 '@']: r#0
[#3 'const']: r#0
[#3 'fn']: r#0
[#3 'override']: r#0
[#3 'staticAssert']: r#0
[#3 'struct']: r#0
[#3 'type']: r#0
[#3 'var']: r#0
[#3 EndOfText]: r#0
[#4 'enable']: s#5
[#5 'f16']: s#7
[#6 ';']: s#19
[#7 ';']: r#1
[#8 ';']: r#2
[#8 '@']: r#2
[#8 'const']: r#2
[#8 'fn']: r#2
[#8 'override']: r#2
[#8 'staticAssert']: r#2
[#8 'struct']: r#2
[#8 'type']: r#2
[#8 'var']: r#2
[#8 EndOfText]: r#2
[#9 EndOfText]: r#3
[#10 EndOfText]: r#4
[#11 ';']: s#19
[#11 '@']: s#32
[#11 'const']: s#21
[#11 'staticAssert']: s#26
[#11 'struct']: s#24
[#11 'type']: s#23
[#12 ';']: r#5
[#12 '@']: r#5
[#12 'const']: r#5
[#12 'fn']: r#5
[#12 'override']: r#5
[#12 'staticAssert']: r#5
[#12 'struct']: r#5
[#12 'type']: r#5
[#12 'var']: r#5
[#12 EndOfText]: r#5
[#13 ';']: s#19
[#14 ';']: s#19
[#15 ';']: s#19
[#16 ';']: r#6
[#16 '@']: r#6
[#16 'const']: r#6
[#16 'fn']: r#6
[#16 'override']: r#6
[#16 'staticAssert']: r#6
[#16 'struct']: r#6
[#16 'type']: r#6
[#16 'var']: r#6
[#16 EndOfText]: r#6
[#17 ';']: r#7
[#17 '@']: r#7
[#17 'const']: r#7
[#17 'fn']: r#7
[#17 'override']: r#7
[#17 'staticAssert']: r#7
[#17 'struct']: r#7
[#17 'type']: r#7
[#17 'var']: r#7
[#17 EndOfText]: r#7
[#18 ';']: s#19
[#19 '!']: r#8
[#19 '&']: r#8
[#19 '(']: r#8
[#19 ')']: r#8
[#19 '*']: r#8
[#19 '-']: r#8
[#19 ';']: r#8
[#19 '@']: r#8
[#19 'array']: r#8
[#19 'bitcast']: r#8
[#19 'bool']: r#8
[#19 'break']: r#8
[#19 'const']: r#8
[#19 'continue']: r#8
[#19 'continuing']: r#8
[#19 'discard']: r#8
[#19 'enable']: r#8
[#19 'f16']: r#8
[#19 'f32']: r#8
[#19 'fallthrough']: r#8
[#19 'false']: r#8
[#19 'fn']: r#8
[#19 'for']: r#8
[#19 'i32']: r#8
[#19 'if']: r#8
[#19 'let']: r#8
[#19 'loop']: r#8
[#19 'mat2x2']: r#8
[#19 'mat2x3']: r#8
[#19 'mat2x4']: r#8
[#19 'mat3x2']: r#8
[#19 'mat3x3']: r#8
[#19 'mat3x4']: r#8
[#19 'mat4x2']: r#8
[#19 'mat4x3']: r#8
[#19 'mat4x4']: r#8
[#19 'override']: r#8
[#19 'ptr']: r#8
[#19 'return']: r#8
[#19 'sampler']: r#8
[#19 'sampler_comparison']: r#8
[#19 'staticAssert']: r#8
[#19 'struct']: r#8
[#19 'switch']: r#8
[#19 'texture_1d']: r#8
[#19 'texture_2d']: r#8
[#19 'texture_2d_array']: r#8
[#19 'texture_3d']: r#8
[#19 'texture_cube']: r#8
[#19 'texture_cube_array']: r#8
[#19 'texture_depth_2d']: r#8
[#19 'texture_depth_2d_array']: r#8
[#19 'texture_depth_cube']: r#8
[#19 'texture_depth_cube_array']: r#8
[#19 'texture_depth_multisampled_2d']: r#8
[#19 'texture_multisampled_2d']: r#8
[#19 'texture_storage_1d']: r#8
[#19 'texture_storage_2d']: r#8
[#19 'texture_storage_2d_array']: r#8
[#19 'texture_storage_3d']: r#8
[#19 'true']: r#8
[#19 'type']: r#8
[#19 'u32']: r#8
[#19 'var']: r#8
[#19 'vec2']: r#8
[#19 'vec3']: r#8
[#19 'vec4']: r#8
[#19 'while']: r#8
[#19 '{']: r#8
[#19 '}']: r#8
[#19 '~']: r#8
[#19 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#8
[#19 EndOfText]: r#8
[#20 'var']: s#161
[#21 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#22 'override']: s#156
[#23 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#24 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#25 'fn']: s#153
[#26 '!']: s#70
[#26 '&']: s#73
[#26 '(']: s#114
[#26 '*']: s#72
[#26 '-']: s#69
[#26 'array']: s#120
[#26 'bitcast']: s#78
[#26 'bool']: s#87
[#26 'f16']: s#116
[#26 'f32']: s#115
[#26 'false']: s#113
[#26 'i32']: s#117
[#26 'mat2x2']: s#98
[#26 'mat2x3']: s#99
[#26 'mat2x4']: s#100
[#26 'mat3x2']: s#101
[#26 'mat3x3']: s#102
[#26 'mat3x4']: s#103
[#26 'mat4x2']: s#104
[#26 'mat4x3']: s#105
[#26 'mat4x4']: s#106
[#26 'ptr']: s#119
[#26 'sampler']: s#134
[#26 'sampler_comparison']: s#135
[#26 'texture_1d']: s#141
[#26 'texture_2d']: s#142
[#26 'texture_2d_array']: s#143
[#26 'texture_3d']: s#144
[#26 'texture_cube']: s#145
[#26 'texture_cube_array']: s#146
[#26 'texture_depth_2d']: s#136
[#26 'texture_depth_2d_array']: s#137
[#26 'texture_depth_cube']: s#138
[#26 'texture_depth_cube_array']: s#139
[#26 'texture_depth_multisampled_2d']: s#140
[#26 'texture_multisampled_2d']: s#147
[#26 'texture_storage_1d']: s#148
[#26 'texture_storage_2d']: s#149
[#26 'texture_storage_2d_array']: s#150
[#26 'texture_storage_3d']: s#151
[#26 'true']: s#112
[#26 'u32']: s#118
[#26 'vec2']: s#95
[#26 'vec3']: s#96
[#26 'vec4']: s#97
[#26 '~']: s#71
[#26 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#26 /0[fh]/]: s#129
[#26 /0[iu]?/]: s#108
[#26 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#26 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#26 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#26 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#26 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#26 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#26 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#26 /[1-9][0-9]*[fh]/]: s#130
[#26 /[1-9][0-9]*[iu]?/]: s#109
[#27 'var']: r#9
[#28 'override']: r#10
[#29 'fn']: r#11
[#30 '@']: s#32
[#31 'align']: s#33
[#31 'binding']: s#34
[#31 'builtin']: s#35
[#31 'compute']: s#46
[#31 'const']: s#36
[#31 'fragment']: s#45
[#31 'group']: s#37
[#31 'id']: s#38
[#31 'interpolate']: s#39
[#31 'invariant']: s#40
[#31 'location']: s#41
[#31 'size']: s#42
[#31 'vertex']: s#44
[#31 'workgroup_size']: s#43
[#32 'const']: r#12
[#33 '(']: s#114
[#34 '(']: s#114
[#35 '(']: s#114
[#36 '@']: r#13
[#36 'array']: r#13
[#36 'bool']: r#13
[#36 'f16']: r#13
[#36 'f32']: r#13
[#36 'fn']: r#13
[#36 'i32']: r#13
[#36 'override']: r#13
[#36 'ptr']: r#13
[#36 'sampler']: r#13
[#36 'sampler_comparison']: r#13
[#36 'texture_1d']: r#13
[#36 'texture_2d']: r#13
[#36 'texture_2d_array']: r#13
[#36 'texture_3d']: r#13
[#36 'texture_cube']: r#13
[#36 'texture_cube_array']: r#13
[#36 'texture_depth_2d']: r#13
[#36 'texture_depth_2d_array']: r#13
[#36 'texture_depth_cube']: r#13
[#36 'texture_depth_cube_array']: r#13
[#36 'texture_depth_multisampled_2d']: r#13
[#36 'texture_multisampled_2d']: r#13
[#36 'texture_storage_1d']: r#13
[#36 'texture_storage_2d']: r#13
[#36 'texture_storage_2d_array']: r#13
[#36 'texture_storage_3d']: r#13
[#36 'u32']: r#13
[#36 'var']: r#13
[#36 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#13
[#37 '(']: s#114
[#38 '(']: s#114
[#39 '(']: s#114
[#40 '@']: r#14
[#40 'array']: r#14
[#40 'bool']: r#14
[#40 'f16']: r#14
[#40 'f32']: r#14
[#40 'fn']: r#14
[#40 'i32']: r#14
[#40 'override']: r#14
[#40 'ptr']: r#14
[#40 'sampler']: r#14
[#40 'sampler_comparison']: r#14
[#40 'texture_1d']: r#14
[#40 'texture_2d']: r#14
[#40 'texture_2d_array']: r#14
[#40 'texture_3d']: r#14
[#40 'texture_cube']: r#14
[#40 'texture_cube_array']: r#14
[#40 'texture_depth_2d']: r#14
[#40 'texture_depth_2d_array']: r#14
[#40 'texture_depth_cube']: r#14
[#40 'texture_depth_cube_array']: r#14
[#40 'texture_depth_multisampled_2d']: r#14
[#40 'texture_multisampled_2d']: r#14
[#40 'texture_storage_1d']: r#14
[#40 'texture_storage_2d']: r#14
[#40 'texture_storage_2d_array']: r#14
[#40 'texture_storage_3d']: r#14
[#40 'u32']: r#14
[#40 'var']: r#14
[#40 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#14
[#41 '(']: s#114
[#42 '(']: s#114
[#43 '(']: s#114
[#44 '@']: r#15
[#44 'array']: r#15
[#44 'bool']: r#15
[#44 'f16']: r#15
[#44 'f32']: r#15
[#44 'fn']: r#15
[#44 'i32']: r#15
[#44 'override']: r#15
[#44 'ptr']: r#15
[#44 'sampler']: r#15
[#44 'sampler_comparison']: r#15
[#44 'texture_1d']: r#15
[#44 'texture_2d']: r#15
[#44 'texture_2d_array']: r#15
[#44 'texture_3d']: r#15
[#44 'texture_cube']: r#15
[#44 'texture_cube_array']: r#15
[#44 'texture_depth_2d']: r#15
[#44 'texture_depth_2d_array']: r#15
[#44 'texture_depth_cube']: r#15
[#44 'texture_depth_cube_array']: r#15
[#44 'texture_depth_multisampled_2d']: r#15
[#44 'texture_multisampled_2d']: r#15
[#44 'texture_storage_1d']: r#15
[#44 'texture_storage_2d']: r#15
[#44 'texture_storage_2d_array']: r#15
[#44 'texture_storage_3d']: r#15
[#44 'u32']: r#15
[#44 'var']: r#15
[#44 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#15
[#45 '@']: r#16
[#45 'array']: r#16
[#45 'bool']: r#16
[#45 'f16']: r#16
[#45 'f32']: r#16
[#45 'fn']: r#16
[#45 'i32']: r#16
[#45 'override']: r#16
[#45 'ptr']: r#16
[#45 'sampler']: r#16
[#45 'sampler_comparison']: r#16
[#45 'texture_1d']: r#16
[#45 'texture_2d']: r#16
[#45 'texture_2d_array']: r#16
[#45 'texture_3d']: r#16
[#45 'texture_cube']: r#16
[#45 'texture_cube_array']: r#16
[#45 'texture_depth_2d']: r#16
[#45 'texture_depth_2d_array']: r#16
[#45 'texture_depth_cube']: r#16
[#45 'texture_depth_cube_array']: r#16
[#45 'texture_depth_multisampled_2d']: r#16
[#45 'texture_multisampled_2d']: r#16
[#45 'texture_storage_1d']: r#16
[#45 'texture_storage_2d']: r#16
[#45 'texture_storage_2d_array']: r#16
[#45 'texture_storage_3d']: r#16
[#45 'u32']: r#16
[#45 'var']: r#16
[#45 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#16
[#46 '@']: r#17
[#46 'array']: r#17
[#46 'bool']: r#17
[#46 'f16']: r#17
[#46 'f32']: r#17
[#46 'fn']: r#17
[#46 'i32']: r#17
[#46 'override']: r#17
[#46 'ptr']: r#17
[#46 'sampler']: r#17
[#46 'sampler_comparison']: r#17
[#46 'texture_1d']: r#17
[#46 'texture_2d']: r#17
[#46 'texture_2d_array']: r#17
[#46 'texture_3d']: r#17
[#46 'texture_cube']: r#17
[#46 'texture_cube_array']: r#17
[#46 'texture_depth_2d']: r#17
[#46 'texture_depth_2d_array']: r#17
[#46 'texture_depth_cube']: r#17
[#46 'texture_depth_cube_array']: r#17
[#46 'texture_depth_multisampled_2d']: r#17
[#46 'texture_multisampled_2d']: r#17
[#46 'texture_storage_1d']: r#17
[#46 'texture_storage_2d']: r#17
[#46 'texture_storage_2d_array']: r#17
[#46 'texture_storage_3d']: r#17
[#46 'u32']: r#17
[#46 'var']: r#17
[#46 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#17
[#47 'var']: r#18
[#48 'override']: r#19
[#49 'fn']: r#20
[#50 ';']: r#21
[#51 '&&']: r#24
[#51 ')']: r#22
[#51 ',']: r#22
[#51 ':']: r#22
[#51 ';']: r#22
[#51 ']']: r#22
[#51 '{']: r#22
[#51 '||']: r#23
[#52 '||']: s#239
[#53 '&&']: s#237
[#54 ')']: r#25
[#54 ',']: r#25
[#54 ':']: r#25
[#54 ';']: r#25
[#54 ']']: r#25
[#54 '{']: r#25
[#55 '!=']: s#235
[#55 '&&']: r#26
[#55 ')']: r#26
[#55 ',']: r#26
[#55 ':']: r#26
[#55 ';']: r#26
[#55 '<']: s#171
[#55 '<=']: s#232
[#55 '==']: s#234
[#55 '>']: s#231
[#55 '>=']: s#233
[#55 ']']: r#26
[#55 '{']: r#26
[#55 '||']: r#26
[#56 '&']: s#73
[#57 '|']: s#223
[#58 '^']: s#221
[#59 '!=']: r#27
[#59 '&&']: r#27
[#59 ')']: r#27
[#59 '+']: s#219
[#59 ',']: r#27
[#59 '-']: s#69
[#59 ':']: r#27
[#59 ';']: r#27
[#59 '<']: r#27
[#59 '<=']: r#27
[#59 '==']: r#27
[#59 '>']: r#27
[#59 '>=']: r#27
[#59 ']']: r#27
[#59 '{']: r#27
[#59 '||']: r#27
[#60 '!=']: r#31
[#60 '%']: r#31
[#60 '&&']: r#31
[#60 '&']: r#28
[#60 ')']: r#31
[#60 '*']: r#31
[#60 '+']: r#31
[#60 ',']: r#31
[#60 '-']: r#31
[#60 '/']: r#31
[#60 ':']: r#31
[#60 ';']: r#31
[#60 '<']: r#31
[#60 '<<']: s#215
[#60 '<=']: r#31
[#60 '==']: r#31
[#60 '>']: r#31
[#60 '>=']: r#31
[#60 '>>']: s#216
[#60 ']']: r#31
[#60 '^']: r#30
[#60 '{']: r#31
[#60 '|']: r#29
[#60 '||']: r#31
[#61 '!=']: r#32
[#61 '%']: s#212
[#61 '&&']: r#32
[#61 ')']: r#32
[#61 '*']: s#72
[#61 '+']: r#32
[#61 ',']: r#32
[#61 '-']: r#32
[#61 '/']: s#211
[#61 ':']: r#32
[#61 ';']: r#32
[#61 '<']: r#32
[#61 '<=']: r#32
[#61 '==']: r#32
[#61 '>']: r#32
[#61 '>=']: r#32
[#61 ']']: r#32
[#61 '{']: r#32
[#61 '||']: r#32
[#62 '!=']: r#33
[#62 '%']: r#33
[#62 '&&']: r#33
[#62 '&']: r#33
[#62 ')']: r#33
[#62 '*']: r#33
[#62 '+']: r#33
[#62 ',']: r#33
[#62 '-']: r#33
[#62 '/']: r#33
[#62 ':']: r#33
[#62 ';']: r#33
[#62 '<']: r#33
[#62 '<<']: r#33
[#62 '<=']: r#33
[#62 '==']: r#33
[#62 '>']: r#33
[#62 '>=']: r#33
[#62 '>>']: r#33
[#62 ']']: r#33
[#62 '^']: r#33
[#62 '{']: r#33
[#62 '|']: r#33
[#62 '||']: r#33
[#63 '!']: s#70
[#63 '&']: s#73
[#63 '(']: s#114
[#63 '*']: s#72
[#63 '-']: s#69
[#63 'array']: s#120
[#63 'bitcast']: s#78
[#63 'bool']: s#87
[#63 'f16']: s#116
[#63 'f32']: s#115
[#63 'false']: s#113
[#63 'i32']: s#117
[#63 'mat2x2']: s#98
[#63 'mat2x3']: s#99
[#63 'mat2x4']: s#100
[#63 'mat3x2']: s#101
[#63 'mat3x3']: s#102
[#63 'mat3x4']: s#103
[#63 'mat4x2']: s#104
[#63 'mat4x3']: s#105
[#63 'mat4x4']: s#106
[#63 'ptr']: s#119
[#63 'sampler']: s#134
[#63 'sampler_comparison']: s#135
[#63 'texture_1d']: s#141
[#63 'texture_2d']: s#142
[#63 'texture_2d_array']: s#143
[#63 'texture_3d']: s#144
[#63 'texture_cube']: s#145
[#63 'texture_cube_array']: s#146
[#63 'texture_depth_2d']: s#136
[#63 'texture_depth_2d_array']: s#137
[#63 'texture_depth_cube']: s#138
[#63 'texture_depth_cube_array']: s#139
[#63 'texture_depth_multisampled_2d']: s#140
[#63 'texture_multisampled_2d']: s#147
[#63 'texture_storage_1d']: s#148
[#63 'texture_storage_2d']: s#149
[#63 'texture_storage_2d_array']: s#150
[#63 'texture_storage_3d']: s#151
[#63 'true']: s#112
[#63 'u32']: s#118
[#63 'vec2']: s#95
[#63 'vec3']: s#96
[#63 'vec4']: s#97
[#63 '~']: s#71
[#63 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#63 /0[fh]/]: s#129
[#63 /0[iu]?/]: s#108
[#63 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#63 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#63 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#63 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#63 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#63 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#63 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#63 /[1-9][0-9]*[fh]/]: s#130
[#63 /[1-9][0-9]*[iu]?/]: s#109
[#64 '!']: s#70
[#64 '&']: s#73
[#64 '(']: s#114
[#64 '*']: s#72
[#64 '-']: s#69
[#64 'array']: s#120
[#64 'bitcast']: s#78
[#64 'bool']: s#87
[#64 'f16']: s#116
[#64 'f32']: s#115
[#64 'false']: s#113
[#64 'i32']: s#117
[#64 'mat2x2']: s#98
[#64 'mat2x3']: s#99
[#64 'mat2x4']: s#100
[#64 'mat3x2']: s#101
[#64 'mat3x3']: s#102
[#64 'mat3x4']: s#103
[#64 'mat4x2']: s#104
[#64 'mat4x3']: s#105
[#64 'mat4x4']: s#106
[#64 'ptr']: s#119
[#64 'sampler']: s#134
[#64 'sampler_comparison']: s#135
[#64 'texture_1d']: s#141
[#64 'texture_2d']: s#142
[#64 'texture_2d_array']: s#143
[#64 'texture_3d']: s#144
[#64 'texture_cube']: s#145
[#64 'texture_cube_array']: s#146
[#64 'texture_depth_2d']: s#136
[#64 'texture_depth_2d_array']: s#137
[#64 'texture_depth_cube']: s#138
[#64 'texture_depth_cube_array']: s#139
[#64 'texture_depth_multisampled_2d']: s#140
[#64 'texture_multisampled_2d']: s#147
[#64 'texture_storage_1d']: s#148
[#64 'texture_storage_2d']: s#149
[#64 'texture_storage_2d_array']: s#150
[#64 'texture_storage_3d']: s#151
[#64 'true']: s#112
[#64 'u32']: s#118
[#64 'vec2']: s#95
[#64 'vec3']: s#96
[#64 'vec4']: s#97
[#64 '~']: s#71
[#64 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#64 /0[fh]/]: s#129
[#64 /0[iu]?/]: s#108
[#64 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#64 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#64 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#64 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#64 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#64 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#64 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#64 /[1-9][0-9]*[fh]/]: s#130
[#64 /[1-9][0-9]*[iu]?/]: s#109
[#65 '!']: s#70
[#65 '&']: s#73
[#65 '(']: s#114
[#65 '*']: s#72
[#65 '-']: s#69
[#65 'array']: s#120
[#65 'bitcast']: s#78
[#65 'bool']: s#87
[#65 'f16']: s#116
[#65 'f32']: s#115
[#65 'false']: s#113
[#65 'i32']: s#117
[#65 'mat2x2']: s#98
[#65 'mat2x3']: s#99
[#65 'mat2x4']: s#100
[#65 'mat3x2']: s#101
[#65 'mat3x3']: s#102
[#65 'mat3x4']: s#103
[#65 'mat4x2']: s#104
[#65 'mat4x3']: s#105
[#65 'mat4x4']: s#106
[#65 'ptr']: s#119
[#65 'sampler']: s#134
[#65 'sampler_comparison']: s#135
[#65 'texture_1d']: s#141
[#65 'texture_2d']: s#142
[#65 'texture_2d_array']: s#143
[#65 'texture_3d']: s#144
[#65 'texture_cube']: s#145
[#65 'texture_cube_array']: s#146
[#65 'texture_depth_2d']: s#136
[#65 'texture_depth_2d_array']: s#137
[#65 'texture_depth_cube']: s#138
[#65 'texture_depth_cube_array']: s#139
[#65 'texture_depth_multisampled_2d']: s#140
[#65 'texture_multisampled_2d']: s#147
[#65 'texture_storage_1d']: s#148
[#65 'texture_storage_2d']: s#149
[#65 'texture_storage_2d_array']: s#150
[#65 'texture_storage_3d']: s#151
[#65 'true']: s#112
[#65 'u32']: s#118
[#65 'vec2']: s#95
[#65 'vec3']: s#96
[#65 'vec4']: s#97
[#65 '~']: s#71
[#65 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#65 /0[fh]/]: s#129
[#65 /0[iu]?/]: s#108
[#65 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#65 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#65 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#65 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#65 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#65 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#65 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#65 /[1-9][0-9]*[fh]/]: s#130
[#65 /[1-9][0-9]*[iu]?/]: s#109
[#66 '!']: s#70
[#66 '&']: s#73
[#66 '(']: s#114
[#66 '*']: s#72
[#66 '-']: s#69
[#66 'array']: s#120
[#66 'bitcast']: s#78
[#66 'bool']: s#87
[#66 'f16']: s#116
[#66 'f32']: s#115
[#66 'false']: s#113
[#66 'i32']: s#117
[#66 'mat2x2']: s#98
[#66 'mat2x3']: s#99
[#66 'mat2x4']: s#100
[#66 'mat3x2']: s#101
[#66 'mat3x3']: s#102
[#66 'mat3x4']: s#103
[#66 'mat4x2']: s#104
[#66 'mat4x3']: s#105
[#66 'mat4x4']: s#106
[#66 'ptr']: s#119
[#66 'sampler']: s#134
[#66 'sampler_comparison']: s#135
[#66 'texture_1d']: s#141
[#66 'texture_2d']: s#142
[#66 'texture_2d_array']: s#143
[#66 'texture_3d']: s#144
[#66 'texture_cube']: s#145
[#66 'texture_cube_array']: s#146
[#66 'texture_depth_2d']: s#136
[#66 'texture_depth_2d_array']: s#137
[#66 'texture_depth_cube']: s#138
[#66 'texture_depth_cube_array']: s#139
[#66 'texture_depth_multisampled_2d']: s#140
[#66 'texture_multisampled_2d']: s#147
[#66 'texture_storage_1d']: s#148
[#66 'texture_storage_2d']: s#149
[#66 'texture_storage_2d_array']: s#150
[#66 'texture_storage_3d']: s#151
[#66 'true']: s#112
[#66 'u32']: s#118
[#66 'vec2']: s#95
[#66 'vec3']: s#96
[#66 'vec4']: s#97
[#66 '~']: s#71
[#66 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#66 /0[fh]/]: s#129
[#66 /0[iu]?/]: s#108
[#66 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#66 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#66 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#66 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#66 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#66 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#66 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#66 /[1-9][0-9]*[fh]/]: s#130
[#66 /[1-9][0-9]*[iu]?/]: s#109
[#67 '!']: s#70
[#67 '&']: s#73
[#67 '(']: s#114
[#67 '*']: s#72
[#67 '-']: s#69
[#67 'array']: s#120
[#67 'bitcast']: s#78
[#67 'bool']: s#87
[#67 'f16']: s#116
[#67 'f32']: s#115
[#67 'false']: s#113
[#67 'i32']: s#117
[#67 'mat2x2']: s#98
[#67 'mat2x3']: s#99
[#67 'mat2x4']: s#100
[#67 'mat3x2']: s#101
[#67 'mat3x3']: s#102
[#67 'mat3x4']: s#103
[#67 'mat4x2']: s#104
[#67 'mat4x3']: s#105
[#67 'mat4x4']: s#106
[#67 'ptr']: s#119
[#67 'sampler']: s#134
[#67 'sampler_comparison']: s#135
[#67 'texture_1d']: s#141
[#67 'texture_2d']: s#142
[#67 'texture_2d_array']: s#143
[#67 'texture_3d']: s#144
[#67 'texture_cube']: s#145
[#67 'texture_cube_array']: s#146
[#67 'texture_depth_2d']: s#136
[#67 'texture_depth_2d_array']: s#137
[#67 'texture_depth_cube']: s#138
[#67 'texture_depth_cube_array']: s#139
[#67 'texture_depth_multisampled_2d']: s#140
[#67 'texture_multisampled_2d']: s#147
[#67 'texture_storage_1d']: s#148
[#67 'texture_storage_2d']: s#149
[#67 'texture_storage_2d_array']: s#150
[#67 'texture_storage_3d']: s#151
[#67 'true']: s#112
[#67 'u32']: s#118
[#67 'vec2']: s#95
[#67 'vec3']: s#96
[#67 'vec4']: s#97
[#67 '~']: s#71
[#67 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#67 /0[fh]/]: s#129
[#67 /0[iu]?/]: s#108
[#67 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#67 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#67 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#67 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#67 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#67 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#67 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#67 /[1-9][0-9]*[fh]/]: s#130
[#67 /[1-9][0-9]*[iu]?/]: s#109
[#68 '.']: s#202
[#68 '[']: s#201
[#69 '!']: r#34
[#69 '&']: r#34
[#69 '(']: r#34
[#69 '*']: r#34
[#69 '-']: r#34
[#69 'array']: r#34
[#69 'bitcast']: r#34
[#69 'bool']: r#34
[#69 'f16']: r#34
[#69 'f32']: r#34
[#69 'false']: r#34
[#69 'i32']: r#34
[#69 'mat2x2']: r#34
[#69 'mat2x3']: r#34
[#69 'mat2x4']: r#34
[#69 'mat3x2']: r#34
[#69 'mat3x3']: r#34
[#69 'mat3x4']: r#34
[#69 'mat4x2']: r#34
[#69 'mat4x3']: r#34
[#69 'mat4x4']: r#34
[#69 'ptr']: r#34
[#69 'sampler']: r#34
[#69 'sampler_comparison']: r#34
[#69 'texture_1d']: r#34
[#69 'texture_2d']: r#34
[#69 'texture_2d_array']: r#34
[#69 'texture_3d']: r#34
[#69 'texture_cube']: r#34
[#69 'texture_cube_array']: r#34
[#69 'texture_depth_2d']: r#34
[#69 'texture_depth_2d_array']: r#34
[#69 'texture_depth_cube']: r#34
[#69 'texture_depth_cube_array']: r#34
[#69 'texture_depth_multisampled_2d']: r#34
[#69 'texture_multisampled_2d']: r#34
[#69 'texture_storage_1d']: r#34
[#69 'texture_storage_2d']: r#34
[#69 'texture_storage_2d_array']: r#34
[#69 'texture_storage_3d']: r#34
[#69 'true']: r#34
[#69 'u32']: r#34
[#69 'vec2']: r#34
[#69 'vec3']: r#34
[#69 'vec4']: r#34
[#69 '~']: r#34
[#70 '!']: r#35
[#70 '&']: r#35
[#70 '(']: r#35
[#70 '*']: r#35
[#70 '-']: r#35
[#70 'array']: r#35
[#70 'bitcast']: r#35
[#70 'bool']: r#35
[#70 'f16']: r#35
[#70 'f32']: r#35
[#70 'false']: r#35
[#70 'i32']: r#35
[#70 'mat2x2']: r#35
[#70 'mat2x3']: r#35
[#70 'mat2x4']: r#35
[#70 'mat3x2']: r#35
[#70 'mat3x3']: r#35
[#70 'mat3x4']: r#35
[#70 'mat4x2']: r#35
[#70 'mat4x3']: r#35
[#70 'mat4x4']: r#35
[#70 'ptr']: r#35
[#70 'sampler']: r#35
[#70 'sampler_comparison']: r#35
[#70 'texture_1d']: r#35
[#70 'texture_2d']: r#35
[#70 'texture_2d_array']: r#35
[#70 'texture_3d']: r#35
[#70 'texture_cube']: r#35
[#70 'texture_cube_array']: r#35
[#70 'texture_depth_2d']: r#35
[#70 'texture_depth_2d_array']: r#35
[#70 'texture_depth_cube']: r#35
[#70 'texture_depth_cube_array']: r#35
[#70 'texture_depth_multisampled_2d']: r#35
[#70 'texture_multisampled_2d']: r#35
[#70 'texture_storage_1d']: r#35
[#70 'texture_storage_2d']: r#35
[#70 'texture_storage_2d_array']: r#35
[#70 'texture_storage_3d']: r#35
[#70 'true']: r#35
[#70 'u32']: r#35
[#70 'vec2']: r#35
[#70 'vec3']: r#35
[#70 'vec4']: r#35
[#70 '~']: r#35
[#71 '!']: r#36
[#71 '&']: r#36
[#71 '(']: r#36
[#71 '*']: r#36
[#71 '-']: r#36
[#71 'array']: r#36
[#71 'bitcast']: r#36
[#71 'bool']: r#36
[#71 'f16']: r#36
[#71 'f32']: r#36
[#71 'false']: r#36
[#71 'i32']: r#36
[#71 'mat2x2']: r#36
[#71 'mat2x3']: r#36
[#71 'mat2x4']: r#36
[#71 'mat3x2']: r#36
[#71 'mat3x3']: r#36
[#71 'mat3x4']: r#36
[#71 'mat4x2']: r#36
[#71 'mat4x3']: r#36
[#71 'mat4x4']: r#36
[#71 'ptr']: r#36
[#71 'sampler']: r#36
[#71 'sampler_comparison']: r#36
[#71 'texture_1d']: r#36
[#71 'texture_2d']: r#36
[#71 'texture_2d_array']: r#36
[#71 'texture_3d']: r#36
[#71 'texture_cube']: r#36
[#71 'texture_cube_array']: r#36
[#71 'texture_depth_2d']: r#36
[#71 'texture_depth_2d_array']: r#36
[#71 'texture_depth_cube']: r#36
[#71 'texture_depth_cube_array']: r#36
[#71 'texture_depth_multisampled_2d']: r#36
[#71 'texture_multisampled_2d']: r#36
[#71 'texture_storage_1d']: r#36
[#71 'texture_storage_2d']: r#36
[#71 'texture_storage_2d_array']: r#36
[#71 'texture_storage_3d']: r#36
[#71 'true']: r#36
[#71 'u32']: r#36
[#71 'vec2']: r#36
[#71 'vec3']: r#36
[#71 'vec4']: r#36
[#71 '~']: r#36
[#72 '!']: r#37
[#72 '&']: r#37
[#72 '(']: r#37
[#72 '*']: r#37
[#72 '-']: r#37
[#72 'array']: r#37
[#72 'bitcast']: r#37
[#72 'bool']: r#37
[#72 'f16']: r#37
[#72 'f32']: r#37
[#72 'false']: r#37
[#72 'i32']: r#37
[#72 'mat2x2']: r#37
[#72 'mat2x3']: r#37
[#72 'mat2x4']: r#37
[#72 'mat3x2']: r#37
[#72 'mat3x3']: r#37
[#72 'mat3x4']: r#37
[#72 'mat4x2']: r#37
[#72 'mat4x3']: r#37
[#72 'mat4x4']: r#37
[#72 'ptr']: r#37
[#72 'sampler']: r#37
[#72 'sampler_comparison']: r#37
[#72 'texture_1d']: r#37
[#72 'texture_2d']: r#37
[#72 'texture_2d_array']: r#37
[#72 'texture_3d']: r#37
[#72 'texture_cube']: r#37
[#72 'texture_cube_array']: r#37
[#72 'texture_depth_2d']: r#37
[#72 'texture_depth_2d_array']: r#37
[#72 'texture_depth_cube']: r#37
[#72 'texture_depth_cube_array']: r#37
[#72 'texture_depth_multisampled_2d']: r#37
[#72 'texture_multisampled_2d']: r#37
[#72 'texture_storage_1d']: r#37
[#72 'texture_storage_2d']: r#37
[#72 'texture_storage_2d_array']: r#37
[#72 'texture_storage_3d']: r#37
[#72 'true']: r#37
[#72 'u32']: r#37
[#72 'vec2']: r#37
[#72 'vec3']: r#37
[#72 'vec4']: r#37
[#72 '~']: r#37
[#73 '!']: r#38
[#73 '&']: r#38
[#73 '(']: r#38
[#73 '*']: r#38
[#73 '-']: r#38
[#73 'array']: r#38
[#73 'bitcast']: r#38
[#73 'bool']: r#38
[#73 'f16']: r#38
[#73 'f32']: r#38
[#73 'false']: r#38
[#73 'i32']: r#38
[#73 'mat2x2']: r#38
[#73 'mat2x3']: r#38
[#73 'mat2x4']: r#38
[#73 'mat3x2']: r#38
[#73 'mat3x3']: r#38
[#73 'mat3x4']: r#38
[#73 'mat4x2']: r#38
[#73 'mat4x3']: r#38
[#73 'mat4x4']: r#38
[#73 'ptr']: r#38
[#73 'sampler']: r#38
[#73 'sampler_comparison']: r#38
[#73 'texture_1d']: r#38
[#73 'texture_2d']: r#38
[#73 'texture_2d_array']: r#38
[#73 'texture_3d']: r#38
[#73 'texture_cube']: r#38
[#73 'texture_cube_array']: r#38
[#73 'texture_depth_2d']: r#38
[#73 'texture_depth_2d_array']: r#38
[#73 'texture_depth_cube']: r#38
[#73 'texture_depth_cube_array']: r#38
[#73 'texture_depth_multisampled_2d']: r#38
[#73 'texture_multisampled_2d']: r#38
[#73 'texture_storage_1d']: r#38
[#73 'texture_storage_2d']: r#38
[#73 'texture_storage_2d_array']: r#38
[#73 'texture_storage_3d']: r#38
[#73 'true']: r#38
[#73 'u32']: r#38
[#73 'vec2']: r#38
[#73 'vec3']: r#38
[#73 'vec4']: r#38
[#73 '~']: r#38
[#74 '!=']: r#39
[#74 '%']: r#39
[#74 '&&']: r#39
[#74 '&']: r#39
[#74 '(']: r#40
[#74 ')']: r#39
[#74 '*']: r#39
[#74 '+']: r#39
[#74 ',']: r#39
[#74 '-']: r#39
[#74 '.']: r#39
[#74 '/']: r#39
[#74 ':']: r#39
[#74 ';']: r#39
[#74 '<']: r#39
[#74 '<<']: r#39
[#74 '<=']: r#39
[#74 '==']: r#39
[#74 '>']: r#39
[#74 '>=']: r#39
[#74 '>>']: r#39
[#74 '[']: r#39
[#74 ']']: r#39
[#74 '^']: r#39
[#74 '{']: r#39
[#74 '|']: r#39
[#74 '||']: r#39
[#75 '(']: s#114
[#76 '!=']: r#41
[#76 '%']: r#41
[#76 '&&']: r#41
[#76 '&']: r#41
[#76 ')']: r#41
[#76 '*']: r#41
[#76 '+']: r#41
[#76 ',']: r#41
[#76 '-']: r#41
[#76 '.']: r#41
[#76 '/']: r#41
[#76 ':']: r#41
[#76 ';']: r#41
[#76 '<']: r#41
[#76 '<<']: r#41
[#76 '<=']: r#41
[#76 '==']: r#41
[#76 '>']: r#41
[#76 '>=']: r#41
[#76 '>>']: r#41
[#76 '[']: r#41
[#76 ']']: r#41
[#76 '^']: r#41
[#76 '{']: r#41
[#76 '|']: r#41
[#76 '||']: r#41
[#77 '!=']: r#42
[#77 '%']: r#42
[#77 '&&']: r#42
[#77 '&']: r#42
[#77 ')']: r#42
[#77 '*']: r#42
[#77 '+']: r#42
[#77 ',']: r#42
[#77 '-']: r#42
[#77 '.']: r#42
[#77 '/']: r#42
[#77 ':']: r#42
[#77 ';']: r#42
[#77 '<']: r#42
[#77 '<<']: r#42
[#77 '<=']: r#42
[#77 '==']: r#42
[#77 '>']: r#42
[#77 '>=']: r#42
[#77 '>>']: r#42
[#77 '[']: r#42
[#77 ']']: r#42
[#77 '^']: r#42
[#77 '{']: r#42
[#77 '|']: r#42
[#77 '||']: r#42
[#78 '<']: s#171
[#79 '!=']: r#43
[#79 '%']: r#43
[#79 '%=']: r#43
[#79 '&&']: r#43
[#79 '&']: r#43
[#79 '&=']: r#43
[#79 '(']: r#43
[#79 ')']: r#43
[#79 '*']: r#43
[#79 '*=']: r#43
[#79 '+']: r#43
[#79 '++']: r#43
[#79 '+=']: r#43
[#79 ',']: r#43
[#79 '-']: r#43
[#79 '--']: r#43
[#79 '-=']: r#43
[#79 '.']: r#43
[#79 '/']: r#43
[#79 '/=']: r#43
[#79 ':']: r#43
[#79 ';']: r#43
[#79 '<']: r#43
[#79 '<<']: r#43
[#79 '<<=']: r#43
[#79 '<=']: r#43
[#79 '=']: r#43
[#79 '==']: r#43
[#79 '>']: r#43
[#79 '>=']: r#43
[#79 '>>']: r#43
[#79 '>>=']: r#43
[#79 '[']: r#43
[#79 ']']: r#43
[#79 '^']: r#43
[#79 '^=']: r#43
[#79 '{']: r#43
[#79 '|']: r#43
[#79 '|=']: r#43
[#79 '||']: r#43
[#79 '}']: r#43
[#80 '(']: r#44
[#81 '(']: r#45
[#82 '(']: r#46
[#83 '!=']: r#47
[#83 '%']: r#47
[#83 '&&']: r#47
[#83 '&']: r#47
[#83 ')']: r#47
[#83 '*']: r#47
[#83 '+']: r#47
[#83 ',']: r#47
[#83 '-']: r#47
[#83 '.']: r#47
[#83 '/']: r#47
[#83 ':']: r#47
[#83 ';']: r#47
[#83 '<']: r#47
[#83 '<<']: r#47
[#83 '<=']: r#47
[#83 '==']: r#47
[#83 '>']: r#47
[#83 '>=']: r#47
[#83 '>>']: r#47
[#83 '[']: r#47
[#83 ']']: r#47
[#83 '^']: r#47
[#83 '{']: r#47
[#83 '|']: r#47
[#83 '||']: r#47
[#84 '!=']: r#48
[#84 '%']: r#48
[#84 '&&']: r#48
[#84 '&']: r#48
[#84 ')']: r#48
[#84 '*']: r#48
[#84 '+']: r#48
[#84 ',']: r#48
[#84 '-']: r#48
[#84 '.']: r#48
[#84 '/']: r#48
[#84 ':']: r#48
[#84 ';']: r#48
[#84 '<']: r#48
[#84 '<<']: r#48
[#84 '<=']: r#48
[#84 '==']: r#48
[#84 '>']: r#48
[#84 '>=']: r#48
[#84 '>>']: r#48
[#84 '[']: r#48
[#84 ']']: r#48
[#84 '^']: r#48
[#84 '{']: r#48
[#84 '|']: r#48
[#84 '||']: r#48
[#85 '!=']: r#49
[#85 '%']: r#49
[#85 '&&']: r#49
[#85 '&']: r#49
[#85 ')']: r#49
[#85 '*']: r#49
[#85 '+']: r#49
[#85 ',']: r#49
[#85 '-']: r#49
[#85 '.']: r#49
[#85 '/']: r#49
[#85 ':']: r#49
[#85 ';']: r#49
[#85 '<']: r#49
[#85 '<<']: r#49
[#85 '<=']: r#49
[#85 '==']: r#49
[#85 '>']: r#49
[#85 '>=']: r#49
[#85 '>>']: r#49
[#85 '[']: r#49
[#85 ']']: r#49
[#85 '^']: r#49
[#85 '{']: r#49
[#85 '|']: r#49
[#85 '||']: r#49
[#86 '!']: s#70
[#86 '&']: s#73
[#86 '(']: s#114
[#86 '*']: s#72
[#86 '-']: s#69
[#86 'array']: s#120
[#86 'bitcast']: s#78
[#86 'bool']: s#87
[#86 'f16']: s#116
[#86 'f32']: s#115
[#86 'false']: s#113
[#86 'i32']: s#117
[#86 'mat2x2']: s#98
[#86 'mat2x3']: s#99
[#86 'mat2x4']: s#100
[#86 'mat3x2']: s#101
[#86 'mat3x3']: s#102
[#86 'mat3x4']: s#103
[#86 'mat4x2']: s#104
[#86 'mat4x3']: s#105
[#86 'mat4x4']: s#106
[#86 'ptr']: s#119
[#86 'sampler']: s#134
[#86 'sampler_comparison']: s#135
[#86 'texture_1d']: s#141
[#86 'texture_2d']: s#142
[#86 'texture_2d_array']: s#143
[#86 'texture_3d']: s#144
[#86 'texture_cube']: s#145
[#86 'texture_cube_array']: s#146
[#86 'texture_depth_2d']: s#136
[#86 'texture_depth_2d_array']: s#137
[#86 'texture_depth_cube']: s#138
[#86 'texture_depth_cube_array']: s#139
[#86 'texture_depth_multisampled_2d']: s#140
[#86 'texture_multisampled_2d']: s#147
[#86 'texture_storage_1d']: s#148
[#86 'texture_storage_2d']: s#149
[#86 'texture_storage_2d_array']: s#150
[#86 'texture_storage_3d']: s#151
[#86 'true']: s#112
[#86 'u32']: s#118
[#86 'vec2']: s#95
[#86 'vec3']: s#96
[#86 'vec4']: s#97
[#86 '~']: s#71
[#86 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#86 /0[fh]/]: s#129
[#86 /0[iu]?/]: s#108
[#86 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#86 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#86 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#86 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#86 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#86 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#86 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#86 /[1-9][0-9]*[fh]/]: s#130
[#86 /[1-9][0-9]*[iu]?/]: s#109
[#87 '(']: r#50
[#87 ')']: r#50
[#87 ',']: r#50
[#87 ';']: r#50
[#87 '=']: r#50
[#87 '>']: r#50
[#87 '{']: r#50
[#87 '}']: r#50
[#88 '(']: r#51
[#88 ')']: r#51
[#88 ',']: r#51
[#88 ';']: r#51
[#88 '=']: r#51
[#88 '>']: r#51
[#88 '{']: r#51
[#88 '}']: r#51
[#89 '(']: r#52
[#89 ')']: r#52
[#89 ',']: r#52
[#89 ';']: r#52
[#89 '=']: r#52
[#89 '>']: r#52
[#89 '{']: r#52
[#89 '}']: r#52
[#90 '(']: r#53
[#90 ')']: r#53
[#90 ',']: r#53
[#90 ';']: r#53
[#90 '=']: r#53
[#90 '>']: r#53
[#90 '{']: r#53
[#90 '}']: r#53
[#91 '(']: r#54
[#91 ')']: r#54
[#91 ',']: r#54
[#91 ';']: r#54
[#91 '=']: r#54
[#91 '>']: r#54
[#91 '{']: r#54
[#91 '}']: r#54
[#92 '<']: s#171
[#93 '(']: r#55
[#93 ')']: r#55
[#93 ',']: r#55
[#93 ';']: r#55
[#93 '=']: r#55
[#93 '>']: r#55
[#93 '{']: r#55
[#93 '}']: r#55
[#94 '(']: r#56
[#94 ')']: r#56
[#94 ',']: r#56
[#94 ';']: r#56
[#94 '=']: r#56
[#94 '>']: r#56
[#94 '{']: r#56
[#94 '}']: r#56
[#95 '(']: r#57
[#96 '(']: r#58
[#97 '(']: r#59
[#98 '(']: r#60
[#99 '(']: r#61
[#100 '(']: r#62
[#101 '(']: r#63
[#102 '(']: r#64
[#103 '(']: r#65
[#104 '(']: r#66
[#105 '(']: r#67
[#106 '(']: r#68
[#107 '!=']: r#69
[#107 '%']: r#69
[#107 '&&']: r#69
[#107 '&']: r#69
[#107 ')']: r#69
[#107 '*']: r#69
[#107 '+']: r#69
[#107 ',']: r#69
[#107 '-']: r#69
[#107 '.']: r#69
[#107 '/']: r#69
[#107 ':']: r#69
[#107 ';']: r#69
[#107 '<']: r#69
[#107 '<<']: r#69
[#107 '<=']: r#69
[#107 '==']: r#69
[#107 '>']: r#69
[#107 '>=']: r#69
[#107 '>>']: r#69
[#107 '[']: r#69
[#107 ']']: r#69
[#107 '^']: r#69
[#107 '{']: r#69
[#107 '|']: r#69
[#107 '||']: r#69
[#108 '!=']: r#70
[#108 '%']: r#70
[#108 '&&']: r#70
[#108 '&']: r#70
[#108 ')']: r#70
[#108 '*']: r#70
[#108 '+']: r#70
[#108 ',']: r#70
[#108 '-']: r#70
[#108 '.']: r#70
[#108 '/']: r#70
[#108 ':']: r#70
[#108 ';']: r#70
[#108 '<']: r#70
[#108 '<<']: r#70
[#108 '<=']: r#70
[#108 '==']: r#70
[#108 '>']: r#70
[#108 '>=']: r#70
[#108 '>>']: r#70
[#108 '[']: r#70
[#108 ']']: r#70
[#108 '^']: r#70
[#108 '{']: r#70
[#108 '|']: r#70
[#108 '||']: r#70
[#109 '!=']: r#71
[#109 '%']: r#71
[#109 '&&']: r#71
[#109 '&']: r#71
[#109 ')']: r#71
[#109 '*']: r#71
[#109 '+']: r#71
[#109 ',']: r#71
[#109 '-']: r#71
[#109 '.']: r#71
[#109 '/']: r#71
[#109 ':']: r#71
[#109 ';']: r#71
[#109 '<']: r#71
[#109 '<<']: r#71
[#109 '<=']: r#71
[#109 '==']: r#71
[#109 '>']: r#71
[#109 '>=']: r#71
[#109 '>>']: r#71
[#109 '[']: r#71
[#109 ']']: r#71
[#109 '^']: r#71
[#109 '{']: r#71
[#109 '|']: r#71
[#109 '||']: r#71
[#110 '!=']: r#72
[#110 '%']: r#72
[#110 '&&']: r#72
[#110 '&']: r#72
[#110 ')']: r#72
[#110 '*']: r#72
[#110 '+']: r#72
[#110 ',']: r#72
[#110 '-']: r#72
[#110 '.']: r#72
[#110 '/']: r#72
[#110 ':']: r#72
[#110 ';']: r#72
[#110 '<']: r#72
[#110 '<<']: r#72
[#110 '<=']: r#72
[#110 '==']: r#72
[#110 '>']: r#72
[#110 '>=']: r#72
[#110 '>>']: r#72
[#110 '[']: r#72
[#110 ']']: r#72
[#110 '^']: r#72
[#110 '{']: r#72
[#110 '|']: r#72
[#110 '||']: r#72
[#111 '!=']: r#73
[#111 '%']: r#73
[#111 '&&']: r#73
[#111 '&']: r#73
[#111 ')']: r#73
[#111 '*']: r#73
[#111 '+']: r#73
[#111 ',']: r#73
[#111 '-']: r#73
[#111 '.']: r#73
[#111 '/']: r#73
[#111 ':']: r#73
[#111 ';']: r#73
[#111 '<']: r#73
[#111 '<<']: r#73
[#111 '<=']: r#73
[#111 '==']: r#73
[#111 '>']: r#73
[#111 '>=']: r#73
[#111 '>>']: r#73
[#111 '[']: r#73
[#111 ']']: r#73
[#111 '^']: r#73
[#111 '{']: r#73
[#111 '|']: r#73
[#111 '||']: r#73
[#112 '!=']: r#74
[#112 '%']: r#74
[#112 '&&']: r#74
[#112 '&']: r#74
[#112 ')']: r#74
[#112 '*']: r#74
[#112 '+']: r#74
[#112 ',']: r#74
[#112 '-']: r#74
[#112 '.']: r#74
[#112 '/']: r#74
[#112 ':']: r#74
[#112 ';']: r#74
[#112 '<']: r#74
[#112 '<<']: r#74
[#112 '<=']: r#74
[#112 '==']: r#74
[#112 '>']: r#74
[#112 '>=']: r#74
[#112 '>>']: r#74
[#112 '[']: r#74
[#112 ']']: r#74
[#112 '^']: r#74
[#112 '{']: r#74
[#112 '|']: r#74
[#112 '||']: r#74
[#113 '!=']: r#75
[#113 '%']: r#75
[#113 '&&']: r#75
[#113 '&']: r#75
[#113 ')']: r#75
[#113 '*']: r#75
[#113 '+']: r#75
[#113 ',']: r#75
[#113 '-']: r#75
[#113 '.']: r#75
[#113 '/']: r#75
[#113 ':']: r#75
[#113 ';']: r#75
[#113 '<']: r#75
[#113 '<<']: r#75
[#113 '<=']: r#75
[#113 '==']: r#75
[#113 '>']: r#75
[#113 '>=']: r#75
[#113 '>>']: r#75
[#113 '[']: r#75
[#113 ']']: r#75
[#113 '^']: r#75
[#113 '{']: r#75
[#113 '|']: r#75
[#113 '||']: r#75
[#114 '!']: r#76
[#114 '&']: r#76
[#114 '(']: r#76
[#114 ')']: r#76
[#114 '*']: r#76
[#114 '-']: r#76
[#114 ';']: r#76
[#114 '@']: r#76
[#114 'array']: r#76
[#114 'bitcast']: r#76
[#114 'bool']: r#76
[#114 'const']: r#76
[#114 'f16']: r#76
[#114 'f32']: r#76
[#114 'false']: r#76
[#114 'i32']: r#76
[#114 'let']: r#76
[#114 'mat2x2']: r#76
[#114 'mat2x3']: r#76
[#114 'mat2x4']: r#76
[#114 'mat3x2']: r#76
[#114 'mat3x3']: r#76
[#114 'mat3x4']: r#76
[#114 'mat4x2']: r#76
[#114 'mat4x3']: r#76
[#114 'mat4x4']: r#76
[#114 'ptr']: r#76
[#114 'sampler']: r#76
[#114 'sampler_comparison']: r#76
[#114 'texture_1d']: r#76
[#114 'texture_2d']: r#76
[#114 'texture_2d_array']: r#76
[#114 'texture_3d']: r#76
[#114 'texture_cube']: r#76
[#114 'texture_cube_array']: r#76
[#114 'texture_depth_2d']: r#76
[#114 'texture_depth_2d_array']: r#76
[#114 'texture_depth_cube']: r#76
[#114 'texture_depth_cube_array']: r#76
[#114 'texture_depth_multisampled_2d']: r#76
[#114 'texture_multisampled_2d']: r#76
[#114 'texture_storage_1d']: r#76
[#114 'texture_storage_2d']: r#76
[#114 'texture_storage_2d_array']: r#76
[#114 'texture_storage_3d']: r#76
[#114 'true']: r#76
[#114 'u32']: r#76
[#114 'var']: r#76
[#114 'vec2']: r#76
[#114 'vec3']: r#76
[#114 'vec4']: r#76
[#114 '~']: r#76
[#114 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#76
[#115 '(']: r#77
[#115 ')']: r#77
[#115 ',']: r#77
[#115 ';']: r#77
[#115 '=']: r#77
[#115 '>']: r#77
[#115 '{']: r#77
[#115 '}']: r#77
[#116 '(']: r#78
[#116 ')']: r#78
[#116 ',']: r#78
[#116 ';']: r#78
[#116 '=']: r#78
[#116 '>']: r#78
[#116 '{']: r#78
[#116 '}']: r#78
[#117 '(']: r#79
[#117 ')']: r#79
[#117 ',']: r#79
[#117 ';']: r#79
[#117 '=']: r#79
[#117 '>']: r#79
[#117 '{']: r#79
[#117 '}']: r#79
[#118 '(']: r#80
[#118 ')']: r#80
[#118 ',']: r#80
[#118 ';']: r#80
[#118 '=']: r#80
[#118 '>']: r#80
[#118 '{']: r#80
[#118 '}']: r#80
[#119 '<']: r#81
[#120 '<']: s#171
[#121 '(']: r#82
[#121 ')']: r#82
[#121 ',']: r#82
[#121 ';']: r#82
[#121 '=']: r#82
[#121 '>']: r#82
[#121 '{']: r#82
[#121 '}']: r#82
[#122 '(']: r#83
[#122 ')']: r#83
[#122 ',']: r#83
[#122 ';']: r#83
[#122 '=']: r#83
[#122 '>']: r#83
[#122 '{']: r#83
[#122 '}']: r#83
[#123 '<']: s#171
[#124 '<']: s#171
[#125 '<']: s#171
[#126 '!=']: r#84
[#126 '%']: r#84
[#126 '&&']: r#84
[#126 '&']: r#84
[#126 ')']: r#84
[#126 '*']: r#84
[#126 '+']: r#84
[#126 ',']: r#84
[#126 '-']: r#84
[#126 '.']: r#84
[#126 '/']: r#84
[#126 ':']: r#84
[#126 ';']: r#84
[#126 '<']: r#84
[#126 '<<']: r#84
[#126 '<=']: r#84
[#126 '==']: r#84
[#126 '>']: r#84
[#126 '>=']: r#84
[#126 '>>']: r#84
[#126 '[']: r#84
[#126 ']']: r#84
[#126 '^']: r#84
[#126 '{']: r#84
[#126 '|']: r#84
[#126 '||']: r#84
[#127 '!=']: r#85
[#127 '%']: r#85
[#127 '&&']: r#85
[#127 '&']: r#85
[#127 ')']: r#85
[#127 '*']: r#85
[#127 '+']: r#85
[#127 ',']: r#85
[#127 '-']: r#85
[#127 '.']: r#85
[#127 '/']: r#85
[#127 ':']: r#85
[#127 ';']: r#85
[#127 '<']: r#85
[#127 '<<']: r#85
[#127 '<=']: r#85
[#127 '==']: r#85
[#127 '>']: r#85
[#127 '>=']: r#85
[#127 '>>']: r#85
[#127 '[']: r#85
[#127 ']']: r#85
[#127 '^']: r#85
[#127 '{']: r#85
[#127 '|']: r#85
[#127 '||']: r#85
[#128 '!=']: r#86
[#128 '%']: r#86
[#128 '&&']: r#86
[#128 '&']: r#86
[#128 ')']: r#86
[#128 '*']: r#86
[#128 '+']: r#86
[#128 ',']: r#86
[#128 '-']: r#86
[#128 '.']: r#86
[#128 '/']: r#86
[#128 ':']: r#86
[#128 ';']: r#86
[#128 '<']: r#86
[#128 '<<']: r#86
[#128 '<=']: r#86
[#128 '==']: r#86
[#128 '>']: r#86
[#128 '>=']: r#86
[#128 '>>']: r#86
[#128 '[']: r#86
[#128 ']']: r#86
[#128 '^']: r#86
[#128 '{']: r#86
[#128 '|']: r#86
[#128 '||']: r#86
[#129 '!=']: r#87
[#129 '%']: r#87
[#129 '&&']: r#87
[#129 '&']: r#87
[#129 ')']: r#87
[#129 '*']: r#87
[#129 '+']: r#87
[#129 ',']: r#87
[#129 '-']: r#87
[#129 '.']: r#87
[#129 '/']: r#87
[#129 ':']: r#87
[#129 ';']: r#87
[#129 '<']: r#87
[#129 '<<']: r#87
[#129 '<=']: r#87
[#129 '==']: r#87
[#129 '>']: r#87
[#129 '>=']: r#87
[#129 '>>']: r#87
[#129 '[']: r#87
[#129 ']']: r#87
[#129 '^']: r#87
[#129 '{']: r#87
[#129 '|']: r#87
[#129 '||']: r#87
[#130 '!=']: r#88
[#130 '%']: r#88
[#130 '&&']: r#88
[#130 '&']: r#88
[#130 ')']: r#88
[#130 '*']: r#88
[#130 '+']: r#88
[#130 ',']: r#88
[#130 '-']: r#88
[#130 '.']: r#88
[#130 '/']: r#88
[#130 ':']: r#88
[#130 ';']: r#88
[#130 '<']: r#88
[#130 '<<']: r#88
[#130 '<=']: r#88
[#130 '==']: r#88
[#130 '>']: r#88
[#130 '>=']: r#88
[#130 '>>']: r#88
[#130 '[']: r#88
[#130 ']']: r#88
[#130 '^']: r#88
[#130 '{']: r#88
[#130 '|']: r#88
[#130 '||']: r#88
[#131 '!=']: r#89
[#131 '%']: r#89
[#131 '&&']: r#89
[#131 '&']: r#89
[#131 ')']: r#89
[#131 '*']: r#89
[#131 '+']: r#89
[#131 ',']: r#89
[#131 '-']: r#89
[#131 '.']: r#89
[#131 '/']: r#89
[#131 ':']: r#89
[#131 ';']: r#89
[#131 '<']: r#89
[#131 '<<']: r#89
[#131 '<=']: r#89
[#131 '==']: r#89
[#131 '>']: r#89
[#131 '>=']: r#89
[#131 '>>']: r#89
[#131 '[']: r#89
[#131 ']']: r#89
[#131 '^']: r#89
[#131 '{']: r#89
[#131 '|']: r#89
[#131 '||']: r#89
[#132 '!=']: r#90
[#132 '%']: r#90
[#132 '&&']: r#90
[#132 '&']: r#90
[#132 ')']: r#90
[#132 '*']: r#90
[#132 '+']: r#90
[#132 ',']: r#90
[#132 '-']: r#90
[#132 '.']: r#90
[#132 '/']: r#90
[#132 ':']: r#90
[#132 ';']: r#90
[#132 '<']: r#90
[#132 '<<']: r#90
[#132 '<=']: r#90
[#132 '==']: r#90
[#132 '>']: r#90
[#132 '>=']: r#90
[#132 '>>']: r#90
[#132 '[']: r#90
[#132 ']']: r#90
[#132 '^']: r#90
[#132 '{']: r#90
[#132 '|']: r#90
[#132 '||']: r#90
[#133 '!=']: r#91
[#133 '%']: r#91
[#133 '&&']: r#91
[#133 '&']: r#91
[#133 ')']: r#91
[#133 '*']: r#91
[#133 '+']: r#91
[#133 ',']: r#91
[#133 '-']: r#91
[#133 '.']: r#91
[#133 '/']: r#91
[#133 ':']: r#91
[#133 ';']: r#91
[#133 '<']: r#91
[#133 '<<']: r#91
[#133 '<=']: r#91
[#133 '==']: r#91
[#133 '>']: r#91
[#133 '>=']: r#91
[#133 '>>']: r#91
[#133 '[']: r#91
[#133 ']']: r#91
[#133 '^']: r#91
[#133 '{']: r#91
[#133 '|']: r#91
[#133 '||']: r#91
[#134 '(']: r#92
[#134 ')']: r#92
[#134 ',']: r#92
[#134 ';']: r#92
[#134 '=']: r#92
[#134 '>']: r#92
[#134 '{']: r#92
[#134 '}']: r#92
[#135 '(']: r#93
[#135 ')']: r#93
[#135 ',']: r#93
[#135 ';']: r#93
[#135 '=']: r#93
[#135 '>']: r#93
[#135 '{']: r#93
[#135 '}']: r#93
[#136 '(']: r#94
[#136 ')']: r#94
[#136 ',']: r#94
[#136 ';']: r#94
[#136 '=']: r#94
[#136 '>']: r#94
[#136 '{']: r#94
[#136 '}']: r#94
[#137 '(']: r#95
[#137 ')']: r#95
[#137 ',']: r#95
[#137 ';']: r#95
[#137 '=']: r#95
[#137 '>']: r#95
[#137 '{']: r#95
[#137 '}']: r#95
[#138 '(']: r#96
[#138 ')']: r#96
[#138 ',']: r#96
[#138 ';']: r#96
[#138 '=']: r#96
[#138 '>']: r#96
[#138 '{']: r#96
[#138 '}']: r#96
[#139 '(']: r#97
[#139 ')']: r#97
[#139 ',']: r#97
[#139 ';']: r#97
[#139 '=']: r#97
[#139 '>']: r#97
[#139 '{']: r#97
[#139 '}']: r#97
[#140 '(']: r#98
[#140 ')']: r#98
[#140 ',']: r#98
[#140 ';']: r#98
[#140 '=']: r#98
[#140 '>']: r#98
[#140 '{']: r#98
[#140 '}']: r#98
[#141 '<']: r#99
[#142 '<']: r#100
[#143 '<']: r#101
[#144 '<']: r#102
[#145 '<']: r#103
[#146 '<']: r#104
[#147 '<']: r#105
[#148 '<']: r#106
[#149 '<']: r#107
[#150 '<']: r#108
[#151 '<']: r#109
[#152 '{']: s#184
[#153 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#154 '{']: s#184
[#155 '=']: s#174
[#156 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#157 '=']: s#174
[#158 ':']: s#176
[#158 '=']: r#110
[#159 '=']: r#111
[#160 '=']: s#174
[#161 '<']: s#171
[#162 ';']: r#112
[#162 '@']: r#112
[#162 'const']: r#112
[#162 'fn']: r#112
[#162 'override']: r#112
[#162 'staticAssert']: r#112
[#162 'struct']: r#112
[#162 'type']: r#112
[#162 'var']: r#112
[#162 EndOfText]: r#112
[#163 ';']: r#113
[#163 '@']: r#113
[#163 'const']: r#113
[#163 'fn']: r#113
[#163 'override']: r#113
[#163 'staticAssert']: r#113
[#163 'struct']: r#113
[#163 'type']: r#113
[#163 'var']: r#113
[#163 EndOfText]: r#113
[#164 ';']: r#114
[#164 '@']: r#114
[#164 'const']: r#114
[#164 'fn']: r#114
[#164 'override']: r#114
[#164 'staticAssert']: r#114
[#164 'struct']: r#114
[#164 'type']: r#114
[#164 'var']: r#114
[#164 EndOfText]: r#114
[#165 ';']: r#115
[#165 '@']: r#115
[#165 'const']: r#115
[#165 'fn']: r#115
[#165 'override']: r#115
[#165 'staticAssert']: r#115
[#165 'struct']: r#115
[#165 'type']: r#115
[#165 'var']: r#115
[#165 EndOfText]: r#115
[#166 EndOfText]: r#116
[#167 ';']: r#117
[#167 '@']: r#117
[#167 'const']: r#117
[#167 'enable']: r#117
[#167 'fn']: r#117
[#167 'override']: r#117
[#167 'staticAssert']: r#117
[#167 'struct']: r#117
[#167 'type']: r#117
[#167 'var']: r#117
[#167 EndOfText]: r#117
[#168 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#169 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#118
[#170 'function']: s#318
[#170 'private']: s#319
[#170 'storage']: s#322
[#170 'uniform']: s#321
[#170 'workgroup']: s#320
[#171 '!']: r#119
[#171 '&']: r#119
[#171 '(']: r#119
[#171 '*']: r#119
[#171 '-']: r#119
[#171 'array']: r#119
[#171 'bitcast']: r#119
[#171 'bool']: r#119
[#171 'f16']: r#119
[#171 'f32']: r#119
[#171 'false']: r#119
[#171 'function']: r#119
[#171 'i32']: r#119
[#171 'mat2x2']: r#119
[#171 'mat2x3']: r#119
[#171 'mat2x4']: r#119
[#171 'mat3x2']: r#119
[#171 'mat3x3']: r#119
[#171 'mat3x4']: r#119
[#171 'mat4x2']: r#119
[#171 'mat4x3']: r#119
[#171 'mat4x4']: r#119
[#171 'private']: r#119
[#171 'ptr']: r#119
[#171 'sampler']: r#119
[#171 'sampler_comparison']: r#119
[#171 'storage']: r#119
[#171 'texture_1d']: r#119
[#171 'texture_2d']: r#119
[#171 'texture_2d_array']: r#119
[#171 'texture_3d']: r#119
[#171 'texture_cube']: r#119
[#171 'texture_cube_array']: r#119
[#171 'texture_depth_2d']: r#119
[#171 'texture_depth_2d_array']: r#119
[#171 'texture_depth_cube']: r#119
[#171 'texture_depth_cube_array']: r#119
[#171 'texture_depth_multisampled_2d']: r#119
[#171 'texture_multisampled_2d']: r#119
[#171 'texture_storage_1d']: r#119
[#171 'texture_storage_2d']: r#119
[#171 'texture_storage_2d_array']: r#119
[#171 'texture_storage_3d']: r#119
[#171 'true']: r#119
[#171 'u32']: r#119
[#171 'uniform']: r#119
[#171 'vec2']: r#119
[#171 'vec3']: r#119
[#171 'vec4']: r#119
[#171 'workgroup']: r#119
[#171 '~']: r#119
[#172 ';']: r#120
[#173 '!']: s#70
[#173 '&']: s#73
[#173 '(']: s#114
[#173 '*']: s#72
[#173 '-']: s#69
[#173 'array']: s#120
[#173 'bitcast']: s#78
[#173 'bool']: s#87
[#173 'f16']: s#116
[#173 'f32']: s#115
[#173 'false']: s#113
[#173 'i32']: s#117
[#173 'mat2x2']: s#98
[#173 'mat2x3']: s#99
[#173 'mat2x4']: s#100
[#173 'mat3x2']: s#101
[#173 'mat3x3']: s#102
[#173 'mat3x4']: s#103
[#173 'mat4x2']: s#104
[#173 'mat4x3']: s#105
[#173 'mat4x4']: s#106
[#173 'ptr']: s#119
[#173 'sampler']: s#134
[#173 'sampler_comparison']: s#135
[#173 'texture_1d']: s#141
[#173 'texture_2d']: s#142
[#173 'texture_2d_array']: s#143
[#173 'texture_3d']: s#144
[#173 'texture_cube']: s#145
[#173 'texture_cube_array']: s#146
[#173 'texture_depth_2d']: s#136
[#173 'texture_depth_2d_array']: s#137
[#173 'texture_depth_cube']: s#138
[#173 'texture_depth_cube_array']: s#139
[#173 'texture_depth_multisampled_2d']: s#140
[#173 'texture_multisampled_2d']: s#147
[#173 'texture_storage_1d']: s#148
[#173 'texture_storage_2d']: s#149
[#173 'texture_storage_2d_array']: s#150
[#173 'texture_storage_3d']: s#151
[#173 'true']: s#112
[#173 'u32']: s#118
[#173 'vec2']: s#95
[#173 'vec3']: s#96
[#173 'vec4']: s#97
[#173 '~']: s#71
[#173 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#173 /0[fh]/]: s#129
[#173 /0[iu]?/]: s#108
[#173 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#173 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#173 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#173 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#173 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#173 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#173 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#173 /[1-9][0-9]*[fh]/]: s#130
[#173 /[1-9][0-9]*[iu]?/]: s#109
[#174 '!']: r#121
[#174 '&']: r#121
[#174 '(']: r#121
[#174 '*']: r#121
[#174 '-']: r#121
[#174 'array']: r#121
[#174 'bitcast']: r#121
[#174 'bool']: r#121
[#174 'f16']: r#121
[#174 'f32']: r#121
[#174 'false']: r#121
[#174 'i32']: r#121
[#174 'mat2x2']: r#121
[#174 'mat2x3']: r#121
[#174 'mat2x4']: r#121
[#174 'mat3x2']: r#121
[#174 'mat3x3']: r#121
[#174 'mat3x4']: r#121
[#174 'mat4x2']: r#121
[#174 'mat4x3']: r#121
[#174 'mat4x4']: r#121
[#174 'ptr']: r#121
[#174 'sampler']: r#121
[#174 'sampler_comparison']: r#121
[#174 'texture_1d']: r#121
[#174 'texture_2d']: r#121
[#174 'texture_2d_array']: r#121
[#174 'texture_3d']: r#121
[#174 'texture_cube']: r#121
[#174 'texture_cube_array']: r#121
[#174 'texture_depth_2d']: r#121
[#174 'texture_depth_2d_array']: r#121
[#174 'texture_depth_cube']: r#121
[#174 'texture_depth_cube_array']: r#121
[#174 'texture_depth_multisampled_2d']: r#121
[#174 'texture_multisampled_2d']: r#121
[#174 'texture_storage_1d']: r#121
[#174 'texture_storage_2d']: r#121
[#174 'texture_storage_2d_array']: r#121
[#174 'texture_storage_3d']: r#121
[#174 'true']: r#121
[#174 'u32']: r#121
[#174 'vec2']: r#121
[#174 'vec3']: r#121
[#174 'vec4']: r#121
[#174 '~']: r#121
[#175 'array']: s#120
[#175 'bool']: s#87
[#175 'f16']: s#116
[#175 'f32']: s#115
[#175 'i32']: s#117
[#175 'ptr']: s#119
[#175 'sampler']: s#134
[#175 'sampler_comparison']: s#135
[#175 'texture_1d']: s#141
[#175 'texture_2d']: s#142
[#175 'texture_2d_array']: s#143
[#175 'texture_3d']: s#144
[#175 'texture_cube']: s#145
[#175 'texture_cube_array']: s#146
[#175 'texture_depth_2d']: s#136
[#175 'texture_depth_2d_array']: s#137
[#175 'texture_depth_cube']: s#138
[#175 'texture_depth_cube_array']: s#139
[#175 'texture_depth_multisampled_2d']: s#140
[#175 'texture_multisampled_2d']: s#147
[#175 'texture_storage_1d']: s#148
[#175 'texture_storage_2d']: s#149
[#175 'texture_storage_2d_array']: s#150
[#175 'texture_storage_3d']: s#151
[#175 'u32']: s#118
[#175 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#176 'array']: r#122
[#176 'bool']: r#122
[#176 'f16']: r#122
[#176 'f32']: r#122
[#176 'i32']: r#122
[#176 'ptr']: r#122
[#176 'sampler']: r#122
[#176 'sampler_comparison']: r#122
[#176 'texture_1d']: r#122
[#176 'texture_2d']: r#122
[#176 'texture_2d_array']: r#122
[#176 'texture_3d']: r#122
[#176 'texture_cube']: r#122
[#176 'texture_cube_array']: r#122
[#176 'texture_depth_2d']: r#122
[#176 'texture_depth_2d_array']: r#122
[#176 'texture_depth_cube']: r#122
[#176 'texture_depth_cube_array']: r#122
[#176 'texture_depth_multisampled_2d']: r#122
[#176 'texture_multisampled_2d']: r#122
[#176 'texture_storage_1d']: r#122
[#176 'texture_storage_2d']: r#122
[#176 'texture_storage_2d_array']: r#122
[#176 'texture_storage_3d']: r#122
[#176 'u32']: r#122
[#176 '{']: r#122
[#177 '!']: s#70
[#177 '&']: s#73
[#177 '(']: s#114
[#177 '*']: s#72
[#177 '-']: s#69
[#177 'array']: s#120
[#177 'bitcast']: s#78
[#177 'bool']: s#87
[#177 'f16']: s#116
[#177 'f32']: s#115
[#177 'false']: s#113
[#177 'i32']: s#117
[#177 'mat2x2']: s#98
[#177 'mat2x3']: s#99
[#177 'mat2x4']: s#100
[#177 'mat3x2']: s#101
[#177 'mat3x3']: s#102
[#177 'mat3x4']: s#103
[#177 'mat4x2']: s#104
[#177 'mat4x3']: s#105
[#177 'mat4x4']: s#106
[#177 'ptr']: s#119
[#177 'sampler']: s#134
[#177 'sampler_comparison']: s#135
[#177 'texture_1d']: s#141
[#177 'texture_2d']: s#142
[#177 'texture_2d_array']: s#143
[#177 'texture_3d']: s#144
[#177 'texture_cube']: s#145
[#177 'texture_cube_array']: s#146
[#177 'texture_depth_2d']: s#136
[#177 'texture_depth_2d_array']: s#137
[#177 'texture_depth_cube']: s#138
[#177 'texture_depth_cube_array']: s#139
[#177 'texture_depth_multisampled_2d']: s#140
[#177 'texture_multisampled_2d']: s#147
[#177 'texture_storage_1d']: s#148
[#177 'texture_storage_2d']: s#149
[#177 'texture_storage_2d_array']: s#150
[#177 'texture_storage_3d']: s#151
[#177 'true']: s#112
[#177 'u32']: s#118
[#177 'vec2']: s#95
[#177 'vec3']: s#96
[#177 'vec4']: s#97
[#177 '~']: s#71
[#177 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#177 /0[fh]/]: s#129
[#177 /0[iu]?/]: s#108
[#177 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#177 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#177 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#177 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#177 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#177 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#177 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#177 /[1-9][0-9]*[fh]/]: s#130
[#177 /[1-9][0-9]*[iu]?/]: s#109
[#178 '=']: s#174
[#179 ':']: s#176
[#179 ';']: r#123
[#179 '=']: r#123
[#180 ';']: r#124
[#180 '=']: r#124
[#181 'array']: s#120
[#181 'bool']: s#87
[#181 'f16']: s#116
[#181 'f32']: s#115
[#181 'i32']: s#117
[#181 'ptr']: s#119
[#181 'sampler']: s#134
[#181 'sampler_comparison']: s#135
[#181 'texture_1d']: s#141
[#181 'texture_2d']: s#142
[#181 'texture_2d_array']: s#143
[#181 'texture_3d']: s#144
[#181 'texture_cube']: s#145
[#181 'texture_cube_array']: s#146
[#181 'texture_depth_2d']: s#136
[#181 'texture_depth_2d_array']: s#137
[#181 'texture_depth_cube']: s#138
[#181 'texture_depth_cube_array']: s#139
[#181 'texture_depth_multisampled_2d']: s#140
[#181 'texture_multisampled_2d']: s#147
[#181 'texture_storage_1d']: s#148
[#181 'texture_storage_2d']: s#149
[#181 'texture_storage_2d_array']: s#150
[#181 'texture_storage_3d']: s#151
[#181 'u32']: s#118
[#181 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#182 ';']: r#125
[#182 '@']: r#125
[#182 'const']: r#125
[#182 'fn']: r#125
[#182 'override']: r#125
[#182 'staticAssert']: r#125
[#182 'struct']: r#125
[#182 'type']: r#125
[#182 'var']: r#125
[#182 EndOfText]: r#125
[#183 '@']: s#32
[#184 '&']: r#126
[#184 '(']: r#126
[#184 '*']: r#126
[#184 ';']: r#126
[#184 '@']: r#126
[#184 'break']: r#126
[#184 'case']: r#126
[#184 'const']: r#126
[#184 'continue']: r#126
[#184 'continuing']: r#126
[#184 'default']: r#126
[#184 'discard']: r#126
[#184 'fallthrough']: r#126
[#184 'for']: r#126
[#184 'if']: r#126
[#184 'let']: r#126
[#184 'loop']: r#126
[#184 'return']: r#126
[#184 'staticAssert']: r#126
[#184 'switch']: r#126
[#184 'var']: r#126
[#184 'while']: r#126
[#184 '{']: r#126
[#184 '}']: r#126
[#184 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#126
[#185 '(']: s#114
[#186 ';']: r#127
[#186 '@']: r#127
[#186 'const']: r#127
[#186 'fn']: r#127
[#186 'override']: r#127
[#186 'staticAssert']: r#127
[#186 'struct']: r#127
[#186 'type']: r#127
[#186 'var']: r#127
[#186 EndOfText]: r#127
[#187 '&']: s#73
[#187 '*']: s#72
[#187 ';']: s#19
[#187 'break']: s#373
[#187 'const']: s#372
[#187 'continue']: s#374
[#187 'discard']: s#357
[#187 'for']: s#367
[#187 'if']: s#364
[#187 'let']: s#371
[#187 'loop']: s#366
[#187 'return']: s#363
[#187 'staticAssert']: s#26
[#187 'switch']: s#365
[#187 'var']: s#161
[#187 'while']: s#368
[#187 '{']: s#184
[#187 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#188 'r32float']: s#336
[#188 'r32sint']: s#335
[#188 'r32uint']: s#334
[#188 'rg32float']: s#339
[#188 'rg32sint']: s#338
[#188 'rg32uint']: s#337
[#188 'rgba16float']: s#333
[#188 'rgba16sint']: s#332
[#188 'rgba16uint']: s#331
[#188 'rgba32float']: s#342
[#188 'rgba32sint']: s#341
[#188 'rgba32uint']: s#340
[#188 'rgba8sint']: s#330
[#188 'rgba8snorm']: s#328
[#188 'rgba8uint']: s#329
[#188 'rgba8unorm']: s#327
[#189 'array']: s#120
[#189 'bool']: s#87
[#189 'f16']: s#116
[#189 'f32']: s#115
[#189 'i32']: s#117
[#189 'ptr']: s#119
[#189 'sampler']: s#134
[#189 'sampler_comparison']: s#135
[#189 'texture_1d']: s#141
[#189 'texture_2d']: s#142
[#189 'texture_2d_array']: s#143
[#189 'texture_3d']: s#144
[#189 'texture_cube']: s#145
[#189 'texture_cube_array']: s#146
[#189 'texture_depth_2d']: s#136
[#189 'texture_depth_2d_array']: s#137
[#189 'texture_depth_cube']: s#138
[#189 'texture_depth_cube_array']: s#139
[#189 'texture_depth_multisampled_2d']: s#140
[#189 'texture_multisampled_2d']: s#147
[#189 'texture_storage_1d']: s#148
[#189 'texture_storage_2d']: s#149
[#189 'texture_storage_2d_array']: s#150
[#189 'texture_storage_3d']: s#151
[#189 'u32']: s#118
[#189 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#190 'array']: s#120
[#190 'bool']: s#87
[#190 'f16']: s#116
[#190 'f32']: s#115
[#190 'i32']: s#117
[#190 'ptr']: s#119
[#190 'sampler']: s#134
[#190 'sampler_comparison']: s#135
[#190 'texture_1d']: s#141
[#190 'texture_2d']: s#142
[#190 'texture_2d_array']: s#143
[#190 'texture_3d']: s#144
[#190 'texture_cube']: s#145
[#190 'texture_cube_array']: s#146
[#190 'texture_depth_2d']: s#136
[#190 'texture_depth_2d_array']: s#137
[#190 'texture_depth_cube']: s#138
[#190 'texture_depth_cube_array']: s#139
[#190 'texture_depth_multisampled_2d']: s#140
[#190 'texture_multisampled_2d']: s#147
[#190 'texture_storage_1d']: s#148
[#190 'texture_storage_2d']: s#149
[#190 'texture_storage_2d_array']: s#150
[#190 'texture_storage_3d']: s#151
[#190 'u32']: s#118
[#190 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#191 'array']: s#120
[#191 'bool']: s#87
[#191 'f16']: s#116
[#191 'f32']: s#115
[#191 'i32']: s#117
[#191 'ptr']: s#119
[#191 'sampler']: s#134
[#191 'sampler_comparison']: s#135
[#191 'texture_1d']: s#141
[#191 'texture_2d']: s#142
[#191 'texture_2d_array']: s#143
[#191 'texture_3d']: s#144
[#191 'texture_cube']: s#145
[#191 'texture_cube_array']: s#146
[#191 'texture_depth_2d']: s#136
[#191 'texture_depth_2d_array']: s#137
[#191 'texture_depth_cube']: s#138
[#191 'texture_depth_cube_array']: s#139
[#191 'texture_depth_multisampled_2d']: s#140
[#191 'texture_multisampled_2d']: s#147
[#191 'texture_storage_1d']: s#148
[#191 'texture_storage_2d']: s#149
[#191 'texture_storage_2d_array']: s#150
[#191 'texture_storage_3d']: s#151
[#191 'u32']: s#118
[#191 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#192 'function']: s#318
[#192 'private']: s#319
[#192 'storage']: s#322
[#192 'uniform']: s#321
[#192 'workgroup']: s#320
[#193 ')']: s#316
[#194 'array']: s#120
[#194 'bool']: s#87
[#194 'f16']: s#116
[#194 'f32']: s#115
[#194 'i32']: s#117
[#194 'ptr']: s#119
[#194 'sampler']: s#134
[#194 'sampler_comparison']: s#135
[#194 'texture_1d']: s#141
[#194 'texture_2d']: s#142
[#194 'texture_2d_array']: s#143
[#194 'texture_3d']: s#144
[#194 'texture_cube']: s#145
[#194 'texture_cube_array']: s#146
[#194 'texture_depth_2d']: s#136
[#194 'texture_depth_2d_array']: s#137
[#194 'texture_depth_cube']: s#138
[#194 'texture_depth_cube_array']: s#139
[#194 'texture_depth_multisampled_2d']: s#140
[#194 'texture_multisampled_2d']: s#147
[#194 'texture_storage_1d']: s#148
[#194 'texture_storage_2d']: s#149
[#194 'texture_storage_2d_array']: s#150
[#194 'texture_storage_3d']: s#151
[#194 'u32']: s#118
[#194 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#195 '!=']: r#128
[#195 '%']: r#128
[#195 '&&']: r#128
[#195 '&']: r#128
[#195 ')']: r#128
[#195 '*']: r#128
[#195 '+']: r#128
[#195 ',']: r#128
[#195 '-']: r#128
[#195 '.']: r#128
[#195 '/']: r#128
[#195 ':']: r#128
[#195 ';']: r#128
[#195 '<']: r#128
[#195 '<<']: r#128
[#195 '<=']: r#128
[#195 '==']: r#128
[#195 '>']: r#128
[#195 '>=']: r#128
[#195 '>>']: r#128
[#195 '[']: r#128
[#195 ']']: r#128
[#195 '^']: r#128
[#195 '{']: r#128
[#195 '|']: r#128
[#195 '||']: r#128
[#196 '!']: s#70
[#196 '&']: s#73
[#196 '(']: s#114
[#196 '*']: s#72
[#196 '-']: s#69
[#196 'array']: s#120
[#196 'bitcast']: s#78
[#196 'bool']: s#87
[#196 'f16']: s#116
[#196 'f32']: s#115
[#196 'false']: s#113
[#196 'i32']: s#117
[#196 'mat2x2']: s#98
[#196 'mat2x3']: s#99
[#196 'mat2x4']: s#100
[#196 'mat3x2']: s#101
[#196 'mat3x3']: s#102
[#196 'mat3x4']: s#103
[#196 'mat4x2']: s#104
[#196 'mat4x3']: s#105
[#196 'mat4x4']: s#106
[#196 'ptr']: s#119
[#196 'sampler']: s#134
[#196 'sampler_comparison']: s#135
[#196 'texture_1d']: s#141
[#196 'texture_2d']: s#142
[#196 'texture_2d_array']: s#143
[#196 'texture_3d']: s#144
[#196 'texture_cube']: s#145
[#196 'texture_cube_array']: s#146
[#196 'texture_depth_2d']: s#136
[#196 'texture_depth_2d_array']: s#137
[#196 'texture_depth_cube']: s#138
[#196 'texture_depth_cube_array']: s#139
[#196 'texture_depth_multisampled_2d']: s#140
[#196 'texture_multisampled_2d']: s#147
[#196 'texture_storage_1d']: s#148
[#196 'texture_storage_2d']: s#149
[#196 'texture_storage_2d_array']: s#150
[#196 'texture_storage_3d']: s#151
[#196 'true']: s#112
[#196 'u32']: s#118
[#196 'vec2']: s#95
[#196 'vec3']: s#96
[#196 'vec4']: s#97
[#196 '~']: s#71
[#196 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#196 /0[fh]/]: s#129
[#196 /0[iu]?/]: s#108
[#196 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#196 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#196 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#196 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#196 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#196 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#196 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#196 /[1-9][0-9]*[fh]/]: s#130
[#196 /[1-9][0-9]*[iu]?/]: s#109
[#197 '!=']: r#129
[#197 '%']: r#129
[#197 '&&']: r#129
[#197 '&']: r#129
[#197 ')']: r#129
[#197 '*']: r#129
[#197 '+']: r#129
[#197 ',']: r#129
[#197 '-']: r#129
[#197 '/']: r#129
[#197 ':']: r#129
[#197 ';']: r#129
[#197 '<']: r#129
[#197 '<<']: r#129
[#197 '<=']: r#129
[#197 '==']: r#129
[#197 '>']: r#129
[#197 '>=']: r#129
[#197 '>>']: r#129
[#197 ']']: r#129
[#197 '^']: r#129
[#197 '{']: r#129
[#197 '|']: r#129
[#197 '||']: r#129
[#198 '!=']: r#130
[#198 '%']: r#130
[#198 '&&']: r#130
[#198 '&']: r#130
[#198 ')']: r#130
[#198 '*']: r#130
[#198 '+']: r#130
[#198 ',']: r#130
[#198 '-']: r#130
[#198 '/']: r#130
[#198 ':']: r#130
[#198 ';']: r#130
[#198 '<']: r#130
[#198 '<<']: r#130
[#198 '<=']: r#130
[#198 '==']: r#130
[#198 '>']: r#130
[#198 '>=']: r#130
[#198 '>>']: r#130
[#198 ']']: r#130
[#198 '^']: r#130
[#198 '{']: r#130
[#198 '|']: r#130
[#198 '||']: r#130
[#199 '!']: s#70
[#199 '&']: s#73
[#199 '(']: s#114
[#199 '*']: s#72
[#199 '-']: s#69
[#199 'array']: s#120
[#199 'bitcast']: s#78
[#199 'bool']: s#87
[#199 'f16']: s#116
[#199 'f32']: s#115
[#199 'false']: s#113
[#199 'i32']: s#117
[#199 'mat2x2']: s#98
[#199 'mat2x3']: s#99
[#199 'mat2x4']: s#100
[#199 'mat3x2']: s#101
[#199 'mat3x3']: s#102
[#199 'mat3x4']: s#103
[#199 'mat4x2']: s#104
[#199 'mat4x3']: s#105
[#199 'mat4x4']: s#106
[#199 'ptr']: s#119
[#199 'sampler']: s#134
[#199 'sampler_comparison']: s#135
[#199 'texture_1d']: s#141
[#199 'texture_2d']: s#142
[#199 'texture_2d_array']: s#143
[#199 'texture_3d']: s#144
[#199 'texture_cube']: s#145
[#199 'texture_cube_array']: s#146
[#199 'texture_depth_2d']: s#136
[#199 'texture_depth_2d_array']: s#137
[#199 'texture_depth_cube']: s#138
[#199 'texture_depth_cube_array']: s#139
[#199 'texture_depth_multisampled_2d']: s#140
[#199 'texture_multisampled_2d']: s#147
[#199 'texture_storage_1d']: s#148
[#199 'texture_storage_2d']: s#149
[#199 'texture_storage_2d_array']: s#150
[#199 'texture_storage_3d']: s#151
[#199 'true']: s#112
[#199 'u32']: s#118
[#199 'vec2']: s#95
[#199 'vec3']: s#96
[#199 'vec4']: s#97
[#199 '~']: s#71
[#199 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#199 /0[fh]/]: s#129
[#199 /0[iu]?/]: s#108
[#199 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#199 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#199 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#199 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#199 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#199 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#199 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#199 /[1-9][0-9]*[fh]/]: s#130
[#199 /[1-9][0-9]*[iu]?/]: s#109
[#200 '/[rgba]/']: s#298
[#200 '/[rgba][rgba]/']: s#299
[#200 '/[rgba][rgba][rgba]/']: s#300
[#200 '/[rgba][rgba][rgba][rgba]/']: s#301
[#200 '/[xyzw]/']: s#302
[#200 '/[xyzw][xyzw]/']: s#303
[#200 '/[xyzw][xyzw][xyzw]/']: s#304
[#200 '/[xyzw][xyzw][xyzw][xyzw]/']: s#305
[#200 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#297
[#201 '!']: r#131
[#201 '&']: r#131
[#201 '(']: r#131
[#201 '*']: r#131
[#201 '-']: r#131
[#201 'array']: r#131
[#201 'bitcast']: r#131
[#201 'bool']: r#131
[#201 'f16']: r#131
[#201 'f32']: r#131
[#201 'false']: r#131
[#201 'i32']: r#131
[#201 'mat2x2']: r#131
[#201 'mat2x3']: r#131
[#201 'mat2x4']: r#131
[#201 'mat3x2']: r#131
[#201 'mat3x3']: r#131
[#201 'mat3x4']: r#131
[#201 'mat4x2']: r#131
[#201 'mat4x3']: r#131
[#201 'mat4x4']: r#131
[#201 'ptr']: r#131
[#201 'sampler']: r#131
[#201 'sampler_comparison']: r#131
[#201 'texture_1d']: r#131
[#201 'texture_2d']: r#131
[#201 'texture_2d_array']: r#131
[#201 'texture_3d']: r#131
[#201 'texture_cube']: r#131
[#201 'texture_cube_array']: r#131
[#201 'texture_depth_2d']: r#131
[#201 'texture_depth_2d_array']: r#131
[#201 'texture_depth_cube']: r#131
[#201 'texture_depth_cube_array']: r#131
[#201 'texture_depth_multisampled_2d']: r#131
[#201 'texture_multisampled_2d']: r#131
[#201 'texture_storage_1d']: r#131
[#201 'texture_storage_2d']: r#131
[#201 'texture_storage_2d_array']: r#131
[#201 'texture_storage_3d']: r#131
[#201 'true']: r#131
[#201 'u32']: r#131
[#201 'vec2']: r#131
[#201 'vec3']: r#131
[#201 'vec4']: r#131
[#201 '~']: r#131
[#203 '!=']: r#132
[#203 '%']: r#132
[#203 '&&']: r#132
[#203 '&']: r#132
[#203 ')']: r#132
[#203 '*']: r#132
[#203 '+']: r#132
[#203 ',']: r#132
[#203 '-']: r#132
[#203 '/']: r#132
[#203 ':']: r#132
[#203 ';']: r#132
[#203 '<']: r#132
[#203 '<<']: r#132
[#203 '<=']: r#132
[#203 '==']: r#132
[#203 '>']: r#132
[#203 '>=']: r#132
[#203 '>>']: r#132
[#203 ']']: r#132
[#203 '^']: r#132
[#203 '{']: r#132
[#203 '|']: r#132
[#203 '||']: r#132
[#204 '!=']: r#133
[#204 '%']: r#133
[#204 '&&']: r#133
[#204 '&']: r#133
[#204 ')']: r#133
[#204 '*']: r#133
[#204 '+']: r#133
[#204 ',']: r#133
[#204 '-']: r#133
[#204 '/']: r#133
[#204 ':']: r#133
[#204 ';']: r#133
[#204 '<']: r#133
[#204 '<<']: r#133
[#204 '<=']: r#133
[#204 '==']: r#133
[#204 '>']: r#133
[#204 '>=']: r#133
[#204 '>>']: r#133
[#204 ']']: r#133
[#204 '^']: r#133
[#204 '{']: r#133
[#204 '|']: r#133
[#204 '||']: r#133
[#205 '!=']: r#134
[#205 '%']: r#134
[#205 '&&']: r#134
[#205 '&']: r#134
[#205 ')']: r#134
[#205 '*']: r#134
[#205 '+']: r#134
[#205 ',']: r#134
[#205 '-']: r#134
[#205 '/']: r#134
[#205 ':']: r#134
[#205 ';']: r#134
[#205 '<']: r#134
[#205 '<<']: r#134
[#205 '<=']: r#134
[#205 '==']: r#134
[#205 '>']: r#134
[#205 '>=']: r#134
[#205 '>>']: r#134
[#205 ']']: r#134
[#205 '^']: r#134
[#205 '{']: r#134
[#205 '|']: r#134
[#205 '||']: r#134
[#206 '!=']: r#135
[#206 '%']: r#135
[#206 '&&']: r#135
[#206 '&']: r#135
[#206 ')']: r#135
[#206 '*']: r#135
[#206 '+']: r#135
[#206 ',']: r#135
[#206 '-']: r#135
[#206 '/']: r#135
[#206 ':']: r#135
[#206 ';']: r#135
[#206 '<']: r#135
[#206 '<<']: r#135
[#206 '<=']: r#135
[#206 '==']: r#135
[#206 '>']: r#135
[#206 '>=']: r#135
[#206 '>>']: r#135
[#206 ']']: r#135
[#206 '^']: r#135
[#206 '{']: r#135
[#206 '|']: r#135
[#206 '||']: r#135
[#207 '!=']: r#136
[#207 '%']: r#136
[#207 '&&']: r#136
[#207 '&']: r#136
[#207 ')']: r#136
[#207 '*']: r#136
[#207 '+']: r#136
[#207 ',']: r#136
[#207 '-']: r#136
[#207 '/']: r#136
[#207 ':']: r#136
[#207 ';']: r#136
[#207 '<']: r#136
[#207 '<<']: r#136
[#207 '<=']: r#136
[#207 '==']: r#136
[#207 '>']: r#136
[#207 '>=']: r#136
[#207 '>>']: r#136
[#207 ']']: r#136
[#207 '^']: r#136
[#207 '{']: r#136
[#207 '|']: r#136
[#207 '||']: r#136
[#208 '!']: s#70
[#208 '&']: s#73
[#208 '(']: s#114
[#208 '*']: s#72
[#208 '-']: s#69
[#208 'array']: s#120
[#208 'bitcast']: s#78
[#208 'bool']: s#87
[#208 'f16']: s#116
[#208 'f32']: s#115
[#208 'false']: s#113
[#208 'i32']: s#117
[#208 'mat2x2']: s#98
[#208 'mat2x3']: s#99
[#208 'mat2x4']: s#100
[#208 'mat3x2']: s#101
[#208 'mat3x3']: s#102
[#208 'mat3x4']: s#103
[#208 'mat4x2']: s#104
[#208 'mat4x3']: s#105
[#208 'mat4x4']: s#106
[#208 'ptr']: s#119
[#208 'sampler']: s#134
[#208 'sampler_comparison']: s#135
[#208 'texture_1d']: s#141
[#208 'texture_2d']: s#142
[#208 'texture_2d_array']: s#143
[#208 'texture_3d']: s#144
[#208 'texture_cube']: s#145
[#208 'texture_cube_array']: s#146
[#208 'texture_depth_2d']: s#136
[#208 'texture_depth_2d_array']: s#137
[#208 'texture_depth_cube']: s#138
[#208 'texture_depth_cube_array']: s#139
[#208 'texture_depth_multisampled_2d']: s#140
[#208 'texture_multisampled_2d']: s#147
[#208 'texture_storage_1d']: s#148
[#208 'texture_storage_2d']: s#149
[#208 'texture_storage_2d_array']: s#150
[#208 'texture_storage_3d']: s#151
[#208 'true']: s#112
[#208 'u32']: s#118
[#208 'vec2']: s#95
[#208 'vec3']: s#96
[#208 'vec4']: s#97
[#208 '~']: s#71
[#208 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#208 /0[fh]/]: s#129
[#208 /0[iu]?/]: s#108
[#208 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#208 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#208 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#208 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#208 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#208 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#208 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#208 /[1-9][0-9]*[fh]/]: s#130
[#208 /[1-9][0-9]*[iu]?/]: s#109
[#209 '!']: s#70
[#209 '&']: s#73
[#209 '(']: s#114
[#209 '*']: s#72
[#209 '-']: s#69
[#209 'array']: s#120
[#209 'bitcast']: s#78
[#209 'bool']: s#87
[#209 'f16']: s#116
[#209 'f32']: s#115
[#209 'false']: s#113
[#209 'i32']: s#117
[#209 'mat2x2']: s#98
[#209 'mat2x3']: s#99
[#209 'mat2x4']: s#100
[#209 'mat3x2']: s#101
[#209 'mat3x3']: s#102
[#209 'mat3x4']: s#103
[#209 'mat4x2']: s#104
[#209 'mat4x3']: s#105
[#209 'mat4x4']: s#106
[#209 'ptr']: s#119
[#209 'sampler']: s#134
[#209 'sampler_comparison']: s#135
[#209 'texture_1d']: s#141
[#209 'texture_2d']: s#142
[#209 'texture_2d_array']: s#143
[#209 'texture_3d']: s#144
[#209 'texture_cube']: s#145
[#209 'texture_cube_array']: s#146
[#209 'texture_depth_2d']: s#136
[#209 'texture_depth_2d_array']: s#137
[#209 'texture_depth_cube']: s#138
[#209 'texture_depth_cube_array']: s#139
[#209 'texture_depth_multisampled_2d']: s#140
[#209 'texture_multisampled_2d']: s#147
[#209 'texture_storage_1d']: s#148
[#209 'texture_storage_2d']: s#149
[#209 'texture_storage_2d_array']: s#150
[#209 'texture_storage_3d']: s#151
[#209 'true']: s#112
[#209 'u32']: s#118
[#209 'vec2']: s#95
[#209 'vec3']: s#96
[#209 'vec4']: s#97
[#209 '~']: s#71
[#209 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#209 /0[fh]/]: s#129
[#209 /0[iu]?/]: s#108
[#209 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#209 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#209 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#209 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#209 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#209 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#209 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#209 /[1-9][0-9]*[fh]/]: s#130
[#209 /[1-9][0-9]*[iu]?/]: s#109
[#210 '!']: s#70
[#210 '&']: s#73
[#210 '(']: s#114
[#210 '*']: s#72
[#210 '-']: s#69
[#210 'array']: s#120
[#210 'bitcast']: s#78
[#210 'bool']: s#87
[#210 'f16']: s#116
[#210 'f32']: s#115
[#210 'false']: s#113
[#210 'i32']: s#117
[#210 'mat2x2']: s#98
[#210 'mat2x3']: s#99
[#210 'mat2x4']: s#100
[#210 'mat3x2']: s#101
[#210 'mat3x3']: s#102
[#210 'mat3x4']: s#103
[#210 'mat4x2']: s#104
[#210 'mat4x3']: s#105
[#210 'mat4x4']: s#106
[#210 'ptr']: s#119
[#210 'sampler']: s#134
[#210 'sampler_comparison']: s#135
[#210 'texture_1d']: s#141
[#210 'texture_2d']: s#142
[#210 'texture_2d_array']: s#143
[#210 'texture_3d']: s#144
[#210 'texture_cube']: s#145
[#210 'texture_cube_array']: s#146
[#210 'texture_depth_2d']: s#136
[#210 'texture_depth_2d_array']: s#137
[#210 'texture_depth_cube']: s#138
[#210 'texture_depth_cube_array']: s#139
[#210 'texture_depth_multisampled_2d']: s#140
[#210 'texture_multisampled_2d']: s#147
[#210 'texture_storage_1d']: s#148
[#210 'texture_storage_2d']: s#149
[#210 'texture_storage_2d_array']: s#150
[#210 'texture_storage_3d']: s#151
[#210 'true']: s#112
[#210 'u32']: s#118
[#210 'vec2']: s#95
[#210 'vec3']: s#96
[#210 'vec4']: s#97
[#210 '~']: s#71
[#210 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#210 /0[fh]/]: s#129
[#210 /0[iu]?/]: s#108
[#210 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#210 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#210 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#210 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#210 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#210 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#210 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#210 /[1-9][0-9]*[fh]/]: s#130
[#210 /[1-9][0-9]*[iu]?/]: s#109
[#211 '!']: r#137
[#211 '&']: r#137
[#211 '(']: r#137
[#211 '*']: r#137
[#211 '-']: r#137
[#211 'array']: r#137
[#211 'bitcast']: r#137
[#211 'bool']: r#137
[#211 'f16']: r#137
[#211 'f32']: r#137
[#211 'false']: r#137
[#211 'i32']: r#137
[#211 'mat2x2']: r#137
[#211 'mat2x3']: r#137
[#211 'mat2x4']: r#137
[#211 'mat3x2']: r#137
[#211 'mat3x3']: r#137
[#211 'mat3x4']: r#137
[#211 'mat4x2']: r#137
[#211 'mat4x3']: r#137
[#211 'mat4x4']: r#137
[#211 'ptr']: r#137
[#211 'sampler']: r#137
[#211 'sampler_comparison']: r#137
[#211 'texture_1d']: r#137
[#211 'texture_2d']: r#137
[#211 'texture_2d_array']: r#137
[#211 'texture_3d']: r#137
[#211 'texture_cube']: r#137
[#211 'texture_cube_array']: r#137
[#211 'texture_depth_2d']: r#137
[#211 'texture_depth_2d_array']: r#137
[#211 'texture_depth_cube']: r#137
[#211 'texture_depth_cube_array']: r#137
[#211 'texture_depth_multisampled_2d']: r#137
[#211 'texture_multisampled_2d']: r#137
[#211 'texture_storage_1d']: r#137
[#211 'texture_storage_2d']: r#137
[#211 'texture_storage_2d_array']: r#137
[#211 'texture_storage_3d']: r#137
[#211 'true']: r#137
[#211 'u32']: r#137
[#211 'vec2']: r#137
[#211 'vec3']: r#137
[#211 'vec4']: r#137
[#211 '~']: r#137
[#212 '!']: r#138
[#212 '&']: r#138
[#212 '(']: r#138
[#212 '*']: r#138
[#212 '-']: r#138
[#212 'array']: r#138
[#212 'bitcast']: r#138
[#212 'bool']: r#138
[#212 'f16']: r#138
[#212 'f32']: r#138
[#212 'false']: r#138
[#212 'i32']: r#138
[#212 'mat2x2']: r#138
[#212 'mat2x3']: r#138
[#212 'mat2x4']: r#138
[#212 'mat3x2']: r#138
[#212 'mat3x3']: r#138
[#212 'mat3x4']: r#138
[#212 'mat4x2']: r#138
[#212 'mat4x3']: r#138
[#212 'mat4x4']: r#138
[#212 'ptr']: r#138
[#212 'sampler']: r#138
[#212 'sampler_comparison']: r#138
[#212 'texture_1d']: r#138
[#212 'texture_2d']: r#138
[#212 'texture_2d_array']: r#138
[#212 'texture_3d']: r#138
[#212 'texture_cube']: r#138
[#212 'texture_cube_array']: r#138
[#212 'texture_depth_2d']: r#138
[#212 'texture_depth_2d_array']: r#138
[#212 'texture_depth_cube']: r#138
[#212 'texture_depth_cube_array']: r#138
[#212 'texture_depth_multisampled_2d']: r#138
[#212 'texture_multisampled_2d']: r#138
[#212 'texture_storage_1d']: r#138
[#212 'texture_storage_2d']: r#138
[#212 'texture_storage_2d_array']: r#138
[#212 'texture_storage_3d']: r#138
[#212 'true']: r#138
[#212 'u32']: r#138
[#212 'vec2']: r#138
[#212 'vec3']: r#138
[#212 'vec4']: r#138
[#212 '~']: r#138
[#213 '!']: s#70
[#213 '&']: s#73
[#213 '(']: s#114
[#213 '*']: s#72
[#213 '-']: s#69
[#213 'array']: s#120
[#213 'bitcast']: s#78
[#213 'bool']: s#87
[#213 'f16']: s#116
[#213 'f32']: s#115
[#213 'false']: s#113
[#213 'i32']: s#117
[#213 'mat2x2']: s#98
[#213 'mat2x3']: s#99
[#213 'mat2x4']: s#100
[#213 'mat3x2']: s#101
[#213 'mat3x3']: s#102
[#213 'mat3x4']: s#103
[#213 'mat4x2']: s#104
[#213 'mat4x3']: s#105
[#213 'mat4x4']: s#106
[#213 'ptr']: s#119
[#213 'sampler']: s#134
[#213 'sampler_comparison']: s#135
[#213 'texture_1d']: s#141
[#213 'texture_2d']: s#142
[#213 'texture_2d_array']: s#143
[#213 'texture_3d']: s#144
[#213 'texture_cube']: s#145
[#213 'texture_cube_array']: s#146
[#213 'texture_depth_2d']: s#136
[#213 'texture_depth_2d_array']: s#137
[#213 'texture_depth_cube']: s#138
[#213 'texture_depth_cube_array']: s#139
[#213 'texture_depth_multisampled_2d']: s#140
[#213 'texture_multisampled_2d']: s#147
[#213 'texture_storage_1d']: s#148
[#213 'texture_storage_2d']: s#149
[#213 'texture_storage_2d_array']: s#150
[#213 'texture_storage_3d']: s#151
[#213 'true']: s#112
[#213 'u32']: s#118
[#213 'vec2']: s#95
[#213 'vec3']: s#96
[#213 'vec4']: s#97
[#213 '~']: s#71
[#213 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#213 /0[fh]/]: s#129
[#213 /0[iu]?/]: s#108
[#213 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#213 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#213 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#213 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#213 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#213 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#213 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#213 /[1-9][0-9]*[fh]/]: s#130
[#213 /[1-9][0-9]*[iu]?/]: s#109
[#214 '!']: s#70
[#214 '&']: s#73
[#214 '(']: s#114
[#214 '*']: s#72
[#214 '-']: s#69
[#214 'array']: s#120
[#214 'bitcast']: s#78
[#214 'bool']: s#87
[#214 'f16']: s#116
[#214 'f32']: s#115
[#214 'false']: s#113
[#214 'i32']: s#117
[#214 'mat2x2']: s#98
[#214 'mat2x3']: s#99
[#214 'mat2x4']: s#100
[#214 'mat3x2']: s#101
[#214 'mat3x3']: s#102
[#214 'mat3x4']: s#103
[#214 'mat4x2']: s#104
[#214 'mat4x3']: s#105
[#214 'mat4x4']: s#106
[#214 'ptr']: s#119
[#214 'sampler']: s#134
[#214 'sampler_comparison']: s#135
[#214 'texture_1d']: s#141
[#214 'texture_2d']: s#142
[#214 'texture_2d_array']: s#143
[#214 'texture_3d']: s#144
[#214 'texture_cube']: s#145
[#214 'texture_cube_array']: s#146
[#214 'texture_depth_2d']: s#136
[#214 'texture_depth_2d_array']: s#137
[#214 'texture_depth_cube']: s#138
[#214 'texture_depth_cube_array']: s#139
[#214 'texture_depth_multisampled_2d']: s#140
[#214 'texture_multisampled_2d']: s#147
[#214 'texture_storage_1d']: s#148
[#214 'texture_storage_2d']: s#149
[#214 'texture_storage_2d_array']: s#150
[#214 'texture_storage_3d']: s#151
[#214 'true']: s#112
[#214 'u32']: s#118
[#214 'vec2']: s#95
[#214 'vec3']: s#96
[#214 'vec4']: s#97
[#214 '~']: s#71
[#214 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#214 /0[fh]/]: s#129
[#214 /0[iu]?/]: s#108
[#214 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#214 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#214 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#214 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#214 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#214 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#214 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#214 /[1-9][0-9]*[fh]/]: s#130
[#214 /[1-9][0-9]*[iu]?/]: s#109
[#215 '!']: r#139
[#215 '&']: r#139
[#215 '(']: r#139
[#215 '*']: r#139
[#215 '-']: r#139
[#215 'array']: r#139
[#215 'bitcast']: r#139
[#215 'bool']: r#139
[#215 'f16']: r#139
[#215 'f32']: r#139
[#215 'false']: r#139
[#215 'i32']: r#139
[#215 'mat2x2']: r#139
[#215 'mat2x3']: r#139
[#215 'mat2x4']: r#139
[#215 'mat3x2']: r#139
[#215 'mat3x3']: r#139
[#215 'mat3x4']: r#139
[#215 'mat4x2']: r#139
[#215 'mat4x3']: r#139
[#215 'mat4x4']: r#139
[#215 'ptr']: r#139
[#215 'sampler']: r#139
[#215 'sampler_comparison']: r#139
[#215 'texture_1d']: r#139
[#215 'texture_2d']: r#139
[#215 'texture_2d_array']: r#139
[#215 'texture_3d']: r#139
[#215 'texture_cube']: r#139
[#215 'texture_cube_array']: r#139
[#215 'texture_depth_2d']: r#139
[#215 'texture_depth_2d_array']: r#139
[#215 'texture_depth_cube']: r#139
[#215 'texture_depth_cube_array']: r#139
[#215 'texture_depth_multisampled_2d']: r#139
[#215 'texture_multisampled_2d']: r#139
[#215 'texture_storage_1d']: r#139
[#215 'texture_storage_2d']: r#139
[#215 'texture_storage_2d_array']: r#139
[#215 'texture_storage_3d']: r#139
[#215 'true']: r#139
[#215 'u32']: r#139
[#215 'vec2']: r#139
[#215 'vec3']: r#139
[#215 'vec4']: r#139
[#215 '~']: r#139
[#216 '!']: r#140
[#216 '&']: r#140
[#216 '(']: r#140
[#216 '*']: r#140
[#216 '-']: r#140
[#216 'array']: r#140
[#216 'bitcast']: r#140
[#216 'bool']: r#140
[#216 'f16']: r#140
[#216 'f32']: r#140
[#216 'false']: r#140
[#216 'i32']: r#140
[#216 'mat2x2']: r#140
[#216 'mat2x3']: r#140
[#216 'mat2x4']: r#140
[#216 'mat3x2']: r#140
[#216 'mat3x3']: r#140
[#216 'mat3x4']: r#140
[#216 'mat4x2']: r#140
[#216 'mat4x3']: r#140
[#216 'mat4x4']: r#140
[#216 'ptr']: r#140
[#216 'sampler']: r#140
[#216 'sampler_comparison']: r#140
[#216 'texture_1d']: r#140
[#216 'texture_2d']: r#140
[#216 'texture_2d_array']: r#140
[#216 'texture_3d']: r#140
[#216 'texture_cube']: r#140
[#216 'texture_cube_array']: r#140
[#216 'texture_depth_2d']: r#140
[#216 'texture_depth_2d_array']: r#140
[#216 'texture_depth_cube']: r#140
[#216 'texture_depth_cube_array']: r#140
[#216 'texture_depth_multisampled_2d']: r#140
[#216 'texture_multisampled_2d']: r#140
[#216 'texture_storage_1d']: r#140
[#216 'texture_storage_2d']: r#140
[#216 'texture_storage_2d_array']: r#140
[#216 'texture_storage_3d']: r#140
[#216 'true']: r#140
[#216 'u32']: r#140
[#216 'vec2']: r#140
[#216 'vec3']: r#140
[#216 'vec4']: r#140
[#216 '~']: r#140
[#217 '!']: s#70
[#217 '&']: s#73
[#217 '(']: s#114
[#217 '*']: s#72
[#217 '-']: s#69
[#217 'array']: s#120
[#217 'bitcast']: s#78
[#217 'bool']: s#87
[#217 'f16']: s#116
[#217 'f32']: s#115
[#217 'false']: s#113
[#217 'i32']: s#117
[#217 'mat2x2']: s#98
[#217 'mat2x3']: s#99
[#217 'mat2x4']: s#100
[#217 'mat3x2']: s#101
[#217 'mat3x3']: s#102
[#217 'mat3x4']: s#103
[#217 'mat4x2']: s#104
[#217 'mat4x3']: s#105
[#217 'mat4x4']: s#106
[#217 'ptr']: s#119
[#217 'sampler']: s#134
[#217 'sampler_comparison']: s#135
[#217 'texture_1d']: s#141
[#217 'texture_2d']: s#142
[#217 'texture_2d_array']: s#143
[#217 'texture_3d']: s#144
[#217 'texture_cube']: s#145
[#217 'texture_cube_array']: s#146
[#217 'texture_depth_2d']: s#136
[#217 'texture_depth_2d_array']: s#137
[#217 'texture_depth_cube']: s#138
[#217 'texture_depth_cube_array']: s#139
[#217 'texture_depth_multisampled_2d']: s#140
[#217 'texture_multisampled_2d']: s#147
[#217 'texture_storage_1d']: s#148
[#217 'texture_storage_2d']: s#149
[#217 'texture_storage_2d_array']: s#150
[#217 'texture_storage_3d']: s#151
[#217 'true']: s#112
[#217 'u32']: s#118
[#217 'vec2']: s#95
[#217 'vec3']: s#96
[#217 'vec4']: s#97
[#217 '~']: s#71
[#217 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#217 /0[fh]/]: s#129
[#217 /0[iu]?/]: s#108
[#217 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#217 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#217 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#217 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#217 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#217 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#217 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#217 /[1-9][0-9]*[fh]/]: s#130
[#217 /[1-9][0-9]*[iu]?/]: s#109
[#218 '!']: s#70
[#218 '&']: s#73
[#218 '(']: s#114
[#218 '*']: s#72
[#218 '-']: s#69
[#218 'array']: s#120
[#218 'bitcast']: s#78
[#218 'bool']: s#87
[#218 'f16']: s#116
[#218 'f32']: s#115
[#218 'false']: s#113
[#218 'i32']: s#117
[#218 'mat2x2']: s#98
[#218 'mat2x3']: s#99
[#218 'mat2x4']: s#100
[#218 'mat3x2']: s#101
[#218 'mat3x3']: s#102
[#218 'mat3x4']: s#103
[#218 'mat4x2']: s#104
[#218 'mat4x3']: s#105
[#218 'mat4x4']: s#106
[#218 'ptr']: s#119
[#218 'sampler']: s#134
[#218 'sampler_comparison']: s#135
[#218 'texture_1d']: s#141
[#218 'texture_2d']: s#142
[#218 'texture_2d_array']: s#143
[#218 'texture_3d']: s#144
[#218 'texture_cube']: s#145
[#218 'texture_cube_array']: s#146
[#218 'texture_depth_2d']: s#136
[#218 'texture_depth_2d_array']: s#137
[#218 'texture_depth_cube']: s#138
[#218 'texture_depth_cube_array']: s#139
[#218 'texture_depth_multisampled_2d']: s#140
[#218 'texture_multisampled_2d']: s#147
[#218 'texture_storage_1d']: s#148
[#218 'texture_storage_2d']: s#149
[#218 'texture_storage_2d_array']: s#150
[#218 'texture_storage_3d']: s#151
[#218 'true']: s#112
[#218 'u32']: s#118
[#218 'vec2']: s#95
[#218 'vec3']: s#96
[#218 'vec4']: s#97
[#218 '~']: s#71
[#218 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#218 /0[fh]/]: s#129
[#218 /0[iu]?/]: s#108
[#218 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#218 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#218 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#218 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#218 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#218 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#218 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#218 /[1-9][0-9]*[fh]/]: s#130
[#218 /[1-9][0-9]*[iu]?/]: s#109
[#219 '!']: r#141
[#219 '&']: r#141
[#219 '(']: r#141
[#219 '*']: r#141
[#219 '-']: r#141
[#219 'array']: r#141
[#219 'bitcast']: r#141
[#219 'bool']: r#141
[#219 'f16']: r#141
[#219 'f32']: r#141
[#219 'false']: r#141
[#219 'i32']: r#141
[#219 'mat2x2']: r#141
[#219 'mat2x3']: r#141
[#219 'mat2x4']: r#141
[#219 'mat3x2']: r#141
[#219 'mat3x3']: r#141
[#219 'mat3x4']: r#141
[#219 'mat4x2']: r#141
[#219 'mat4x3']: r#141
[#219 'mat4x4']: r#141
[#219 'ptr']: r#141
[#219 'sampler']: r#141
[#219 'sampler_comparison']: r#141
[#219 'texture_1d']: r#141
[#219 'texture_2d']: r#141
[#219 'texture_2d_array']: r#141
[#219 'texture_3d']: r#141
[#219 'texture_cube']: r#141
[#219 'texture_cube_array']: r#141
[#219 'texture_depth_2d']: r#141
[#219 'texture_depth_2d_array']: r#141
[#219 'texture_depth_cube']: r#141
[#219 'texture_depth_cube_array']: r#141
[#219 'texture_depth_multisampled_2d']: r#141
[#219 'texture_multisampled_2d']: r#141
[#219 'texture_storage_1d']: r#141
[#219 'texture_storage_2d']: r#141
[#219 'texture_storage_2d_array']: r#141
[#219 'texture_storage_3d']: r#141
[#219 'true']: r#141
[#219 'u32']: r#141
[#219 'vec2']: r#141
[#219 'vec3']: r#141
[#219 'vec4']: r#141
[#219 '~']: r#141
[#220 '!']: s#70
[#220 '&']: s#73
[#220 '(']: s#114
[#220 '*']: s#72
[#220 '-']: s#69
[#220 'array']: s#120
[#220 'bitcast']: s#78
[#220 'bool']: s#87
[#220 'f16']: s#116
[#220 'f32']: s#115
[#220 'false']: s#113
[#220 'i32']: s#117
[#220 'mat2x2']: s#98
[#220 'mat2x3']: s#99
[#220 'mat2x4']: s#100
[#220 'mat3x2']: s#101
[#220 'mat3x3']: s#102
[#220 'mat3x4']: s#103
[#220 'mat4x2']: s#104
[#220 'mat4x3']: s#105
[#220 'mat4x4']: s#106
[#220 'ptr']: s#119
[#220 'sampler']: s#134
[#220 'sampler_comparison']: s#135
[#220 'texture_1d']: s#141
[#220 'texture_2d']: s#142
[#220 'texture_2d_array']: s#143
[#220 'texture_3d']: s#144
[#220 'texture_cube']: s#145
[#220 'texture_cube_array']: s#146
[#220 'texture_depth_2d']: s#136
[#220 'texture_depth_2d_array']: s#137
[#220 'texture_depth_cube']: s#138
[#220 'texture_depth_cube_array']: s#139
[#220 'texture_depth_multisampled_2d']: s#140
[#220 'texture_multisampled_2d']: s#147
[#220 'texture_storage_1d']: s#148
[#220 'texture_storage_2d']: s#149
[#220 'texture_storage_2d_array']: s#150
[#220 'texture_storage_3d']: s#151
[#220 'true']: s#112
[#220 'u32']: s#118
[#220 'vec2']: s#95
[#220 'vec3']: s#96
[#220 'vec4']: s#97
[#220 '~']: s#71
[#220 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#220 /0[fh]/]: s#129
[#220 /0[iu]?/]: s#108
[#220 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#220 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#220 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#220 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#220 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#220 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#220 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#220 /[1-9][0-9]*[fh]/]: s#130
[#220 /[1-9][0-9]*[iu]?/]: s#109
[#221 '!']: r#142
[#221 '&']: r#142
[#221 '(']: r#142
[#221 '*']: r#142
[#221 '-']: r#142
[#221 'array']: r#142
[#221 'bitcast']: r#142
[#221 'bool']: r#142
[#221 'f16']: r#142
[#221 'f32']: r#142
[#221 'false']: r#142
[#221 'i32']: r#142
[#221 'mat2x2']: r#142
[#221 'mat2x3']: r#142
[#221 'mat2x4']: r#142
[#221 'mat3x2']: r#142
[#221 'mat3x3']: r#142
[#221 'mat3x4']: r#142
[#221 'mat4x2']: r#142
[#221 'mat4x3']: r#142
[#221 'mat4x4']: r#142
[#221 'ptr']: r#142
[#221 'sampler']: r#142
[#221 'sampler_comparison']: r#142
[#221 'texture_1d']: r#142
[#221 'texture_2d']: r#142
[#221 'texture_2d_array']: r#142
[#221 'texture_3d']: r#142
[#221 'texture_cube']: r#142
[#221 'texture_cube_array']: r#142
[#221 'texture_depth_2d']: r#142
[#221 'texture_depth_2d_array']: r#142
[#221 'texture_depth_cube']: r#142
[#221 'texture_depth_cube_array']: r#142
[#221 'texture_depth_multisampled_2d']: r#142
[#221 'texture_multisampled_2d']: r#142
[#221 'texture_storage_1d']: r#142
[#221 'texture_storage_2d']: r#142
[#221 'texture_storage_2d_array']: r#142
[#221 'texture_storage_3d']: r#142
[#221 'true']: r#142
[#221 'u32']: r#142
[#221 'vec2']: r#142
[#221 'vec3']: r#142
[#221 'vec4']: r#142
[#221 '~']: r#142
[#222 '!']: s#70
[#222 '&']: s#73
[#222 '(']: s#114
[#222 '*']: s#72
[#222 '-']: s#69
[#222 'array']: s#120
[#222 'bitcast']: s#78
[#222 'bool']: s#87
[#222 'f16']: s#116
[#222 'f32']: s#115
[#222 'false']: s#113
[#222 'i32']: s#117
[#222 'mat2x2']: s#98
[#222 'mat2x3']: s#99
[#222 'mat2x4']: s#100
[#222 'mat3x2']: s#101
[#222 'mat3x3']: s#102
[#222 'mat3x4']: s#103
[#222 'mat4x2']: s#104
[#222 'mat4x3']: s#105
[#222 'mat4x4']: s#106
[#222 'ptr']: s#119
[#222 'sampler']: s#134
[#222 'sampler_comparison']: s#135
[#222 'texture_1d']: s#141
[#222 'texture_2d']: s#142
[#222 'texture_2d_array']: s#143
[#222 'texture_3d']: s#144
[#222 'texture_cube']: s#145
[#222 'texture_cube_array']: s#146
[#222 'texture_depth_2d']: s#136
[#222 'texture_depth_2d_array']: s#137
[#222 'texture_depth_cube']: s#138
[#222 'texture_depth_cube_array']: s#139
[#222 'texture_depth_multisampled_2d']: s#140
[#222 'texture_multisampled_2d']: s#147
[#222 'texture_storage_1d']: s#148
[#222 'texture_storage_2d']: s#149
[#222 'texture_storage_2d_array']: s#150
[#222 'texture_storage_3d']: s#151
[#222 'true']: s#112
[#222 'u32']: s#118
[#222 'vec2']: s#95
[#222 'vec3']: s#96
[#222 'vec4']: s#97
[#222 '~']: s#71
[#222 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#222 /0[fh]/]: s#129
[#222 /0[iu]?/]: s#108
[#222 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#222 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#222 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#222 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#222 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#222 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#222 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#222 /[1-9][0-9]*[fh]/]: s#130
[#222 /[1-9][0-9]*[iu]?/]: s#109
[#223 '!']: r#143
[#223 '&']: r#143
[#223 '(']: r#143
[#223 '*']: r#143
[#223 '-']: r#143
[#223 'array']: r#143
[#223 'bitcast']: r#143
[#223 'bool']: r#143
[#223 'f16']: r#143
[#223 'f32']: r#143
[#223 'false']: r#143
[#223 'i32']: r#143
[#223 'mat2x2']: r#143
[#223 'mat2x3']: r#143
[#223 'mat2x4']: r#143
[#223 'mat3x2']: r#143
[#223 'mat3x3']: r#143
[#223 'mat3x4']: r#143
[#223 'mat4x2']: r#143
[#223 'mat4x3']: r#143
[#223 'mat4x4']: r#143
[#223 'ptr']: r#143
[#223 'sampler']: r#143
[#223 'sampler_comparison']: r#143
[#223 'texture_1d']: r#143
[#223 'texture_2d']: r#143
[#223 'texture_2d_array']: r#143
[#223 'texture_3d']: r#143
[#223 'texture_cube']: r#143
[#223 'texture_cube_array']: r#143
[#223 'texture_depth_2d']: r#143
[#223 'texture_depth_2d_array']: r#143
[#223 'texture_depth_cube']: r#143
[#223 'texture_depth_cube_array']: r#143
[#223 'texture_depth_multisampled_2d']: r#143
[#223 'texture_multisampled_2d']: r#143
[#223 'texture_storage_1d']: r#143
[#223 'texture_storage_2d']: r#143
[#223 'texture_storage_2d_array']: r#143
[#223 'texture_storage_3d']: r#143
[#223 'true']: r#143
[#223 'u32']: r#143
[#223 'vec2']: r#143
[#223 'vec3']: r#143
[#223 'vec4']: r#143
[#223 '~']: r#143
[#224 '!']: s#70
[#224 '&']: s#73
[#224 '(']: s#114
[#224 '*']: s#72
[#224 '-']: s#69
[#224 'array']: s#120
[#224 'bitcast']: s#78
[#224 'bool']: s#87
[#224 'f16']: s#116
[#224 'f32']: s#115
[#224 'false']: s#113
[#224 'i32']: s#117
[#224 'mat2x2']: s#98
[#224 'mat2x3']: s#99
[#224 'mat2x4']: s#100
[#224 'mat3x2']: s#101
[#224 'mat3x3']: s#102
[#224 'mat3x4']: s#103
[#224 'mat4x2']: s#104
[#224 'mat4x3']: s#105
[#224 'mat4x4']: s#106
[#224 'ptr']: s#119
[#224 'sampler']: s#134
[#224 'sampler_comparison']: s#135
[#224 'texture_1d']: s#141
[#224 'texture_2d']: s#142
[#224 'texture_2d_array']: s#143
[#224 'texture_3d']: s#144
[#224 'texture_cube']: s#145
[#224 'texture_cube_array']: s#146
[#224 'texture_depth_2d']: s#136
[#224 'texture_depth_2d_array']: s#137
[#224 'texture_depth_cube']: s#138
[#224 'texture_depth_cube_array']: s#139
[#224 'texture_depth_multisampled_2d']: s#140
[#224 'texture_multisampled_2d']: s#147
[#224 'texture_storage_1d']: s#148
[#224 'texture_storage_2d']: s#149
[#224 'texture_storage_2d_array']: s#150
[#224 'texture_storage_3d']: s#151
[#224 'true']: s#112
[#224 'u32']: s#118
[#224 'vec2']: s#95
[#224 'vec3']: s#96
[#224 'vec4']: s#97
[#224 '~']: s#71
[#224 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#224 /0[fh]/]: s#129
[#224 /0[iu]?/]: s#108
[#224 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#224 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#224 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#224 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#224 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#224 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#224 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#224 /[1-9][0-9]*[fh]/]: s#130
[#224 /[1-9][0-9]*[iu]?/]: s#109
[#225 '!']: s#70
[#225 '&']: s#73
[#225 '(']: s#114
[#225 '*']: s#72
[#225 '-']: s#69
[#225 'array']: s#120
[#225 'bitcast']: s#78
[#225 'bool']: s#87
[#225 'f16']: s#116
[#225 'f32']: s#115
[#225 'false']: s#113
[#225 'i32']: s#117
[#225 'mat2x2']: s#98
[#225 'mat2x3']: s#99
[#225 'mat2x4']: s#100
[#225 'mat3x2']: s#101
[#225 'mat3x3']: s#102
[#225 'mat3x4']: s#103
[#225 'mat4x2']: s#104
[#225 'mat4x3']: s#105
[#225 'mat4x4']: s#106
[#225 'ptr']: s#119
[#225 'sampler']: s#134
[#225 'sampler_comparison']: s#135
[#225 'texture_1d']: s#141
[#225 'texture_2d']: s#142
[#225 'texture_2d_array']: s#143
[#225 'texture_3d']: s#144
[#225 'texture_cube']: s#145
[#225 'texture_cube_array']: s#146
[#225 'texture_depth_2d']: s#136
[#225 'texture_depth_2d_array']: s#137
[#225 'texture_depth_cube']: s#138
[#225 'texture_depth_cube_array']: s#139
[#225 'texture_depth_multisampled_2d']: s#140
[#225 'texture_multisampled_2d']: s#147
[#225 'texture_storage_1d']: s#148
[#225 'texture_storage_2d']: s#149
[#225 'texture_storage_2d_array']: s#150
[#225 'texture_storage_3d']: s#151
[#225 'true']: s#112
[#225 'u32']: s#118
[#225 'vec2']: s#95
[#225 'vec3']: s#96
[#225 'vec4']: s#97
[#225 '~']: s#71
[#225 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#225 /0[fh]/]: s#129
[#225 /0[iu]?/]: s#108
[#225 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#225 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#225 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#225 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#225 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#225 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#225 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#225 /[1-9][0-9]*[fh]/]: s#130
[#225 /[1-9][0-9]*[iu]?/]: s#109
[#226 '!']: s#70
[#226 '&']: s#73
[#226 '(']: s#114
[#226 '*']: s#72
[#226 '-']: s#69
[#226 'array']: s#120
[#226 'bitcast']: s#78
[#226 'bool']: s#87
[#226 'f16']: s#116
[#226 'f32']: s#115
[#226 'false']: s#113
[#226 'i32']: s#117
[#226 'mat2x2']: s#98
[#226 'mat2x3']: s#99
[#226 'mat2x4']: s#100
[#226 'mat3x2']: s#101
[#226 'mat3x3']: s#102
[#226 'mat3x4']: s#103
[#226 'mat4x2']: s#104
[#226 'mat4x3']: s#105
[#226 'mat4x4']: s#106
[#226 'ptr']: s#119
[#226 'sampler']: s#134
[#226 'sampler_comparison']: s#135
[#226 'texture_1d']: s#141
[#226 'texture_2d']: s#142
[#226 'texture_2d_array']: s#143
[#226 'texture_3d']: s#144
[#226 'texture_cube']: s#145
[#226 'texture_cube_array']: s#146
[#226 'texture_depth_2d']: s#136
[#226 'texture_depth_2d_array']: s#137
[#226 'texture_depth_cube']: s#138
[#226 'texture_depth_cube_array']: s#139
[#226 'texture_depth_multisampled_2d']: s#140
[#226 'texture_multisampled_2d']: s#147
[#226 'texture_storage_1d']: s#148
[#226 'texture_storage_2d']: s#149
[#226 'texture_storage_2d_array']: s#150
[#226 'texture_storage_3d']: s#151
[#226 'true']: s#112
[#226 'u32']: s#118
[#226 'vec2']: s#95
[#226 'vec3']: s#96
[#226 'vec4']: s#97
[#226 '~']: s#71
[#226 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#226 /0[fh]/]: s#129
[#226 /0[iu]?/]: s#108
[#226 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#226 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#226 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#226 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#226 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#226 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#226 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#226 /[1-9][0-9]*[fh]/]: s#130
[#226 /[1-9][0-9]*[iu]?/]: s#109
[#227 '!']: s#70
[#227 '&']: s#73
[#227 '(']: s#114
[#227 '*']: s#72
[#227 '-']: s#69
[#227 'array']: s#120
[#227 'bitcast']: s#78
[#227 'bool']: s#87
[#227 'f16']: s#116
[#227 'f32']: s#115
[#227 'false']: s#113
[#227 'i32']: s#117
[#227 'mat2x2']: s#98
[#227 'mat2x3']: s#99
[#227 'mat2x4']: s#100
[#227 'mat3x2']: s#101
[#227 'mat3x3']: s#102
[#227 'mat3x4']: s#103
[#227 'mat4x2']: s#104
[#227 'mat4x3']: s#105
[#227 'mat4x4']: s#106
[#227 'ptr']: s#119
[#227 'sampler']: s#134
[#227 'sampler_comparison']: s#135
[#227 'texture_1d']: s#141
[#227 'texture_2d']: s#142
[#227 'texture_2d_array']: s#143
[#227 'texture_3d']: s#144
[#227 'texture_cube']: s#145
[#227 'texture_cube_array']: s#146
[#227 'texture_depth_2d']: s#136
[#227 'texture_depth_2d_array']: s#137
[#227 'texture_depth_cube']: s#138
[#227 'texture_depth_cube_array']: s#139
[#227 'texture_depth_multisampled_2d']: s#140
[#227 'texture_multisampled_2d']: s#147
[#227 'texture_storage_1d']: s#148
[#227 'texture_storage_2d']: s#149
[#227 'texture_storage_2d_array']: s#150
[#227 'texture_storage_3d']: s#151
[#227 'true']: s#112
[#227 'u32']: s#118
[#227 'vec2']: s#95
[#227 'vec3']: s#96
[#227 'vec4']: s#97
[#227 '~']: s#71
[#227 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#227 /0[fh]/]: s#129
[#227 /0[iu]?/]: s#108
[#227 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#227 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#227 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#227 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#227 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#227 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#227 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#227 /[1-9][0-9]*[fh]/]: s#130
[#227 /[1-9][0-9]*[iu]?/]: s#109
[#228 '!']: s#70
[#228 '&']: s#73
[#228 '(']: s#114
[#228 '*']: s#72
[#228 '-']: s#69
[#228 'array']: s#120
[#228 'bitcast']: s#78
[#228 'bool']: s#87
[#228 'f16']: s#116
[#228 'f32']: s#115
[#228 'false']: s#113
[#228 'i32']: s#117
[#228 'mat2x2']: s#98
[#228 'mat2x3']: s#99
[#228 'mat2x4']: s#100
[#228 'mat3x2']: s#101
[#228 'mat3x3']: s#102
[#228 'mat3x4']: s#103
[#228 'mat4x2']: s#104
[#228 'mat4x3']: s#105
[#228 'mat4x4']: s#106
[#228 'ptr']: s#119
[#228 'sampler']: s#134
[#228 'sampler_comparison']: s#135
[#228 'texture_1d']: s#141
[#228 'texture_2d']: s#142
[#228 'texture_2d_array']: s#143
[#228 'texture_3d']: s#144
[#228 'texture_cube']: s#145
[#228 'texture_cube_array']: s#146
[#228 'texture_depth_2d']: s#136
[#228 'texture_depth_2d_array']: s#137
[#228 'texture_depth_cube']: s#138
[#228 'texture_depth_cube_array']: s#139
[#228 'texture_depth_multisampled_2d']: s#140
[#228 'texture_multisampled_2d']: s#147
[#228 'texture_storage_1d']: s#148
[#228 'texture_storage_2d']: s#149
[#228 'texture_storage_2d_array']: s#150
[#228 'texture_storage_3d']: s#151
[#228 'true']: s#112
[#228 'u32']: s#118
[#228 'vec2']: s#95
[#228 'vec3']: s#96
[#228 'vec4']: s#97
[#228 '~']: s#71
[#228 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#228 /0[fh]/]: s#129
[#228 /0[iu]?/]: s#108
[#228 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#228 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#228 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#228 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#228 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#228 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#228 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#228 /[1-9][0-9]*[fh]/]: s#130
[#228 /[1-9][0-9]*[iu]?/]: s#109
[#229 '!']: s#70
[#229 '&']: s#73
[#229 '(']: s#114
[#229 '*']: s#72
[#229 '-']: s#69
[#229 'array']: s#120
[#229 'bitcast']: s#78
[#229 'bool']: s#87
[#229 'f16']: s#116
[#229 'f32']: s#115
[#229 'false']: s#113
[#229 'i32']: s#117
[#229 'mat2x2']: s#98
[#229 'mat2x3']: s#99
[#229 'mat2x4']: s#100
[#229 'mat3x2']: s#101
[#229 'mat3x3']: s#102
[#229 'mat3x4']: s#103
[#229 'mat4x2']: s#104
[#229 'mat4x3']: s#105
[#229 'mat4x4']: s#106
[#229 'ptr']: s#119
[#229 'sampler']: s#134
[#229 'sampler_comparison']: s#135
[#229 'texture_1d']: s#141
[#229 'texture_2d']: s#142
[#229 'texture_2d_array']: s#143
[#229 'texture_3d']: s#144
[#229 'texture_cube']: s#145
[#229 'texture_cube_array']: s#146
[#229 'texture_depth_2d']: s#136
[#229 'texture_depth_2d_array']: s#137
[#229 'texture_depth_cube']: s#138
[#229 'texture_depth_cube_array']: s#139
[#229 'texture_depth_multisampled_2d']: s#140
[#229 'texture_multisampled_2d']: s#147
[#229 'texture_storage_1d']: s#148
[#229 'texture_storage_2d']: s#149
[#229 'texture_storage_2d_array']: s#150
[#229 'texture_storage_3d']: s#151
[#229 'true']: s#112
[#229 'u32']: s#118
[#229 'vec2']: s#95
[#229 'vec3']: s#96
[#229 'vec4']: s#97
[#229 '~']: s#71
[#229 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#229 /0[fh]/]: s#129
[#229 /0[iu]?/]: s#108
[#229 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#229 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#229 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#229 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#229 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#229 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#229 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#229 /[1-9][0-9]*[fh]/]: s#130
[#229 /[1-9][0-9]*[iu]?/]: s#109
[#230 '!']: s#70
[#230 '&']: s#73
[#230 '(']: s#114
[#230 '*']: s#72
[#230 '-']: s#69
[#230 'array']: s#120
[#230 'bitcast']: s#78
[#230 'bool']: s#87
[#230 'f16']: s#116
[#230 'f32']: s#115
[#230 'false']: s#113
[#230 'i32']: s#117
[#230 'mat2x2']: s#98
[#230 'mat2x3']: s#99
[#230 'mat2x4']: s#100
[#230 'mat3x2']: s#101
[#230 'mat3x3']: s#102
[#230 'mat3x4']: s#103
[#230 'mat4x2']: s#104
[#230 'mat4x3']: s#105
[#230 'mat4x4']: s#106
[#230 'ptr']: s#119
[#230 'sampler']: s#134
[#230 'sampler_comparison']: s#135
[#230 'texture_1d']: s#141
[#230 'texture_2d']: s#142
[#230 'texture_2d_array']: s#143
[#230 'texture_3d']: s#144
[#230 'texture_cube']: s#145
[#230 'texture_cube_array']: s#146
[#230 'texture_depth_2d']: s#136
[#230 'texture_depth_2d_array']: s#137
[#230 'texture_depth_cube']: s#138
[#230 'texture_depth_cube_array']: s#139
[#230 'texture_depth_multisampled_2d']: s#140
[#230 'texture_multisampled_2d']: s#147
[#230 'texture_storage_1d']: s#148
[#230 'texture_storage_2d']: s#149
[#230 'texture_storage_2d_array']: s#150
[#230 'texture_storage_3d']: s#151
[#230 'true']: s#112
[#230 'u32']: s#118
[#230 'vec2']: s#95
[#230 'vec3']: s#96
[#230 'vec4']: s#97
[#230 '~']: s#71
[#230 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#230 /0[fh]/]: s#129
[#230 /0[iu]?/]: s#108
[#230 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#230 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#230 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#230 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#230 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#230 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#230 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#230 /[1-9][0-9]*[fh]/]: s#130
[#230 /[1-9][0-9]*[iu]?/]: s#109
[#231 '!']: r#144
[#231 '&']: r#144
[#231 '(']: r#144
[#231 ')']: r#144
[#231 '*']: r#144
[#231 ',']: r#144
[#231 '-']: r#144
[#231 ';']: r#144
[#231 '=']: r#144
[#231 '>']: r#144
[#231 'array']: r#144
[#231 'bitcast']: r#144
[#231 'bool']: r#144
[#231 'f16']: r#144
[#231 'f32']: r#144
[#231 'false']: r#144
[#231 'i32']: r#144
[#231 'mat2x2']: r#144
[#231 'mat2x3']: r#144
[#231 'mat2x4']: r#144
[#231 'mat3x2']: r#144
[#231 'mat3x3']: r#144
[#231 'mat3x4']: r#144
[#231 'mat4x2']: r#144
[#231 'mat4x3']: r#144
[#231 'mat4x4']: r#144
[#231 'ptr']: r#144
[#231 'sampler']: r#144
[#231 'sampler_comparison']: r#144
[#231 'texture_1d']: r#144
[#231 'texture_2d']: r#144
[#231 'texture_2d_array']: r#144
[#231 'texture_3d']: r#144
[#231 'texture_cube']: r#144
[#231 'texture_cube_array']: r#144
[#231 'texture_depth_2d']: r#144
[#231 'texture_depth_2d_array']: r#144
[#231 'texture_depth_cube']: r#144
[#231 'texture_depth_cube_array']: r#144
[#231 'texture_depth_multisampled_2d']: r#144
[#231 'texture_multisampled_2d']: r#144
[#231 'texture_storage_1d']: r#144
[#231 'texture_storage_2d']: r#144
[#231 'texture_storage_2d_array']: r#144
[#231 'texture_storage_3d']: r#144
[#231 'true']: r#144
[#231 'u32']: r#144
[#231 'vec2']: r#144
[#231 'vec3']: r#144
[#231 'vec4']: r#144
[#231 '{']: r#144
[#231 '}']: r#144
[#231 '~']: r#144
[#231 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#144
[#232 '!']: r#145
[#232 '&']: r#145
[#232 '(']: r#145
[#232 '*']: r#145
[#232 '-']: r#145
[#232 'array']: r#145
[#232 'bitcast']: r#145
[#232 'bool']: r#145
[#232 'f16']: r#145
[#232 'f32']: r#145
[#232 'false']: r#145
[#232 'i32']: r#145
[#232 'mat2x2']: r#145
[#232 'mat2x3']: r#145
[#232 'mat2x4']: r#145
[#232 'mat3x2']: r#145
[#232 'mat3x3']: r#145
[#232 'mat3x4']: r#145
[#232 'mat4x2']: r#145
[#232 'mat4x3']: r#145
[#232 'mat4x4']: r#145
[#232 'ptr']: r#145
[#232 'sampler']: r#145
[#232 'sampler_comparison']: r#145
[#232 'texture_1d']: r#145
[#232 'texture_2d']: r#145
[#232 'texture_2d_array']: r#145
[#232 'texture_3d']: r#145
[#232 'texture_cube']: r#145
[#232 'texture_cube_array']: r#145
[#232 'texture_depth_2d']: r#145
[#232 'texture_depth_2d_array']: r#145
[#232 'texture_depth_cube']: r#145
[#232 'texture_depth_cube_array']: r#145
[#232 'texture_depth_multisampled_2d']: r#145
[#232 'texture_multisampled_2d']: r#145
[#232 'texture_storage_1d']: r#145
[#232 'texture_storage_2d']: r#145
[#232 'texture_storage_2d_array']: r#145
[#232 'texture_storage_3d']: r#145
[#232 'true']: r#145
[#232 'u32']: r#145
[#232 'vec2']: r#145
[#232 'vec3']: r#145
[#232 'vec4']: r#145
[#232 '~']: r#145
[#233 '!']: r#146
[#233 '&']: r#146
[#233 '(']: r#146
[#233 '*']: r#146
[#233 '-']: r#146
[#233 'array']: r#146
[#233 'bitcast']: r#146
[#233 'bool']: r#146
[#233 'f16']: r#146
[#233 'f32']: r#146
[#233 'false']: r#146
[#233 'i32']: r#146
[#233 'mat2x2']: r#146
[#233 'mat2x3']: r#146
[#233 'mat2x4']: r#146
[#233 'mat3x2']: r#146
[#233 'mat3x3']: r#146
[#233 'mat3x4']: r#146
[#233 'mat4x2']: r#146
[#233 'mat4x3']: r#146
[#233 'mat4x4']: r#146
[#233 'ptr']: r#146
[#233 'sampler']: r#146
[#233 'sampler_comparison']: r#146
[#233 'texture_1d']: r#146
[#233 'texture_2d']: r#146
[#233 'texture_2d_array']: r#146
[#233 'texture_3d']: r#146
[#233 'texture_cube']: r#146
[#233 'texture_cube_array']: r#146
[#233 'texture_depth_2d']: r#146
[#233 'texture_depth_2d_array']: r#146
[#233 'texture_depth_cube']: r#146
[#233 'texture_depth_cube_array']: r#146
[#233 'texture_depth_multisampled_2d']: r#146
[#233 'texture_multisampled_2d']: r#146
[#233 'texture_storage_1d']: r#146
[#233 'texture_storage_2d']: r#146
[#233 'texture_storage_2d_array']: r#146
[#233 'texture_storage_3d']: r#146
[#233 'true']: r#146
[#233 'u32']: r#146
[#233 'vec2']: r#146
[#233 'vec3']: r#146
[#233 'vec4']: r#146
[#233 '~']: r#146
[#234 '!']: r#147
[#234 '&']: r#147
[#234 '(']: r#147
[#234 '*']: r#147
[#234 '-']: r#147
[#234 'array']: r#147
[#234 'bitcast']: r#147
[#234 'bool']: r#147
[#234 'f16']: r#147
[#234 'f32']: r#147
[#234 'false']: r#147
[#234 'i32']: r#147
[#234 'mat2x2']: r#147
[#234 'mat2x3']: r#147
[#234 'mat2x4']: r#147
[#234 'mat3x2']: r#147
[#234 'mat3x3']: r#147
[#234 'mat3x4']: r#147
[#234 'mat4x2']: r#147
[#234 'mat4x3']: r#147
[#234 'mat4x4']: r#147
[#234 'ptr']: r#147
[#234 'sampler']: r#147
[#234 'sampler_comparison']: r#147
[#234 'texture_1d']: r#147
[#234 'texture_2d']: r#147
[#234 'texture_2d_array']: r#147
[#234 'texture_3d']: r#147
[#234 'texture_cube']: r#147
[#234 'texture_cube_array']: r#147
[#234 'texture_depth_2d']: r#147
[#234 'texture_depth_2d_array']: r#147
[#234 'texture_depth_cube']: r#147
[#234 'texture_depth_cube_array']: r#147
[#234 'texture_depth_multisampled_2d']: r#147
[#234 'texture_multisampled_2d']: r#147
[#234 'texture_storage_1d']: r#147
[#234 'texture_storage_2d']: r#147
[#234 'texture_storage_2d_array']: r#147
[#234 'texture_storage_3d']: r#147
[#234 'true']: r#147
[#234 'u32']: r#147
[#234 'vec2']: r#147
[#234 'vec3']: r#147
[#234 'vec4']: r#147
[#234 '~']: r#147
[#235 '!']: r#148
[#235 '&']: r#148
[#235 '(']: r#148
[#235 '*']: r#148
[#235 '-']: r#148
[#235 'array']: r#148
[#235 'bitcast']: r#148
[#235 'bool']: r#148
[#235 'f16']: r#148
[#235 'f32']: r#148
[#235 'false']: r#148
[#235 'i32']: r#148
[#235 'mat2x2']: r#148
[#235 'mat2x3']: r#148
[#235 'mat2x4']: r#148
[#235 'mat3x2']: r#148
[#235 'mat3x3']: r#148
[#235 'mat3x4']: r#148
[#235 'mat4x2']: r#148
[#235 'mat4x3']: r#148
[#235 'mat4x4']: r#148
[#235 'ptr']: r#148
[#235 'sampler']: r#148
[#235 'sampler_comparison']: r#148
[#235 'texture_1d']: r#148
[#235 'texture_2d']: r#148
[#235 'texture_2d_array']: r#148
[#235 'texture_3d']: r#148
[#235 'texture_cube']: r#148
[#235 'texture_cube_array']: r#148
[#235 'texture_depth_2d']: r#148
[#235 'texture_depth_2d_array']: r#148
[#235 'texture_depth_cube']: r#148
[#235 'texture_depth_cube_array']: r#148
[#235 'texture_depth_multisampled_2d']: r#148
[#235 'texture_multisampled_2d']: r#148
[#235 'texture_storage_1d']: r#148
[#235 'texture_storage_2d']: r#148
[#235 'texture_storage_2d_array']: r#148
[#235 'texture_storage_3d']: r#148
[#235 'true']: r#148
[#235 'u32']: r#148
[#235 'vec2']: r#148
[#235 'vec3']: r#148
[#235 'vec4']: r#148
[#235 '~']: r#148
[#236 '!']: s#70
[#236 '&']: s#73
[#236 '(']: s#114
[#236 '*']: s#72
[#236 '-']: s#69
[#236 'array']: s#120
[#236 'bitcast']: s#78
[#236 'bool']: s#87
[#236 'f16']: s#116
[#236 'f32']: s#115
[#236 'false']: s#113
[#236 'i32']: s#117
[#236 'mat2x2']: s#98
[#236 'mat2x3']: s#99
[#236 'mat2x4']: s#100
[#236 'mat3x2']: s#101
[#236 'mat3x3']: s#102
[#236 'mat3x4']: s#103
[#236 'mat4x2']: s#104
[#236 'mat4x3']: s#105
[#236 'mat4x4']: s#106
[#236 'ptr']: s#119
[#236 'sampler']: s#134
[#236 'sampler_comparison']: s#135
[#236 'texture_1d']: s#141
[#236 'texture_2d']: s#142
[#236 'texture_2d_array']: s#143
[#236 'texture_3d']: s#144
[#236 'texture_cube']: s#145
[#236 'texture_cube_array']: s#146
[#236 'texture_depth_2d']: s#136
[#236 'texture_depth_2d_array']: s#137
[#236 'texture_depth_cube']: s#138
[#236 'texture_depth_cube_array']: s#139
[#236 'texture_depth_multisampled_2d']: s#140
[#236 'texture_multisampled_2d']: s#147
[#236 'texture_storage_1d']: s#148
[#236 'texture_storage_2d']: s#149
[#236 'texture_storage_2d_array']: s#150
[#236 'texture_storage_3d']: s#151
[#236 'true']: s#112
[#236 'u32']: s#118
[#236 'vec2']: s#95
[#236 'vec3']: s#96
[#236 'vec4']: s#97
[#236 '~']: s#71
[#236 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#236 /0[fh]/]: s#129
[#236 /0[iu]?/]: s#108
[#236 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#236 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#236 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#236 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#236 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#236 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#236 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#236 /[1-9][0-9]*[fh]/]: s#130
[#236 /[1-9][0-9]*[iu]?/]: s#109
[#237 '!']: r#149
[#237 '&']: r#149
[#237 '(']: r#149
[#237 '*']: r#149
[#237 '-']: r#149
[#237 'array']: r#149
[#237 'bitcast']: r#149
[#237 'bool']: r#149
[#237 'f16']: r#149
[#237 'f32']: r#149
[#237 'false']: r#149
[#237 'i32']: r#149
[#237 'mat2x2']: r#149
[#237 'mat2x3']: r#149
[#237 'mat2x4']: r#149
[#237 'mat3x2']: r#149
[#237 'mat3x3']: r#149
[#237 'mat3x4']: r#149
[#237 'mat4x2']: r#149
[#237 'mat4x3']: r#149
[#237 'mat4x4']: r#149
[#237 'ptr']: r#149
[#237 'sampler']: r#149
[#237 'sampler_comparison']: r#149
[#237 'texture_1d']: r#149
[#237 'texture_2d']: r#149
[#237 'texture_2d_array']: r#149
[#237 'texture_3d']: r#149
[#237 'texture_cube']: r#149
[#237 'texture_cube_array']: r#149
[#237 'texture_depth_2d']: r#149
[#237 'texture_depth_2d_array']: r#149
[#237 'texture_depth_cube']: r#149
[#237 'texture_depth_cube_array']: r#149
[#237 'texture_depth_multisampled_2d']: r#149
[#237 'texture_multisampled_2d']: r#149
[#237 'texture_storage_1d']: r#149
[#237 'texture_storage_2d']: r#149
[#237 'texture_storage_2d_array']: r#149
[#237 'texture_storage_3d']: r#149
[#237 'true']: r#149
[#237 'u32']: r#149
[#237 'vec2']: r#149
[#237 'vec3']: r#149
[#237 'vec4']: r#149
[#237 '~']: r#149
[#238 '!']: s#70
[#238 '&']: s#73
[#238 '(']: s#114
[#238 '*']: s#72
[#238 '-']: s#69
[#238 'array']: s#120
[#238 'bitcast']: s#78
[#238 'bool']: s#87
[#238 'f16']: s#116
[#238 'f32']: s#115
[#238 'false']: s#113
[#238 'i32']: s#117
[#238 'mat2x2']: s#98
[#238 'mat2x3']: s#99
[#238 'mat2x4']: s#100
[#238 'mat3x2']: s#101
[#238 'mat3x3']: s#102
[#238 'mat3x4']: s#103
[#238 'mat4x2']: s#104
[#238 'mat4x3']: s#105
[#238 'mat4x4']: s#106
[#238 'ptr']: s#119
[#238 'sampler']: s#134
[#238 'sampler_comparison']: s#135
[#238 'texture_1d']: s#141
[#238 'texture_2d']: s#142
[#238 'texture_2d_array']: s#143
[#238 'texture_3d']: s#144
[#238 'texture_cube']: s#145
[#238 'texture_cube_array']: s#146
[#238 'texture_depth_2d']: s#136
[#238 'texture_depth_2d_array']: s#137
[#238 'texture_depth_cube']: s#138
[#238 'texture_depth_cube_array']: s#139
[#238 'texture_depth_multisampled_2d']: s#140
[#238 'texture_multisampled_2d']: s#147
[#238 'texture_storage_1d']: s#148
[#238 'texture_storage_2d']: s#149
[#238 'texture_storage_2d_array']: s#150
[#238 'texture_storage_3d']: s#151
[#238 'true']: s#112
[#238 'u32']: s#118
[#238 'vec2']: s#95
[#238 'vec3']: s#96
[#238 'vec4']: s#97
[#238 '~']: s#71
[#238 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#238 /0[fh]/]: s#129
[#238 /0[iu]?/]: s#108
[#238 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#238 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#238 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#238 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#238 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#238 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#238 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#238 /[1-9][0-9]*[fh]/]: s#130
[#238 /[1-9][0-9]*[iu]?/]: s#109
[#239 '!']: r#150
[#239 '&']: r#150
[#239 '(']: r#150
[#239 '*']: r#150
[#239 '-']: r#150
[#239 'array']: r#150
[#239 'bitcast']: r#150
[#239 'bool']: r#150
[#239 'f16']: r#150
[#239 'f32']: r#150
[#239 'false']: r#150
[#239 'i32']: r#150
[#239 'mat2x2']: r#150
[#239 'mat2x3']: r#150
[#239 'mat2x4']: r#150
[#239 'mat3x2']: r#150
[#239 'mat3x3']: r#150
[#239 'mat3x4']: r#150
[#239 'mat4x2']: r#150
[#239 'mat4x3']: r#150
[#239 'mat4x4']: r#150
[#239 'ptr']: r#150
[#239 'sampler']: r#150
[#239 'sampler_comparison']: r#150
[#239 'texture_1d']: r#150
[#239 'texture_2d']: r#150
[#239 'texture_2d_array']: r#150
[#239 'texture_3d']: r#150
[#239 'texture_cube']: r#150
[#239 'texture_cube_array']: r#150
[#239 'texture_depth_2d']: r#150
[#239 'texture_depth_2d_array']: r#150
[#239 'texture_depth_cube']: r#150
[#239 'texture_depth_cube_array']: r#150
[#239 'texture_depth_multisampled_2d']: r#150
[#239 'texture_multisampled_2d']: r#150
[#239 'texture_storage_1d']: r#150
[#239 'texture_storage_2d']: r#150
[#239 'texture_storage_2d_array']: r#150
[#239 'texture_storage_3d']: r#150
[#239 'true']: r#150
[#239 'u32']: r#150
[#239 'vec2']: r#150
[#239 'vec3']: r#150
[#239 'vec4']: r#150
[#239 '~']: r#150
[#240 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#240 /0[iu]?/]: s#108
[#240 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#240 /[1-9][0-9]*[iu]?/]: s#109
[#241 /0[iu]?/]: s#108
[#241 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#241 /[1-9][0-9]*[iu]?/]: s#109
[#242 /0[iu]?/]: s#108
[#242 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#242 /[1-9][0-9]*[iu]?/]: s#109
[#243 'flat']: s#269
[#243 'linear']: s#268
[#243 'perspective']: s#267
[#244 /0[iu]?/]: s#108
[#244 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#244 /[1-9][0-9]*[iu]?/]: s#109
[#245 /0[iu]?/]: s#108
[#245 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#245 /[1-9][0-9]*[iu]?/]: s#109
[#246 'frag_depth']: s#256
[#246 'front_facing']: s#255
[#246 'global_invocation_id']: s#259
[#246 'instance_index']: s#253
[#246 'local_invocation_id']: s#257
[#246 'local_invocation_index']: s#258
[#246 'num_workgroups']: s#261
[#246 'position']: s#254
[#246 'sample_index']: s#262
[#246 'sample_mask']: s#263
[#246 'vertex_index']: s#252
[#246 'workgroup_id']: s#260
[#247 /0[iu]?/]: s#108
[#247 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#247 /[1-9][0-9]*[iu]?/]: s#109
[#248 /0[iu]?/]: s#108
[#248 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#248 /[1-9][0-9]*[iu]?/]: s#109
[#249 ',']: s#401
[#250 ',']: s#401
[#251 ',']: s#401
[#252 ')']: r#151
[#252 ',']: r#151
[#253 ')']: r#152
[#253 ',']: r#152
[#254 ')']: r#153
[#254 ',']: r#153
[#255 ')']: r#154
[#255 ',']: r#154
[#256 ')']: r#155
[#256 ',']: r#155
[#257 ')']: r#156
[#257 ',']: r#156
[#258 ')']: r#157
[#258 ',']: r#157
[#259 ')']: r#158
[#259 ',']: r#158
[#260 ')']: r#159
[#260 ',']: r#159
[#261 ')']: r#160
[#261 ',']: r#160
[#262 ')']: r#161
[#262 ',']: r#161
[#263 ')']: r#162
[#263 ',']: r#162
[#264 ',']: s#401
[#265 ',']: s#401
[#266 ',']: s#401
[#267 ')']: r#163
[#267 ',']: r#163
[#268 ')']: r#164
[#268 ',']: r#164
[#269 ')']: r#165
[#269 ',']: r#165
[#270 ',']: s#401
[#271 ',']: s#401
[#272 ',']: s#401
[#273 ')']: r#166
[#273 ',']: r#166
[#274 ')']: r#167
[#274 ',']: r#167
[#275 ')']: r#168
[#275 ',']: r#168
[#275 ':']: r#168
[#275 ';']: r#168
[#275 ']']: r#168
[#275 '{']: r#168
[#275 '||']: r#169
[#276 '!=']: r#31
[#276 '%']: r#31
[#276 '&&']: r#31
[#276 ')']: r#31
[#276 '*']: r#31
[#276 '+']: r#31
[#276 ',']: r#31
[#276 '-']: r#31
[#276 '/']: r#31
[#276 ':']: r#31
[#276 ';']: r#31
[#276 '<']: r#31
[#276 '<<']: s#215
[#276 '<=']: r#31
[#276 '==']: r#31
[#276 '>']: r#31
[#276 '>=']: r#31
[#276 '>>']: s#216
[#276 ']']: r#31
[#276 '{']: r#31
[#276 '||']: r#31
[#277 '&&']: r#171
[#277 ')']: r#170
[#277 ',']: r#170
[#277 ':']: r#170
[#277 ';']: r#170
[#277 ']']: r#170
[#277 '{']: r#170
[#278 '&&']: r#172
[#278 ')']: r#172
[#278 ',']: r#172
[#278 ':']: r#172
[#278 ';']: r#172
[#278 ']']: r#172
[#278 '{']: r#172
[#278 '||']: r#172
[#279 '&&']: r#173
[#279 ')']: r#173
[#279 ',']: r#173
[#279 ':']: r#173
[#279 ';']: r#173
[#279 ']']: r#173
[#279 '{']: r#173
[#279 '||']: r#173
[#280 '&&']: r#174
[#280 ')']: r#174
[#280 ',']: r#174
[#280 ':']: r#174
[#280 ';']: r#174
[#280 ']']: r#174
[#280 '{']: r#174
[#280 '||']: r#174
[#281 '&&']: r#175
[#281 ')']: r#175
[#281 ',']: r#175
[#281 ':']: r#175
[#281 ';']: r#175
[#281 ']']: r#175
[#281 '{']: r#175
[#281 '||']: r#175
[#282 '&&']: r#176
[#282 ')']: r#176
[#282 ',']: r#176
[#282 ':']: r#176
[#282 ';']: r#176
[#282 ']']: r#176
[#282 '{']: r#176
[#282 '||']: r#176
[#283 '&&']: r#177
[#283 ')']: r#177
[#283 ',']: r#177
[#283 ':']: r#177
[#283 ';']: r#177
[#283 ']']: r#177
[#283 '{']: r#177
[#283 '||']: r#177
[#284 '&']: r#179
[#284 ')']: r#178
[#284 ',']: r#178
[#284 ':']: r#178
[#284 ';']: r#178
[#284 '>']: r#178
[#284 ']']: r#178
[#284 '{']: r#178
[#285 ')']: r#180
[#285 ',']: r#180
[#285 ':']: r#180
[#285 ';']: r#180
[#285 '>']: r#180
[#285 ']']: r#180
[#285 '{']: r#180
[#285 '|']: r#181
[#286 ')']: r#182
[#286 ',']: r#182
[#286 ':']: r#182
[#286 ';']: r#182
[#286 '>']: r#182
[#286 ']']: r#182
[#286 '^']: r#183
[#286 '{']: r#182
[#287 '!=']: r#184
[#287 '%']: s#212
[#287 '&&']: r#184
[#287 ')']: r#184
[#287 '*']: s#72
[#287 '+']: r#184
[#287 ',']: r#184
[#287 '-']: r#184
[#287 '/']: s#211
[#287 ':']: r#184
[#287 ';']: r#184
[#287 '<']: r#184
[#287 '<=']: r#184
[#287 '==']: r#184
[#287 '>']: r#184
[#287 '>=']: r#184
[#287 ']']: r#184
[#287 '{']: r#184
[#287 '||']: r#184
[#288 '!=']: r#31
[#288 '%']: r#31
[#288 '&&']: r#31
[#288 ')']: r#31
[#288 '*']: r#31
[#288 '+']: r#31
[#288 ',']: r#31
[#288 '-']: r#31
[#288 '/']: r#31
[#288 ':']: r#31
[#288 ';']: r#31
[#288 '<']: r#31
[#288 '<=']: r#31
[#288 '==']: r#31
[#288 '>']: r#31
[#288 '>=']: r#31
[#288 ']']: r#31
[#288 '{']: r#31
[#288 '||']: r#31
[#289 '!=']: r#185
[#289 '%']: s#212
[#289 '&&']: r#185
[#289 ')']: r#185
[#289 '*']: s#72
[#289 '+']: r#185
[#289 ',']: r#185
[#289 '-']: r#185
[#289 '/']: s#211
[#289 ':']: r#185
[#289 ';']: r#185
[#289 '<']: r#185
[#289 '<=']: r#185
[#289 '==']: r#185
[#289 '>']: r#185
[#289 '>=']: r#185
[#289 ']']: r#185
[#289 '{']: r#185
[#289 '||']: r#185
[#290 '!=']: r#186
[#290 '&&']: r#186
[#290 ')']: r#186
[#290 ',']: r#186
[#290 ':']: r#186
[#290 ';']: r#186
[#290 '<']: r#186
[#290 '<=']: r#186
[#290 '==']: r#186
[#290 '>']: r#186
[#290 '>=']: r#186
[#290 ']']: r#186
[#290 '{']: r#186
[#290 '||']: r#186
[#291 '!=']: r#187
[#291 '&&']: r#187
[#291 ')']: r#187
[#291 ',']: r#187
[#291 ':']: r#187
[#291 ';']: r#187
[#291 '<']: r#187
[#291 '<=']: r#187
[#291 '==']: r#187
[#291 '>']: r#187
[#291 '>=']: r#187
[#291 ']']: r#187
[#291 '{']: r#187
[#291 '||']: r#187
[#292 '!=']: r#188
[#292 '%']: r#188
[#292 '&&']: r#188
[#292 ')']: r#188
[#292 '*']: r#188
[#292 '+']: r#188
[#292 ',']: r#188
[#292 '-']: r#188
[#292 '/']: r#188
[#292 ':']: r#188
[#292 ';']: r#188
[#292 '<']: r#188
[#292 '<=']: r#188
[#292 '==']: r#188
[#292 '>']: r#188
[#292 '>=']: r#188
[#292 ']']: r#188
[#292 '{']: r#188
[#292 '||']: r#188
[#293 '!=']: r#189
[#293 '%']: r#189
[#293 '&&']: r#189
[#293 ')']: r#189
[#293 '*']: r#189
[#293 '+']: r#189
[#293 ',']: r#189
[#293 '-']: r#189
[#293 '/']: r#189
[#293 ':']: r#189
[#293 ';']: r#189
[#293 '<']: r#189
[#293 '<=']: r#189
[#293 '==']: r#189
[#293 '>']: r#189
[#293 '>=']: r#189
[#293 ']']: r#189
[#293 '{']: r#189
[#293 '||']: r#189
[#294 '!=']: r#190
[#294 '%']: r#190
[#294 '&&']: r#190
[#294 ')']: r#190
[#294 '*']: r#190
[#294 '+']: r#190
[#294 ',']: r#190
[#294 '-']: r#190
[#294 '/']: r#190
[#294 ':']: r#190
[#294 ';']: r#190
[#294 '<']: r#190
[#294 '<=']: r#190
[#294 '==']: r#190
[#294 '>']: r#190
[#294 '>=']: r#190
[#294 ']']: r#190
[#294 '{']: r#190
[#294 '||']: r#190
[#295 '.']: s#202
[#295 '[']: s#201
[#296 '.']: s#202
[#296 '[']: s#201
[#297 '!=']: r#191
[#297 '%']: r#191
[#297 '%=']: r#191
[#297 '&&']: r#191
[#297 '&']: r#191
[#297 '&=']: r#191
[#297 ')']: r#191
[#297 '*']: r#191
[#297 '*=']: r#191
[#297 '+']: r#191
[#297 '++']: r#191
[#297 '+=']: r#191
[#297 ',']: r#191
[#297 '-']: r#191
[#297 '--']: r#191
[#297 '-=']: r#191
[#297 '.']: r#191
[#297 '/']: r#191
[#297 '/=']: r#191
[#297 ':']: r#191
[#297 ';']: r#191
[#297 '<']: r#191
[#297 '<<']: r#191
[#297 '<<=']: r#191
[#297 '<=']: r#191
[#297 '=']: r#191
[#297 '==']: r#191
[#297 '>']: r#191
[#297 '>=']: r#191
[#297 '>>']: r#191
[#297 '>>=']: r#191
[#297 '[']: r#191
[#297 ']']: r#191
[#297 '^']: r#191
[#297 '^=']: r#191
[#297 '{']: r#191
[#297 '|']: r#191
[#297 '|=']: r#191
[#297 '||']: r#191
[#298 '!=']: r#192
[#298 '%']: r#192
[#298 '%=']: r#192
[#298 '&&']: r#192
[#298 '&']: r#192
[#298 '&=']: r#192
[#298 ')']: r#192
[#298 '*']: r#192
[#298 '*=']: r#192
[#298 '+']: r#192
[#298 '++']: r#192
[#298 '+=']: r#192
[#298 ',']: r#192
[#298 '-']: r#192
[#298 '--']: r#192
[#298 '-=']: r#192
[#298 '.']: r#192
[#298 '/']: r#192
[#298 '/=']: r#192
[#298 ':']: r#192
[#298 ';']: r#192
[#298 '<']: r#192
[#298 '<<']: r#192
[#298 '<<=']: r#192
[#298 '<=']: r#192
[#298 '=']: r#192
[#298 '==']: r#192
[#298 '>']: r#192
[#298 '>=']: r#192
[#298 '>>']: r#192
[#298 '>>=']: r#192
[#298 '[']: r#192
[#298 ']']: r#192
[#298 '^']: r#192
[#298 '^=']: r#192
[#298 '{']: r#192
[#298 '|']: r#192
[#298 '|=']: r#192
[#298 '||']: r#192
[#299 '!=']: r#193
[#299 '%']: r#193
[#299 '%=']: r#193
[#299 '&&']: r#193
[#299 '&']: r#193
[#299 '&=']: r#193
[#299 ')']: r#193
[#299 '*']: r#193
[#299 '*=']: r#193
[#299 '+']: r#193
[#299 '++']: r#193
[#299 '+=']: r#193
[#299 ',']: r#193
[#299 '-']: r#193
[#299 '--']: r#193
[#299 '-=']: r#193
[#299 '.']: r#193
[#299 '/']: r#193
[#299 '/=']: r#193
[#299 ':']: r#193
[#299 ';']: r#193
[#299 '<']: r#193
[#299 '<<']: r#193
[#299 '<<=']: r#193
[#299 '<=']: r#193
[#299 '=']: r#193
[#299 '==']: r#193
[#299 '>']: r#193
[#299 '>=']: r#193
[#299 '>>']: r#193
[#299 '>>=']: r#193
[#299 '[']: r#193
[#299 ']']: r#193
[#299 '^']: r#193
[#299 '^=']: r#193
[#299 '{']: r#193
[#299 '|']: r#193
[#299 '|=']: r#193
[#299 '||']: r#193
[#300 '!=']: r#194
[#300 '%']: r#194
[#300 '%=']: r#194
[#300 '&&']: r#194
[#300 '&']: r#194
[#300 '&=']: r#194
[#300 ')']: r#194
[#300 '*']: r#194
[#300 '*=']: r#194
[#300 '+']: r#194
[#300 '++']: r#194
[#300 '+=']: r#194
[#300 ',']: r#194
[#300 '-']: r#194
[#300 '--']: r#194
[#300 '-=']: r#194
[#300 '.']: r#194
[#300 '/']: r#194
[#300 '/=']: r#194
[#300 ':']: r#194
[#300 ';']: r#194
[#300 '<']: r#194
[#300 '<<']: r#194
[#300 '<<=']: r#194
[#300 '<=']: r#194
[#300 '=']: r#194
[#300 '==']: r#194
[#300 '>']: r#194
[#300 '>=']: r#194
[#300 '>>']: r#194
[#300 '>>=']: r#194
[#300 '[']: r#194
[#300 ']']: r#194
[#300 '^']: r#194
[#300 '^=']: r#194
[#300 '{']: r#194
[#300 '|']: r#194
[#300 '|=']: r#194
[#300 '||']: r#194
[#301 '!=']: r#195
[#301 '%']: r#195
[#301 '%=']: r#195
[#301 '&&']: r#195
[#301 '&']: r#195
[#301 '&=']: r#195
[#301 ')']: r#195
[#301 '*']: r#195
[#301 '*=']: r#195
[#301 '+']: r#195
[#301 '++']: r#195
[#301 '+=']: r#195
[#301 ',']: r#195
[#301 '-']: r#195
[#301 '--']: r#195
[#301 '-=']: r#195
[#301 '.']: r#195
[#301 '/']: r#195
[#301 '/=']: r#195
[#301 ':']: r#195
[#301 ';']: r#195
[#301 '<']: r#195
[#301 '<<']: r#195
[#301 '<<=']: r#195
[#301 '<=']: r#195
[#301 '=']: r#195
[#301 '==']: r#195
[#301 '>']: r#195
[#301 '>=']: r#195
[#301 '>>']: r#195
[#301 '>>=']: r#195
[#301 '[']: r#195
[#301 ']']: r#195
[#301 '^']: r#195
[#301 '^=']: r#195
[#301 '{']: r#195
[#301 '|']: r#195
[#301 '|=']: r#195
[#301 '||']: r#195
[#302 '!=']: r#196
[#302 '%']: r#196
[#302 '%=']: r#196
[#302 '&&']: r#196
[#302 '&']: r#196
[#302 '&=']: r#196
[#302 ')']: r#196
[#302 '*']: r#196
[#302 '*=']: r#196
[#302 '+']: r#196
[#302 '++']: r#196
[#302 '+=']: r#196
[#302 ',']: r#196
[#302 '-']: r#196
[#302 '--']: r#196
[#302 '-=']: r#196
[#302 '.']: r#196
[#302 '/']: r#196
[#302 '/=']: r#196
[#302 ':']: r#196
[#302 ';']: r#196
[#302 '<']: r#196
[#302 '<<']: r#196
[#302 '<<=']: r#196
[#302 '<=']: r#196
[#302 '=']: r#196
[#302 '==']: r#196
[#302 '>']: r#196
[#302 '>=']: r#196
[#302 '>>']: r#196
[#302 '>>=']: r#196
[#302 '[']: r#196
[#302 ']']: r#196
[#302 '^']: r#196
[#302 '^=']: r#196
[#302 '{']: r#196
[#302 '|']: r#196
[#302 '|=']: r#196
[#302 '||']: r#196
[#303 '!=']: r#197
[#303 '%']: r#197
[#303 '%=']: r#197
[#303 '&&']: r#197
[#303 '&']: r#197
[#303 '&=']: r#197
[#303 ')']: r#197
[#303 '*']: r#197
[#303 '*=']: r#197
[#303 '+']: r#197
[#303 '++']: r#197
[#303 '+=']: r#197
[#303 ',']: r#197
[#303 '-']: r#197
[#303 '--']: r#197
[#303 '-=']: r#197
[#303 '.']: r#197
[#303 '/']: r#197
[#303 '/=']: r#197
[#303 ':']: r#197
[#303 ';']: r#197
[#303 '<']: r#197
[#303 '<<']: r#197
[#303 '<<=']: r#197
[#303 '<=']: r#197
[#303 '=']: r#197
[#303 '==']: r#197
[#303 '>']: r#197
[#303 '>=']: r#197
[#303 '>>']: r#197
[#303 '>>=']: r#197
[#303 '[']: r#197
[#303 ']']: r#197
[#303 '^']: r#197
[#303 '^=']: r#197
[#303 '{']: r#197
[#303 '|']: r#197
[#303 '|=']: r#197
[#303 '||']: r#197
[#304 '!=']: r#198
[#304 '%']: r#198
[#304 '%=']: r#198
[#304 '&&']: r#198
[#304 '&']: r#198
[#304 '&=']: r#198
[#304 ')']: r#198
[#304 '*']: r#198
[#304 '*=']: r#198
[#304 '+']: r#198
[#304 '++']: r#198
[#304 '+=']: r#198
[#304 ',']: r#198
[#304 '-']: r#198
[#304 '--']: r#198
[#304 '-=']: r#198
[#304 '.']: r#198
[#304 '/']: r#198
[#304 '/=']: r#198
[#304 ':']: r#198
[#304 ';']: r#198
[#304 '<']: r#198
[#304 '<<']: r#198
[#304 '<<=']: r#198
[#304 '<=']: r#198
[#304 '=']: r#198
[#304 '==']: r#198
[#304 '>']: r#198
[#304 '>=']: r#198
[#304 '>>']: r#198
[#304 '>>=']: r#198
[#304 '[']: r#198
[#304 ']']: r#198
[#304 '^']: r#198
[#304 '^=']: r#198
[#304 '{']: r#198
[#304 '|']: r#198
[#304 '|=']: r#198
[#304 '||']: r#198
[#305 '!=']: r#199
[#305 '%']: r#199
[#305 '%=']: r#199
[#305 '&&']: r#199
[#305 '&']: r#199
[#305 '&=']: r#199
[#305 ')']: r#199
[#305 '*']: r#199
[#305 '*=']: r#199
[#305 '+']: r#199
[#305 '++']: r#199
[#305 '+=']: r#199
[#305 ',']: r#199
[#305 '-']: r#199
[#305 '--']: r#199
[#305 '-=']: r#199
[#305 '.']: r#199
[#305 '/']: r#199
[#305 '/=']: r#199
[#305 ':']: r#199
[#305 ';']: r#199
[#305 '<']: r#199
[#305 '<<']: r#199
[#305 '<<=']: r#199
[#305 '<=']: r#199
[#305 '=']: r#199
[#305 '==']: r#199
[#305 '>']: r#199
[#305 '>=']: r#199
[#305 '>>']: r#199
[#305 '>>=']: r#199
[#305 '[']: r#199
[#305 ']']: r#199
[#305 '^']: r#199
[#305 '^=']: r#199
[#305 '{']: r#199
[#305 '|']: r#199
[#305 '|=']: r#199
[#305 '||']: r#199
[#306 ']']: s#487
[#307 ')']: s#316
[#308 '!']: s#70
[#308 '&']: s#73
[#308 '(']: s#114
[#308 '*']: s#72
[#308 '-']: s#69
[#308 'array']: s#120
[#308 'bitcast']: s#78
[#308 'bool']: s#87
[#308 'f16']: s#116
[#308 'f32']: s#115
[#308 'false']: s#113
[#308 'i32']: s#117
[#308 'mat2x2']: s#98
[#308 'mat2x3']: s#99
[#308 'mat2x4']: s#100
[#308 'mat3x2']: s#101
[#308 'mat3x3']: s#102
[#308 'mat3x4']: s#103
[#308 'mat4x2']: s#104
[#308 'mat4x3']: s#105
[#308 'mat4x4']: s#106
[#308 'ptr']: s#119
[#308 'sampler']: s#134
[#308 'sampler_comparison']: s#135
[#308 'texture_1d']: s#141
[#308 'texture_2d']: s#142
[#308 'texture_2d_array']: s#143
[#308 'texture_3d']: s#144
[#308 'texture_cube']: s#145
[#308 'texture_cube_array']: s#146
[#308 'texture_depth_2d']: s#136
[#308 'texture_depth_2d_array']: s#137
[#308 'texture_depth_cube']: s#138
[#308 'texture_depth_cube_array']: s#139
[#308 'texture_depth_multisampled_2d']: s#140
[#308 'texture_multisampled_2d']: s#147
[#308 'texture_storage_1d']: s#148
[#308 'texture_storage_2d']: s#149
[#308 'texture_storage_2d_array']: s#150
[#308 'texture_storage_3d']: s#151
[#308 'true']: s#112
[#308 'u32']: s#118
[#308 'vec2']: s#95
[#308 'vec3']: s#96
[#308 'vec4']: s#97
[#308 '~']: s#71
[#308 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#308 /0[fh]/]: s#129
[#308 /0[iu]?/]: s#108
[#308 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#308 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#308 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#308 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#308 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#308 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#308 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#308 /[1-9][0-9]*[fh]/]: s#130
[#308 /[1-9][0-9]*[iu]?/]: s#109
[#309 '!']: r#200
[#309 '&']: r#200
[#309 '(']: r#200
[#309 '*']: r#200
[#309 '-']: r#200
[#309 'array']: r#200
[#309 'bitcast']: r#200
[#309 'bool']: r#200
[#309 'f16']: r#200
[#309 'f32']: r#200
[#309 'false']: r#200
[#309 'i32']: r#200
[#309 'mat2x2']: r#200
[#309 'mat2x3']: r#200
[#309 'mat2x4']: r#200
[#309 'mat3x2']: r#200
[#309 'mat3x3']: r#200
[#309 'mat3x4']: r#200
[#309 'mat4x2']: r#200
[#309 'mat4x3']: r#200
[#309 'mat4x4']: r#200
[#309 'ptr']: r#200
[#309 'sampler']: r#200
[#309 'sampler_comparison']: r#200
[#309 'texture_1d']: r#200
[#309 'texture_2d']: r#200
[#309 'texture_2d_array']: r#200
[#309 'texture_3d']: r#200
[#309 'texture_cube']: r#200
[#309 'texture_cube_array']: r#200
[#309 'texture_depth_2d']: r#200
[#309 'texture_depth_2d_array']: r#200
[#309 'texture_depth_cube']: r#200
[#309 'texture_depth_cube_array']: r#200
[#309 'texture_depth_multisampled_2d']: r#200
[#309 'texture_multisampled_2d']: r#200
[#309 'texture_storage_1d']: r#200
[#309 'texture_storage_2d']: r#200
[#309 'texture_storage_2d_array']: r#200
[#309 'texture_storage_3d']: r#200
[#309 'true']: r#200
[#309 'u32']: r#200
[#309 'vec2']: r#200
[#309 'vec3']: r#200
[#309 'vec4']: r#200
[#309 '~']: r#200
[#310 '!']: s#70
[#310 '&']: s#73
[#310 '(']: s#114
[#310 '*']: s#72
[#310 '-']: s#69
[#310 'array']: s#120
[#310 'bitcast']: s#78
[#310 'bool']: s#87
[#310 'f16']: s#116
[#310 'f32']: s#115
[#310 'false']: s#113
[#310 'i32']: s#117
[#310 'mat2x2']: s#98
[#310 'mat2x3']: s#99
[#310 'mat2x4']: s#100
[#310 'mat3x2']: s#101
[#310 'mat3x3']: s#102
[#310 'mat3x4']: s#103
[#310 'mat4x2']: s#104
[#310 'mat4x3']: s#105
[#310 'mat4x4']: s#106
[#310 'ptr']: s#119
[#310 'sampler']: s#134
[#310 'sampler_comparison']: s#135
[#310 'texture_1d']: s#141
[#310 'texture_2d']: s#142
[#310 'texture_2d_array']: s#143
[#310 'texture_3d']: s#144
[#310 'texture_cube']: s#145
[#310 'texture_cube_array']: s#146
[#310 'texture_depth_2d']: s#136
[#310 'texture_depth_2d_array']: s#137
[#310 'texture_depth_cube']: s#138
[#310 'texture_depth_cube_array']: s#139
[#310 'texture_depth_multisampled_2d']: s#140
[#310 'texture_multisampled_2d']: s#147
[#310 'texture_storage_1d']: s#148
[#310 'texture_storage_2d']: s#149
[#310 'texture_storage_2d_array']: s#150
[#310 'texture_storage_3d']: s#151
[#310 'true']: s#112
[#310 'u32']: s#118
[#310 'vec2']: s#95
[#310 'vec3']: s#96
[#310 'vec4']: s#97
[#310 '~']: s#71
[#310 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#310 /0[fh]/]: s#129
[#310 /0[iu]?/]: s#108
[#310 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#310 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#310 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#310 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#310 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#310 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#310 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#310 /[1-9][0-9]*[fh]/]: s#130
[#310 /[1-9][0-9]*[iu]?/]: s#109
[#311 ',']: s#401
[#312 '>']: s#231
[#313 ')']: r#201
[#313 ',']: r#201
[#313 ';']: r#201
[#313 '=']: r#201
[#313 '>']: r#201
[#313 '{']: r#201
[#313 '}']: r#201
[#314 ')']: r#202
[#314 ',']: r#202
[#314 ';']: r#202
[#314 '=']: r#202
[#314 '>']: r#202
[#314 '{']: r#202
[#314 '}']: r#202
[#315 '!=']: r#203
[#315 '%']: r#203
[#315 '&&']: r#203
[#315 '&']: r#203
[#315 ')']: r#203
[#315 '*']: r#203
[#315 '+']: r#203
[#315 ',']: r#203
[#315 '-']: r#203
[#315 '.']: r#203
[#315 '/']: r#203
[#315 ':']: r#203
[#315 ';']: r#203
[#315 '<']: r#203
[#315 '<<']: r#203
[#315 '<=']: r#203
[#315 '==']: r#203
[#315 '>']: r#203
[#315 '>=']: r#203
[#315 '>>']: r#203
[#315 '[']: r#203
[#315 ']']: r#203
[#315 '^']: r#203
[#315 '{']: r#203
[#315 '|']: r#203
[#315 '||']: r#203
[#316 '!=']: r#204
[#316 '%']: r#204
[#316 '%=']: r#204
[#316 '&&']: r#204
[#316 '&']: r#204
[#316 '&=']: r#204
[#316 ')']: r#204
[#316 '*']: r#204
[#316 '*=']: r#204
[#316 '+']: r#204
[#316 '++']: r#204
[#316 '+=']: r#204
[#316 ',']: r#204
[#316 '-']: r#204
[#316 '--']: r#204
[#316 '-=']: r#204
[#316 '->']: r#204
[#316 '.']: r#204
[#316 '/']: r#204
[#316 '/=']: r#204
[#316 ':']: r#204
[#316 ';']: r#204
[#316 '<']: r#204
[#316 '<<']: r#204
[#316 '<<=']: r#204
[#316 '<=']: r#204
[#316 '=']: r#204
[#316 '==']: r#204
[#316 '>']: r#204
[#316 '>=']: r#204
[#316 '>>']: r#204
[#316 '>>=']: r#204
[#316 '@']: r#204
[#316 '[']: r#204
[#316 ']']: r#204
[#316 '^']: r#204
[#316 '^=']: r#204
[#316 'array']: r#204
[#316 'bool']: r#204
[#316 'f16']: r#204
[#316 'f32']: r#204
[#316 'fn']: r#204
[#316 'i32']: r#204
[#316 'override']: r#204
[#316 'ptr']: r#204
[#316 'sampler']: r#204
[#316 'sampler_comparison']: r#204
[#316 'texture_1d']: r#204
[#316 'texture_2d']: r#204
[#316 'texture_2d_array']: r#204
[#316 'texture_3d']: r#204
[#316 'texture_cube']: r#204
[#316 'texture_cube_array']: r#204
[#316 'texture_depth_2d']: r#204
[#316 'texture_depth_2d_array']: r#204
[#316 'texture_depth_cube']: r#204
[#316 'texture_depth_cube_array']: r#204
[#316 'texture_depth_multisampled_2d']: r#204
[#316 'texture_multisampled_2d']: r#204
[#316 'texture_storage_1d']: r#204
[#316 'texture_storage_2d']: r#204
[#316 'texture_storage_2d_array']: r#204
[#316 'texture_storage_3d']: r#204
[#316 'u32']: r#204
[#316 'var']: r#204
[#316 '{']: r#204
[#316 '|']: r#204
[#316 '|=']: r#204
[#316 '||']: r#204
[#316 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#204
[#317 ',']: s#401
[#318 ',']: r#205
[#318 '>']: r#205
[#319 ',']: r#206
[#319 '>']: r#206
[#320 ',']: r#207
[#320 '>']: r#207
[#321 ',']: r#208
[#321 '>']: r#208
[#322 ',']: r#209
[#322 '>']: r#209
[#323 ',']: s#401
[#324 '>']: s#231
[#325 '>']: s#231
[#326 ',']: s#401
[#327 ',']: r#210
[#328 ',']: r#211
[#329 ',']: r#212
[#330 ',']: r#213
[#331 ',']: r#214
[#332 ',']: r#215
[#333 ',']: r#216
[#334 ',']: r#217
[#335 ',']: r#218
[#336 ',']: r#219
[#337 ',']: r#220
[#338 ',']: r#221
[#339 ',']: r#222
[#340 ',']: r#223
[#341 ',']: r#224
[#342 ',']: r#225
[#343 '}']: s#474
[#344 '}']: r#226
[#345 '&']: s#73
[#345 '*']: s#72
[#345 ';']: s#19
[#345 'break']: s#373
[#345 'const']: s#372
[#345 'continue']: s#374
[#345 'discard']: s#357
[#345 'for']: s#367
[#345 'if']: s#364
[#345 'let']: s#371
[#345 'loop']: s#366
[#345 'return']: s#363
[#345 'staticAssert']: s#26
[#345 'switch']: s#365
[#345 'var']: s#161
[#345 'while']: s#368
[#345 '{']: s#184
[#345 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#346 '&']: r#227
[#346 '(']: r#227
[#346 '*']: r#227
[#346 ';']: r#227
[#346 'break']: r#227
[#346 'const']: r#227
[#346 'continue']: r#227
[#346 'continuing']: r#227
[#346 'discard']: r#227
[#346 'fallthrough']: r#227
[#346 'for']: r#227
[#346 'if']: r#227
[#346 'let']: r#227
[#346 'loop']: r#227
[#346 'return']: r#227
[#346 'staticAssert']: r#227
[#346 'switch']: r#227
[#346 'var']: r#227
[#346 'while']: r#227
[#346 '{']: r#227
[#346 '}']: r#227
[#346 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#227
[#347 ';']: s#19
[#348 '&']: r#228
[#348 '(']: r#228
[#348 '*']: r#228
[#348 ';']: r#228
[#348 'break']: r#228
[#348 'const']: r#228
[#348 'continue']: r#228
[#348 'continuing']: r#228
[#348 'discard']: r#228
[#348 'fallthrough']: r#228
[#348 'for']: r#228
[#348 'if']: r#228
[#348 'let']: r#228
[#348 'loop']: r#228
[#348 'return']: r#228
[#348 'staticAssert']: r#228
[#348 'switch']: r#228
[#348 'var']: r#228
[#348 'while']: r#228
[#348 '{']: r#228
[#348 '}']: r#228
[#348 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#228
[#349 '&']: r#229
[#349 '(']: r#229
[#349 '*']: r#229
[#349 ';']: r#229
[#349 'break']: r#229
[#349 'const']: r#229
[#349 'continue']: r#229
[#349 'continuing']: r#229
[#349 'discard']: r#229
[#349 'fallthrough']: r#229
[#349 'for']: r#229
[#349 'if']: r#229
[#349 'let']: r#229
[#349 'loop']: r#229
[#349 'return']: r#229
[#349 'staticAssert']: r#229
[#349 'switch']: r#229
[#349 'var']: r#229
[#349 'while']: r#229
[#349 '{']: r#229
[#349 '}']: r#229
[#349 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#229
[#350 '&']: r#230
[#350 '(']: r#230
[#350 '*']: r#230
[#350 ';']: r#230
[#350 'break']: r#230
[#350 'const']: r#230
[#350 'continue']: r#230
[#350 'continuing']: r#230
[#350 'discard']: r#230
[#350 'fallthrough']: r#230
[#350 'for']: r#230
[#350 'if']: r#230
[#350 'let']: r#230
[#350 'loop']: r#230
[#350 'return']: r#230
[#350 'staticAssert']: r#230
[#350 'switch']: r#230
[#350 'var']: r#230
[#350 'while']: r#230
[#350 '{']: r#230
[#350 '}']: r#230
[#350 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#230
[#351 '&']: r#231
[#351 '(']: r#231
[#351 '*']: r#231
[#351 ';']: r#231
[#351 'break']: r#231
[#351 'const']: r#231
[#351 'continue']: r#231
[#351 'continuing']: r#231
[#351 'discard']: r#231
[#351 'fallthrough']: r#231
[#351 'for']: r#231
[#351 'if']: r#231
[#351 'let']: r#231
[#351 'loop']: r#231
[#351 'return']: r#231
[#351 'staticAssert']: r#231
[#351 'switch']: r#231
[#351 'var']: r#231
[#351 'while']: r#231
[#351 '{']: r#231
[#351 '}']: r#231
[#351 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#231
[#352 '&']: r#232
[#352 '(']: r#232
[#352 '*']: r#232
[#352 ';']: r#232
[#352 'break']: r#232
[#352 'const']: r#232
[#352 'continue']: r#232
[#352 'continuing']: r#232
[#352 'discard']: r#232
[#352 'fallthrough']: r#232
[#352 'for']: r#232
[#352 'if']: r#232
[#352 'let']: r#232
[#352 'loop']: r#232
[#352 'return']: r#232
[#352 'staticAssert']: r#232
[#352 'switch']: r#232
[#352 'var']: r#232
[#352 'while']: r#232
[#352 '{']: r#232
[#352 '}']: r#232
[#352 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#232
[#353 ';']: s#19
[#354 ';']: s#19
[#355 ';']: s#19
[#356 ';']: s#19
[#357 ';']: s#19
[#358 ';']: s#19
[#359 '&']: r#233
[#359 '(']: r#233
[#359 '*']: r#233
[#359 ';']: r#233
[#359 'break']: r#233
[#359 'const']: r#233
[#359 'continue']: r#233
[#359 'continuing']: r#233
[#359 'discard']: r#233
[#359 'fallthrough']: r#233
[#359 'for']: r#233
[#359 'if']: r#233
[#359 'let']: r#233
[#359 'loop']: r#233
[#359 'return']: r#233
[#359 'staticAssert']: r#233
[#359 'switch']: r#233
[#359 'var']: r#233
[#359 'while']: r#233
[#359 '{']: r#233
[#359 '}']: r#233
[#359 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#233
[#360 ';']: s#19
[#361 ';']: s#19
[#362 ';']: s#19
[#363 '!']: s#70
[#363 '&']: s#73
[#363 '(']: s#114
[#363 '*']: s#72
[#363 '-']: s#69
[#363 'array']: s#120
[#363 'bitcast']: s#78
[#363 'bool']: s#87
[#363 'f16']: s#116
[#363 'f32']: s#115
[#363 'false']: s#113
[#363 'i32']: s#117
[#363 'mat2x2']: s#98
[#363 'mat2x3']: s#99
[#363 'mat2x4']: s#100
[#363 'mat3x2']: s#101
[#363 'mat3x3']: s#102
[#363 'mat3x4']: s#103
[#363 'mat4x2']: s#104
[#363 'mat4x3']: s#105
[#363 'mat4x4']: s#106
[#363 'ptr']: s#119
[#363 'sampler']: s#134
[#363 'sampler_comparison']: s#135
[#363 'texture_1d']: s#141
[#363 'texture_2d']: s#142
[#363 'texture_2d_array']: s#143
[#363 'texture_3d']: s#144
[#363 'texture_cube']: s#145
[#363 'texture_cube_array']: s#146
[#363 'texture_depth_2d']: s#136
[#363 'texture_depth_2d_array']: s#137
[#363 'texture_depth_cube']: s#138
[#363 'texture_depth_cube_array']: s#139
[#363 'texture_depth_multisampled_2d']: s#140
[#363 'texture_multisampled_2d']: s#147
[#363 'texture_storage_1d']: s#148
[#363 'texture_storage_2d']: s#149
[#363 'texture_storage_2d_array']: s#150
[#363 'texture_storage_3d']: s#151
[#363 'true']: s#112
[#363 'u32']: s#118
[#363 'vec2']: s#95
[#363 'vec3']: s#96
[#363 'vec4']: s#97
[#363 '~']: s#71
[#363 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#363 /0[fh]/]: s#129
[#363 /0[iu]?/]: s#108
[#363 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#363 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#363 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#363 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#363 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#363 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#363 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#363 /[1-9][0-9]*[fh]/]: s#130
[#363 /[1-9][0-9]*[iu]?/]: s#109
[#364 '!']: s#70
[#364 '&']: s#73
[#364 '(']: s#114
[#364 '*']: s#72
[#364 '-']: s#69
[#364 'array']: s#120
[#364 'bitcast']: s#78
[#364 'bool']: s#87
[#364 'f16']: s#116
[#364 'f32']: s#115
[#364 'false']: s#113
[#364 'i32']: s#117
[#364 'mat2x2']: s#98
[#364 'mat2x3']: s#99
[#364 'mat2x4']: s#100
[#364 'mat3x2']: s#101
[#364 'mat3x3']: s#102
[#364 'mat3x4']: s#103
[#364 'mat4x2']: s#104
[#364 'mat4x3']: s#105
[#364 'mat4x4']: s#106
[#364 'ptr']: s#119
[#364 'sampler']: s#134
[#364 'sampler_comparison']: s#135
[#364 'texture_1d']: s#141
[#364 'texture_2d']: s#142
[#364 'texture_2d_array']: s#143
[#364 'texture_3d']: s#144
[#364 'texture_cube']: s#145
[#364 'texture_cube_array']: s#146
[#364 'texture_depth_2d']: s#136
[#364 'texture_depth_2d_array']: s#137
[#364 'texture_depth_cube']: s#138
[#364 'texture_depth_cube_array']: s#139
[#364 'texture_depth_multisampled_2d']: s#140
[#364 'texture_multisampled_2d']: s#147
[#364 'texture_storage_1d']: s#148
[#364 'texture_storage_2d']: s#149
[#364 'texture_storage_2d_array']: s#150
[#364 'texture_storage_3d']: s#151
[#364 'true']: s#112
[#364 'u32']: s#118
[#364 'vec2']: s#95
[#364 'vec3']: s#96
[#364 'vec4']: s#97
[#364 '~']: s#71
[#364 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#364 /0[fh]/]: s#129
[#364 /0[iu]?/]: s#108
[#364 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#364 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#364 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#364 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#364 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#364 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#364 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#364 /[1-9][0-9]*[fh]/]: s#130
[#364 /[1-9][0-9]*[iu]?/]: s#109
[#365 '!']: s#70
[#365 '&']: s#73
[#365 '(']: s#114
[#365 '*']: s#72
[#365 '-']: s#69
[#365 'array']: s#120
[#365 'bitcast']: s#78
[#365 'bool']: s#87
[#365 'f16']: s#116
[#365 'f32']: s#115
[#365 'false']: s#113
[#365 'i32']: s#117
[#365 'mat2x2']: s#98
[#365 'mat2x3']: s#99
[#365 'mat2x4']: s#100
[#365 'mat3x2']: s#101
[#365 'mat3x3']: s#102
[#365 'mat3x4']: s#103
[#365 'mat4x2']: s#104
[#365 'mat4x3']: s#105
[#365 'mat4x4']: s#106
[#365 'ptr']: s#119
[#365 'sampler']: s#134
[#365 'sampler_comparison']: s#135
[#365 'texture_1d']: s#141
[#365 'texture_2d']: s#142
[#365 'texture_2d_array']: s#143
[#365 'texture_3d']: s#144
[#365 'texture_cube']: s#145
[#365 'texture_cube_array']: s#146
[#365 'texture_depth_2d']: s#136
[#365 'texture_depth_2d_array']: s#137
[#365 'texture_depth_cube']: s#138
[#365 'texture_depth_cube_array']: s#139
[#365 'texture_depth_multisampled_2d']: s#140
[#365 'texture_multisampled_2d']: s#147
[#365 'texture_storage_1d']: s#148
[#365 'texture_storage_2d']: s#149
[#365 'texture_storage_2d_array']: s#150
[#365 'texture_storage_3d']: s#151
[#365 'true']: s#112
[#365 'u32']: s#118
[#365 'vec2']: s#95
[#365 'vec3']: s#96
[#365 'vec4']: s#97
[#365 '~']: s#71
[#365 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#365 /0[fh]/]: s#129
[#365 /0[iu]?/]: s#108
[#365 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#365 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#365 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#365 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#365 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#365 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#365 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#365 /[1-9][0-9]*[fh]/]: s#130
[#365 /[1-9][0-9]*[iu]?/]: s#109
[#366 '{']: s#184
[#367 '(']: s#114
[#368 '!']: s#70
[#368 '&']: s#73
[#368 '(']: s#114
[#368 '*']: s#72
[#368 '-']: s#69
[#368 'array']: s#120
[#368 'bitcast']: s#78
[#368 'bool']: s#87
[#368 'f16']: s#116
[#368 'f32']: s#115
[#368 'false']: s#113
[#368 'i32']: s#117
[#368 'mat2x2']: s#98
[#368 'mat2x3']: s#99
[#368 'mat2x4']: s#100
[#368 'mat3x2']: s#101
[#368 'mat3x3']: s#102
[#368 'mat3x4']: s#103
[#368 'mat4x2']: s#104
[#368 'mat4x3']: s#105
[#368 'mat4x4']: s#106
[#368 'ptr']: s#119
[#368 'sampler']: s#134
[#368 'sampler_comparison']: s#135
[#368 'texture_1d']: s#141
[#368 'texture_2d']: s#142
[#368 'texture_2d_array']: s#143
[#368 'texture_3d']: s#144
[#368 'texture_cube']: s#145
[#368 'texture_cube_array']: s#146
[#368 'texture_depth_2d']: s#136
[#368 'texture_depth_2d_array']: s#137
[#368 'texture_depth_cube']: s#138
[#368 'texture_depth_cube_array']: s#139
[#368 'texture_depth_multisampled_2d']: s#140
[#368 'texture_multisampled_2d']: s#147
[#368 'texture_storage_1d']: s#148
[#368 'texture_storage_2d']: s#149
[#368 'texture_storage_2d_array']: s#150
[#368 'texture_storage_3d']: s#151
[#368 'true']: s#112
[#368 'u32']: s#118
[#368 'vec2']: s#95
[#368 'vec3']: s#96
[#368 'vec4']: s#97
[#368 '~']: s#71
[#368 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#368 /0[fh]/]: s#129
[#368 /0[iu]?/]: s#108
[#368 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#368 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#368 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#368 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#368 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#368 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#368 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#368 /[1-9][0-9]*[fh]/]: s#130
[#368 /[1-9][0-9]*[iu]?/]: s#109
[#369 '(']: s#114
[#370 ';']: r#234
[#371 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#372 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#373 ';']: r#235
[#374 ';']: r#236
[#375 '%=']: s#442
[#375 '&=']: s#443
[#375 '*=']: s#440
[#375 '++']: s#426
[#375 '+=']: s#438
[#375 '--']: s#427
[#375 '-=']: s#439
[#375 '/=']: s#441
[#375 '<<=']: s#447
[#375 '=']: s#174
[#375 '>>=']: s#446
[#375 '^=']: s#445
[#375 '|=']: s#444
[#376 '(']: s#114
[#376 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#377 '(']: r#237
[#378 '&']: s#73
[#378 '*']: s#72
[#379 '&']: r#238
[#379 '(']: r#238
[#379 '*']: r#238
[#380 '&']: r#239
[#380 '(']: r#239
[#380 '*']: r#239
[#381 '@']: s#32
[#382 '@']: s#32
[#383 '@']: r#240
[#383 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#240
[#384 '@']: s#32
[#385 ',']: s#401
[#386 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#297
[#388 '@']: s#32
[#389 ';']: r#241
[#390 ';']: r#242
[#391 '!']: s#70
[#391 '&']: s#73
[#391 '(']: s#114
[#391 '*']: s#72
[#391 '-']: s#69
[#391 'array']: s#120
[#391 'bitcast']: s#78
[#391 'bool']: s#87
[#391 'f16']: s#116
[#391 'f32']: s#115
[#391 'false']: s#113
[#391 'i32']: s#117
[#391 'mat2x2']: s#98
[#391 'mat2x3']: s#99
[#391 'mat2x4']: s#100
[#391 'mat3x2']: s#101
[#391 'mat3x3']: s#102
[#391 'mat3x4']: s#103
[#391 'mat4x2']: s#104
[#391 'mat4x3']: s#105
[#391 'mat4x4']: s#106
[#391 'ptr']: s#119
[#391 'sampler']: s#134
[#391 'sampler_comparison']: s#135
[#391 'texture_1d']: s#141
[#391 'texture_2d']: s#142
[#391 'texture_2d_array']: s#143
[#391 'texture_3d']: s#144
[#391 'texture_cube']: s#145
[#391 'texture_cube_array']: s#146
[#391 'texture_depth_2d']: s#136
[#391 'texture_depth_2d_array']: s#137
[#391 'texture_depth_cube']: s#138
[#391 'texture_depth_cube_array']: s#139
[#391 'texture_depth_multisampled_2d']: s#140
[#391 'texture_multisampled_2d']: s#147
[#391 'texture_storage_1d']: s#148
[#391 'texture_storage_2d']: s#149
[#391 'texture_storage_2d_array']: s#150
[#391 'texture_storage_3d']: s#151
[#391 'true']: s#112
[#391 'u32']: s#118
[#391 'vec2']: s#95
[#391 'vec3']: s#96
[#391 'vec4']: s#97
[#391 '~']: s#71
[#391 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#391 /0[fh]/]: s#129
[#391 /0[iu]?/]: s#108
[#391 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#391 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#391 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#391 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#391 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#391 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#391 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#391 /[1-9][0-9]*[fh]/]: s#130
[#391 /[1-9][0-9]*[iu]?/]: s#109
[#392 ';']: r#243
[#393 ')']: r#244
[#393 ',']: r#244
[#393 ';']: r#244
[#393 '=']: r#244
[#394 ';']: r#245
[#395 ',']: s#401
[#396 ';']: r#246
[#396 '=']: r#246
[#397 ':']: s#176
[#397 ';']: r#247
[#397 '=']: r#247
[#398 ';']: r#248
[#398 '=']: r#248
[#399 '>']: s#231
[#400 'read']: s#523
[#400 'read_write']: s#525
[#400 'write']: s#524
[#401 '!']: r#249
[#401 '&']: r#249
[#401 '(']: r#249
[#401 ')']: r#249
[#401 '*']: r#249
[#401 '-']: r#249
[#401 ':']: r#249
[#401 '@']: r#249
[#401 'array']: r#249
[#401 'bitcast']: r#249
[#401 'bool']: r#249
[#401 'f16']: r#249
[#401 'f32']: r#249
[#401 'false']: r#249
[#401 'i32']: r#249
[#401 'mat2x2']: r#249
[#401 'mat2x3']: r#249
[#401 'mat2x4']: r#249
[#401 'mat3x2']: r#249
[#401 'mat3x3']: r#249
[#401 'mat3x4']: r#249
[#401 'mat4x2']: r#249
[#401 'mat4x3']: r#249
[#401 'mat4x4']: r#249
[#401 'ptr']: r#249
[#401 'sampler']: r#249
[#401 'sampler_comparison']: r#249
[#401 'texture_1d']: r#249
[#401 'texture_2d']: r#249
[#401 'texture_2d_array']: r#249
[#401 'texture_3d']: r#249
[#401 'texture_cube']: r#249
[#401 'texture_cube_array']: r#249
[#401 'texture_depth_2d']: r#249
[#401 'texture_depth_2d_array']: r#249
[#401 'texture_depth_cube']: r#249
[#401 'texture_depth_cube_array']: r#249
[#401 'texture_depth_multisampled_2d']: r#249
[#401 'texture_multisampled_2d']: r#249
[#401 'texture_storage_1d']: r#249
[#401 'texture_storage_2d']: r#249
[#401 'texture_storage_2d_array']: r#249
[#401 'texture_storage_3d']: r#249
[#401 'true']: r#249
[#401 'u32']: r#249
[#401 'vec2']: r#249
[#401 'vec3']: r#249
[#401 'vec4']: r#249
[#401 '{']: r#249
[#401 '}']: r#249
[#401 '~']: r#249
[#401 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#249
[#402 ';']: r#250
[#404 ':']: s#176
[#405 '@']: r#251
[#405 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#251
[#406 '@']: r#252
[#406 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#252
[#407 ',']: s#401
[#408 ')']: s#316
[#409 ')']: r#253
[#410 '@']: s#32
[#411 '@']: r#254
[#411 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#254
[#412 '@']: s#32
[#413 ',']: s#401
[#414 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#415 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#255
[#416 '@']: s#32
[#417 '(']: r#256
[#418 '.']: s#202
[#418 '[']: s#201
[#419 '%=']: r#257
[#419 '&=']: r#257
[#419 ')']: r#257
[#419 '*=']: r#257
[#419 '++']: r#257
[#419 '+=']: r#257
[#419 '--']: r#257
[#419 '-=']: r#257
[#419 '.']: r#257
[#419 '/=']: r#257
[#419 '<<=']: r#257
[#419 '=']: r#257
[#419 '>>=']: r#257
[#419 '[']: r#257
[#419 '^=']: r#257
[#419 '|=']: r#257
[#420 '&']: s#73
[#420 '*']: s#72
[#421 '!']: s#70
[#421 '&']: s#73
[#421 '(']: s#114
[#421 '*']: s#72
[#421 '-']: s#69
[#421 'array']: s#120
[#421 'bitcast']: s#78
[#421 'bool']: s#87
[#421 'f16']: s#116
[#421 'f32']: s#115
[#421 'false']: s#113
[#421 'i32']: s#117
[#421 'mat2x2']: s#98
[#421 'mat2x3']: s#99
[#421 'mat2x4']: s#100
[#421 'mat3x2']: s#101
[#421 'mat3x3']: s#102
[#421 'mat3x4']: s#103
[#421 'mat4x2']: s#104
[#421 'mat4x3']: s#105
[#421 'mat4x4']: s#106
[#421 'ptr']: s#119
[#421 'sampler']: s#134
[#421 'sampler_comparison']: s#135
[#421 'texture_1d']: s#141
[#421 'texture_2d']: s#142
[#421 'texture_2d_array']: s#143
[#421 'texture_3d']: s#144
[#421 'texture_cube']: s#145
[#421 'texture_cube_array']: s#146
[#421 'texture_depth_2d']: s#136
[#421 'texture_depth_2d_array']: s#137
[#421 'texture_depth_cube']: s#138
[#421 'texture_depth_cube_array']: s#139
[#421 'texture_depth_multisampled_2d']: s#140
[#421 'texture_multisampled_2d']: s#147
[#421 'texture_storage_1d']: s#148
[#421 'texture_storage_2d']: s#149
[#421 'texture_storage_2d_array']: s#150
[#421 'texture_storage_3d']: s#151
[#421 'true']: s#112
[#421 'u32']: s#118
[#421 'vec2']: s#95
[#421 'vec3']: s#96
[#421 'vec4']: s#97
[#421 '~']: s#71
[#421 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#421 /0[fh]/]: s#129
[#421 /0[iu]?/]: s#108
[#421 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#421 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#421 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#421 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#421 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#421 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#421 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#421 /[1-9][0-9]*[fh]/]: s#130
[#421 /[1-9][0-9]*[iu]?/]: s#109
[#422 ')']: r#258
[#422 ';']: r#258
[#423 ')']: r#259
[#423 ';']: r#259
[#424 '!']: r#260
[#424 '&']: r#260
[#424 '(']: r#260
[#424 '*']: r#260
[#424 '-']: r#260
[#424 'array']: r#260
[#424 'bitcast']: r#260
[#424 'bool']: r#260
[#424 'f16']: r#260
[#424 'f32']: r#260
[#424 'false']: r#260
[#424 'i32']: r#260
[#424 'mat2x2']: r#260
[#424 'mat2x3']: r#260
[#424 'mat2x4']: r#260
[#424 'mat3x2']: r#260
[#424 'mat3x3']: r#260
[#424 'mat3x4']: r#260
[#424 'mat4x2']: r#260
[#424 'mat4x3']: r#260
[#424 'mat4x4']: r#260
[#424 'ptr']: r#260
[#424 'sampler']: r#260
[#424 'sampler_comparison']: r#260
[#424 'texture_1d']: r#260
[#424 'texture_2d']: r#260
[#424 'texture_2d_array']: r#260
[#424 'texture_3d']: r#260
[#424 'texture_cube']: r#260
[#424 'texture_cube_array']: r#260
[#424 'texture_depth_2d']: r#260
[#424 'texture_depth_2d_array']: r#260
[#424 'texture_depth_cube']: r#260
[#424 'texture_depth_cube_array']: r#260
[#424 'texture_depth_multisampled_2d']: r#260
[#424 'texture_multisampled_2d']: r#260
[#424 'texture_storage_1d']: r#260
[#424 'texture_storage_2d']: r#260
[#424 'texture_storage_2d_array']: r#260
[#424 'texture_storage_3d']: r#260
[#424 'true']: r#260
[#424 'u32']: r#260
[#424 'vec2']: r#260
[#424 'vec3']: r#260
[#424 'vec4']: r#260
[#424 '~']: r#260
[#425 '!']: r#261
[#425 '&']: r#261
[#425 '(']: r#261
[#425 '*']: r#261
[#425 '-']: r#261
[#425 'array']: r#261
[#425 'bitcast']: r#261
[#425 'bool']: r#261
[#425 'f16']: r#261
[#425 'f32']: r#261
[#425 'false']: r#261
[#425 'i32']: r#261
[#425 'mat2x2']: r#261
[#425 'mat2x3']: r#261
[#425 'mat2x4']: r#261
[#425 'mat3x2']: r#261
[#425 'mat3x3']: r#261
[#425 'mat3x4']: r#261
[#425 'mat4x2']: r#261
[#425 'mat4x3']: r#261
[#425 'mat4x4']: r#261
[#425 'ptr']: r#261
[#425 'sampler']: r#261
[#425 'sampler_comparison']: r#261
[#425 'texture_1d']: r#261
[#425 'texture_2d']: r#261
[#425 'texture_2d_array']: r#261
[#425 'texture_3d']: r#261
[#425 'texture_cube']: r#261
[#425 'texture_cube_array']: r#261
[#425 'texture_depth_2d']: r#261
[#425 'texture_depth_2d_array']: r#261
[#425 'texture_depth_cube']: r#261
[#425 'texture_depth_cube_array']: r#261
[#425 'texture_depth_multisampled_2d']: r#261
[#425 'texture_multisampled_2d']: r#261
[#425 'texture_storage_1d']: r#261
[#425 'texture_storage_2d']: r#261
[#425 'texture_storage_2d_array']: r#261
[#425 'texture_storage_3d']: r#261
[#425 'true']: r#261
[#425 'u32']: r#261
[#425 'vec2']: r#261
[#425 'vec3']: r#261
[#425 'vec4']: r#261
[#425 '~']: r#261
[#426 ')']: r#262
[#426 ';']: r#262
[#427 ')']: r#263
[#427 ';']: r#263
[#428 '!']: r#264
[#428 '&']: r#264
[#428 '(']: r#264
[#428 '*']: r#264
[#428 '-']: r#264
[#428 'array']: r#264
[#428 'bitcast']: r#264
[#428 'bool']: r#264
[#428 'f16']: r#264
[#428 'f32']: r#264
[#428 'false']: r#264
[#428 'i32']: r#264
[#428 'mat2x2']: r#264
[#428 'mat2x3']: r#264
[#428 'mat2x4']: r#264
[#428 'mat3x2']: r#264
[#428 'mat3x3']: r#264
[#428 'mat3x4']: r#264
[#428 'mat4x2']: r#264
[#428 'mat4x3']: r#264
[#428 'mat4x4']: r#264
[#428 'ptr']: r#264
[#428 'sampler']: r#264
[#428 'sampler_comparison']: r#264
[#428 'texture_1d']: r#264
[#428 'texture_2d']: r#264
[#428 'texture_2d_array']: r#264
[#428 'texture_3d']: r#264
[#428 'texture_cube']: r#264
[#428 'texture_cube_array']: r#264
[#428 'texture_depth_2d']: r#264
[#428 'texture_depth_2d_array']: r#264
[#428 'texture_depth_cube']: r#264
[#428 'texture_depth_cube_array']: r#264
[#428 'texture_depth_multisampled_2d']: r#264
[#428 'texture_multisampled_2d']: r#264
[#428 'texture_storage_1d']: r#264
[#428 'texture_storage_2d']: r#264
[#428 'texture_storage_2d_array']: r#264
[#428 'texture_storage_3d']: r#264
[#428 'true']: r#264
[#428 'u32']: r#264
[#428 'vec2']: r#264
[#428 'vec3']: r#264
[#428 'vec4']: r#264
[#428 '~']: r#264
[#429 '!']: r#265
[#429 '&']: r#265
[#429 '(']: r#265
[#429 '*']: r#265
[#429 '-']: r#265
[#429 'array']: r#265
[#429 'bitcast']: r#265
[#429 'bool']: r#265
[#429 'f16']: r#265
[#429 'f32']: r#265
[#429 'false']: r#265
[#429 'i32']: r#265
[#429 'mat2x2']: r#265
[#429 'mat2x3']: r#265
[#429 'mat2x4']: r#265
[#429 'mat3x2']: r#265
[#429 'mat3x3']: r#265
[#429 'mat3x4']: r#265
[#429 'mat4x2']: r#265
[#429 'mat4x3']: r#265
[#429 'mat4x4']: r#265
[#429 'ptr']: r#265
[#429 'sampler']: r#265
[#429 'sampler_comparison']: r#265
[#429 'texture_1d']: r#265
[#429 'texture_2d']: r#265
[#429 'texture_2d_array']: r#265
[#429 'texture_3d']: r#265
[#429 'texture_cube']: r#265
[#429 'texture_cube_array']: r#265
[#429 'texture_depth_2d']: r#265
[#429 'texture_depth_2d_array']: r#265
[#429 'texture_depth_cube']: r#265
[#429 'texture_depth_cube_array']: r#265
[#429 'texture_depth_multisampled_2d']: r#265
[#429 'texture_multisampled_2d']: r#265
[#429 'texture_storage_1d']: r#265
[#429 'texture_storage_2d']: r#265
[#429 'texture_storage_2d_array']: r#265
[#429 'texture_storage_3d']: r#265
[#429 'true']: r#265
[#429 'u32']: r#265
[#429 'vec2']: r#265
[#429 'vec3']: r#265
[#429 'vec4']: r#265
[#429 '~']: r#265
[#430 '!']: r#266
[#430 '&']: r#266
[#430 '(']: r#266
[#430 '*']: r#266
[#430 '-']: r#266
[#430 'array']: r#266
[#430 'bitcast']: r#266
[#430 'bool']: r#266
[#430 'f16']: r#266
[#430 'f32']: r#266
[#430 'false']: r#266
[#430 'i32']: r#266
[#430 'mat2x2']: r#266
[#430 'mat2x3']: r#266
[#430 'mat2x4']: r#266
[#430 'mat3x2']: r#266
[#430 'mat3x3']: r#266
[#430 'mat3x4']: r#266
[#430 'mat4x2']: r#266
[#430 'mat4x3']: r#266
[#430 'mat4x4']: r#266
[#430 'ptr']: r#266
[#430 'sampler']: r#266
[#430 'sampler_comparison']: r#266
[#430 'texture_1d']: r#266
[#430 'texture_2d']: r#266
[#430 'texture_2d_array']: r#266
[#430 'texture_3d']: r#266
[#430 'texture_cube']: r#266
[#430 'texture_cube_array']: r#266
[#430 'texture_depth_2d']: r#266
[#430 'texture_depth_2d_array']: r#266
[#430 'texture_depth_cube']: r#266
[#430 'texture_depth_cube_array']: r#266
[#430 'texture_depth_multisampled_2d']: r#266
[#430 'texture_multisampled_2d']: r#266
[#430 'texture_storage_1d']: r#266
[#430 'texture_storage_2d']: r#266
[#430 'texture_storage_2d_array']: r#266
[#430 'texture_storage_3d']: r#266
[#430 'true']: r#266
[#430 'u32']: r#266
[#430 'vec2']: r#266
[#430 'vec3']: r#266
[#430 'vec4']: r#266
[#430 '~']: r#266
[#431 '!']: r#267
[#431 '&']: r#267
[#431 '(']: r#267
[#431 '*']: r#267
[#431 '-']: r#267
[#431 'array']: r#267
[#431 'bitcast']: r#267
[#431 'bool']: r#267
[#431 'f16']: r#267
[#431 'f32']: r#267
[#431 'false']: r#267
[#431 'i32']: r#267
[#431 'mat2x2']: r#267
[#431 'mat2x3']: r#267
[#431 'mat2x4']: r#267
[#431 'mat3x2']: r#267
[#431 'mat3x3']: r#267
[#431 'mat3x4']: r#267
[#431 'mat4x2']: r#267
[#431 'mat4x3']: r#267
[#431 'mat4x4']: r#267
[#431 'ptr']: r#267
[#431 'sampler']: r#267
[#431 'sampler_comparison']: r#267
[#431 'texture_1d']: r#267
[#431 'texture_2d']: r#267
[#431 'texture_2d_array']: r#267
[#431 'texture_3d']: r#267
[#431 'texture_cube']: r#267
[#431 'texture_cube_array']: r#267
[#431 'texture_depth_2d']: r#267
[#431 'texture_depth_2d_array']: r#267
[#431 'texture_depth_cube']: r#267
[#431 'texture_depth_cube_array']: r#267
[#431 'texture_depth_multisampled_2d']: r#267
[#431 'texture_multisampled_2d']: r#267
[#431 'texture_storage_1d']: r#267
[#431 'texture_storage_2d']: r#267
[#431 'texture_storage_2d_array']: r#267
[#431 'texture_storage_3d']: r#267
[#431 'true']: r#267
[#431 'u32']: r#267
[#431 'vec2']: r#267
[#431 'vec3']: r#267
[#431 'vec4']: r#267
[#431 '~']: r#267
[#432 '!']: r#268
[#432 '&']: r#268
[#432 '(']: r#268
[#432 '*']: r#268
[#432 '-']: r#268
[#432 'array']: r#268
[#432 'bitcast']: r#268
[#432 'bool']: r#268
[#432 'f16']: r#268
[#432 'f32']: r#268
[#432 'false']: r#268
[#432 'i32']: r#268
[#432 'mat2x2']: r#268
[#432 'mat2x3']: r#268
[#432 'mat2x4']: r#268
[#432 'mat3x2']: r#268
[#432 'mat3x3']: r#268
[#432 'mat3x4']: r#268
[#432 'mat4x2']: r#268
[#432 'mat4x3']: r#268
[#432 'mat4x4']: r#268
[#432 'ptr']: r#268
[#432 'sampler']: r#268
[#432 'sampler_comparison']: r#268
[#432 'texture_1d']: r#268
[#432 'texture_2d']: r#268
[#432 'texture_2d_array']: r#268
[#432 'texture_3d']: r#268
[#432 'texture_cube']: r#268
[#432 'texture_cube_array']: r#268
[#432 'texture_depth_2d']: r#268
[#432 'texture_depth_2d_array']: r#268
[#432 'texture_depth_cube']: r#268
[#432 'texture_depth_cube_array']: r#268
[#432 'texture_depth_multisampled_2d']: r#268
[#432 'texture_multisampled_2d']: r#268
[#432 'texture_storage_1d']: r#268
[#432 'texture_storage_2d']: r#268
[#432 'texture_storage_2d_array']: r#268
[#432 'texture_storage_3d']: r#268
[#432 'true']: r#268
[#432 'u32']: r#268
[#432 'vec2']: r#268
[#432 'vec3']: r#268
[#432 'vec4']: r#268
[#432 '~']: r#268
[#433 '!']: r#269
[#433 '&']: r#269
[#433 '(']: r#269
[#433 '*']: r#269
[#433 '-']: r#269
[#433 'array']: r#269
[#433 'bitcast']: r#269
[#433 'bool']: r#269
[#433 'f16']: r#269
[#433 'f32']: r#269
[#433 'false']: r#269
[#433 'i32']: r#269
[#433 'mat2x2']: r#269
[#433 'mat2x3']: r#269
[#433 'mat2x4']: r#269
[#433 'mat3x2']: r#269
[#433 'mat3x3']: r#269
[#433 'mat3x4']: r#269
[#433 'mat4x2']: r#269
[#433 'mat4x3']: r#269
[#433 'mat4x4']: r#269
[#433 'ptr']: r#269
[#433 'sampler']: r#269
[#433 'sampler_comparison']: r#269
[#433 'texture_1d']: r#269
[#433 'texture_2d']: r#269
[#433 'texture_2d_array']: r#269
[#433 'texture_3d']: r#269
[#433 'texture_cube']: r#269
[#433 'texture_cube_array']: r#269
[#433 'texture_depth_2d']: r#269
[#433 'texture_depth_2d_array']: r#269
[#433 'texture_depth_cube']: r#269
[#433 'texture_depth_cube_array']: r#269
[#433 'texture_depth_multisampled_2d']: r#269
[#433 'texture_multisampled_2d']: r#269
[#433 'texture_storage_1d']: r#269
[#433 'texture_storage_2d']: r#269
[#433 'texture_storage_2d_array']: r#269
[#433 'texture_storage_3d']: r#269
[#433 'true']: r#269
[#433 'u32']: r#269
[#433 'vec2']: r#269
[#433 'vec3']: r#269
[#433 'vec4']: r#269
[#433 '~']: r#269
[#434 '!']: r#270
[#434 '&']: r#270
[#434 '(']: r#270
[#434 '*']: r#270
[#434 '-']: r#270
[#434 'array']: r#270
[#434 'bitcast']: r#270
[#434 'bool']: r#270
[#434 'f16']: r#270
[#434 'f32']: r#270
[#434 'false']: r#270
[#434 'i32']: r#270
[#434 'mat2x2']: r#270
[#434 'mat2x3']: r#270
[#434 'mat2x4']: r#270
[#434 'mat3x2']: r#270
[#434 'mat3x3']: r#270
[#434 'mat3x4']: r#270
[#434 'mat4x2']: r#270
[#434 'mat4x3']: r#270
[#434 'mat4x4']: r#270
[#434 'ptr']: r#270
[#434 'sampler']: r#270
[#434 'sampler_comparison']: r#270
[#434 'texture_1d']: r#270
[#434 'texture_2d']: r#270
[#434 'texture_2d_array']: r#270
[#434 'texture_3d']: r#270
[#434 'texture_cube']: r#270
[#434 'texture_cube_array']: r#270
[#434 'texture_depth_2d']: r#270
[#434 'texture_depth_2d_array']: r#270
[#434 'texture_depth_cube']: r#270
[#434 'texture_depth_cube_array']: r#270
[#434 'texture_depth_multisampled_2d']: r#270
[#434 'texture_multisampled_2d']: r#270
[#434 'texture_storage_1d']: r#270
[#434 'texture_storage_2d']: r#270
[#434 'texture_storage_2d_array']: r#270
[#434 'texture_storage_3d']: r#270
[#434 'true']: r#270
[#434 'u32']: r#270
[#434 'vec2']: r#270
[#434 'vec3']: r#270
[#434 'vec4']: r#270
[#434 '~']: r#270
[#435 '!']: r#271
[#435 '&']: r#271
[#435 '(']: r#271
[#435 '*']: r#271
[#435 '-']: r#271
[#435 'array']: r#271
[#435 'bitcast']: r#271
[#435 'bool']: r#271
[#435 'f16']: r#271
[#435 'f32']: r#271
[#435 'false']: r#271
[#435 'i32']: r#271
[#435 'mat2x2']: r#271
[#435 'mat2x3']: r#271
[#435 'mat2x4']: r#271
[#435 'mat3x2']: r#271
[#435 'mat3x3']: r#271
[#435 'mat3x4']: r#271
[#435 'mat4x2']: r#271
[#435 'mat4x3']: r#271
[#435 'mat4x4']: r#271
[#435 'ptr']: r#271
[#435 'sampler']: r#271
[#435 'sampler_comparison']: r#271
[#435 'texture_1d']: r#271
[#435 'texture_2d']: r#271
[#435 'texture_2d_array']: r#271
[#435 'texture_3d']: r#271
[#435 'texture_cube']: r#271
[#435 'texture_cube_array']: r#271
[#435 'texture_depth_2d']: r#271
[#435 'texture_depth_2d_array']: r#271
[#435 'texture_depth_cube']: r#271
[#435 'texture_depth_cube_array']: r#271
[#435 'texture_depth_multisampled_2d']: r#271
[#435 'texture_multisampled_2d']: r#271
[#435 'texture_storage_1d']: r#271
[#435 'texture_storage_2d']: r#271
[#435 'texture_storage_2d_array']: r#271
[#435 'texture_storage_3d']: r#271
[#435 'true']: r#271
[#435 'u32']: r#271
[#435 'vec2']: r#271
[#435 'vec3']: r#271
[#435 'vec4']: r#271
[#435 '~']: r#271
[#436 '!']: r#272
[#436 '&']: r#272
[#436 '(']: r#272
[#436 '*']: r#272
[#436 '-']: r#272
[#436 'array']: r#272
[#436 'bitcast']: r#272
[#436 'bool']: r#272
[#436 'f16']: r#272
[#436 'f32']: r#272
[#436 'false']: r#272
[#436 'i32']: r#272
[#436 'mat2x2']: r#272
[#436 'mat2x3']: r#272
[#436 'mat2x4']: r#272
[#436 'mat3x2']: r#272
[#436 'mat3x3']: r#272
[#436 'mat3x4']: r#272
[#436 'mat4x2']: r#272
[#436 'mat4x3']: r#272
[#436 'mat4x4']: r#272
[#436 'ptr']: r#272
[#436 'sampler']: r#272
[#436 'sampler_comparison']: r#272
[#436 'texture_1d']: r#272
[#436 'texture_2d']: r#272
[#436 'texture_2d_array']: r#272
[#436 'texture_3d']: r#272
[#436 'texture_cube']: r#272
[#436 'texture_cube_array']: r#272
[#436 'texture_depth_2d']: r#272
[#436 'texture_depth_2d_array']: r#272
[#436 'texture_depth_cube']: r#272
[#436 'texture_depth_cube_array']: r#272
[#436 'texture_depth_multisampled_2d']: r#272
[#436 'texture_multisampled_2d']: r#272
[#436 'texture_storage_1d']: r#272
[#436 'texture_storage_2d']: r#272
[#436 'texture_storage_2d_array']: r#272
[#436 'texture_storage_3d']: r#272
[#436 'true']: r#272
[#436 'u32']: r#272
[#436 'vec2']: r#272
[#436 'vec3']: r#272
[#436 'vec4']: r#272
[#436 '~']: r#272
[#437 '!']: r#273
[#437 '&']: r#273
[#437 '(']: r#273
[#437 '*']: r#273
[#437 '-']: r#273
[#437 'array']: r#273
[#437 'bitcast']: r#273
[#437 'bool']: r#273
[#437 'f16']: r#273
[#437 'f32']: r#273
[#437 'false']: r#273
[#437 'i32']: r#273
[#437 'mat2x2']: r#273
[#437 'mat2x3']: r#273
[#437 'mat2x4']: r#273
[#437 'mat3x2']: r#273
[#437 'mat3x3']: r#273
[#437 'mat3x4']: r#273
[#437 'mat4x2']: r#273
[#437 'mat4x3']: r#273
[#437 'mat4x4']: r#273
[#437 'ptr']: r#273
[#437 'sampler']: r#273
[#437 'sampler_comparison']: r#273
[#437 'texture_1d']: r#273
[#437 'texture_2d']: r#273
[#437 'texture_2d_array']: r#273
[#437 'texture_3d']: r#273
[#437 'texture_cube']: r#273
[#437 'texture_cube_array']: r#273
[#437 'texture_depth_2d']: r#273
[#437 'texture_depth_2d_array']: r#273
[#437 'texture_depth_cube']: r#273
[#437 'texture_depth_cube_array']: r#273
[#437 'texture_depth_multisampled_2d']: r#273
[#437 'texture_multisampled_2d']: r#273
[#437 'texture_storage_1d']: r#273
[#437 'texture_storage_2d']: r#273
[#437 'texture_storage_2d_array']: r#273
[#437 'texture_storage_3d']: r#273
[#437 'true']: r#273
[#437 'u32']: r#273
[#437 'vec2']: r#273
[#437 'vec3']: r#273
[#437 'vec4']: r#273
[#437 '~']: r#273
[#438 '!']: r#274
[#438 '&']: r#274
[#438 '(']: r#274
[#438 '*']: r#274
[#438 '-']: r#274
[#438 'array']: r#274
[#438 'bitcast']: r#274
[#438 'bool']: r#274
[#438 'f16']: r#274
[#438 'f32']: r#274
[#438 'false']: r#274
[#438 'i32']: r#274
[#438 'mat2x2']: r#274
[#438 'mat2x3']: r#274
[#438 'mat2x4']: r#274
[#438 'mat3x2']: r#274
[#438 'mat3x3']: r#274
[#438 'mat3x4']: r#274
[#438 'mat4x2']: r#274
[#438 'mat4x3']: r#274
[#438 'mat4x4']: r#274
[#438 'ptr']: r#274
[#438 'sampler']: r#274
[#438 'sampler_comparison']: r#274
[#438 'texture_1d']: r#274
[#438 'texture_2d']: r#274
[#438 'texture_2d_array']: r#274
[#438 'texture_3d']: r#274
[#438 'texture_cube']: r#274
[#438 'texture_cube_array']: r#274
[#438 'texture_depth_2d']: r#274
[#438 'texture_depth_2d_array']: r#274
[#438 'texture_depth_cube']: r#274
[#438 'texture_depth_cube_array']: r#274
[#438 'texture_depth_multisampled_2d']: r#274
[#438 'texture_multisampled_2d']: r#274
[#438 'texture_storage_1d']: r#274
[#438 'texture_storage_2d']: r#274
[#438 'texture_storage_2d_array']: r#274
[#438 'texture_storage_3d']: r#274
[#438 'true']: r#274
[#438 'u32']: r#274
[#438 'vec2']: r#274
[#438 'vec3']: r#274
[#438 'vec4']: r#274
[#438 '~']: r#274
[#439 '!']: r#275
[#439 '&']: r#275
[#439 '(']: r#275
[#439 '*']: r#275
[#439 '-']: r#275
[#439 'array']: r#275
[#439 'bitcast']: r#275
[#439 'bool']: r#275
[#439 'f16']: r#275
[#439 'f32']: r#275
[#439 'false']: r#275
[#439 'i32']: r#275
[#439 'mat2x2']: r#275
[#439 'mat2x3']: r#275
[#439 'mat2x4']: r#275
[#439 'mat3x2']: r#275
[#439 'mat3x3']: r#275
[#439 'mat3x4']: r#275
[#439 'mat4x2']: r#275
[#439 'mat4x3']: r#275
[#439 'mat4x4']: r#275
[#439 'ptr']: r#275
[#439 'sampler']: r#275
[#439 'sampler_comparison']: r#275
[#439 'texture_1d']: r#275
[#439 'texture_2d']: r#275
[#439 'texture_2d_array']: r#275
[#439 'texture_3d']: r#275
[#439 'texture_cube']: r#275
[#439 'texture_cube_array']: r#275
[#439 'texture_depth_2d']: r#275
[#439 'texture_depth_2d_array']: r#275
[#439 'texture_depth_cube']: r#275
[#439 'texture_depth_cube_array']: r#275
[#439 'texture_depth_multisampled_2d']: r#275
[#439 'texture_multisampled_2d']: r#275
[#439 'texture_storage_1d']: r#275
[#439 'texture_storage_2d']: r#275
[#439 'texture_storage_2d_array']: r#275
[#439 'texture_storage_3d']: r#275
[#439 'true']: r#275
[#439 'u32']: r#275
[#439 'vec2']: r#275
[#439 'vec3']: r#275
[#439 'vec4']: r#275
[#439 '~']: r#275
[#440 '!']: r#276
[#440 '&']: r#276
[#440 '(']: r#276
[#440 '*']: r#276
[#440 '-']: r#276
[#440 'array']: r#276
[#440 'bitcast']: r#276
[#440 'bool']: r#276
[#440 'f16']: r#276
[#440 'f32']: r#276
[#440 'false']: r#276
[#440 'i32']: r#276
[#440 'mat2x2']: r#276
[#440 'mat2x3']: r#276
[#440 'mat2x4']: r#276
[#440 'mat3x2']: r#276
[#440 'mat3x3']: r#276
[#440 'mat3x4']: r#276
[#440 'mat4x2']: r#276
[#440 'mat4x3']: r#276
[#440 'mat4x4']: r#276
[#440 'ptr']: r#276
[#440 'sampler']: r#276
[#440 'sampler_comparison']: r#276
[#440 'texture_1d']: r#276
[#440 'texture_2d']: r#276
[#440 'texture_2d_array']: r#276
[#440 'texture_3d']: r#276
[#440 'texture_cube']: r#276
[#440 'texture_cube_array']: r#276
[#440 'texture_depth_2d']: r#276
[#440 'texture_depth_2d_array']: r#276
[#440 'texture_depth_cube']: r#276
[#440 'texture_depth_cube_array']: r#276
[#440 'texture_depth_multisampled_2d']: r#276
[#440 'texture_multisampled_2d']: r#276
[#440 'texture_storage_1d']: r#276
[#440 'texture_storage_2d']: r#276
[#440 'texture_storage_2d_array']: r#276
[#440 'texture_storage_3d']: r#276
[#440 'true']: r#276
[#440 'u32']: r#276
[#440 'vec2']: r#276
[#440 'vec3']: r#276
[#440 'vec4']: r#276
[#440 '~']: r#276
[#441 '!']: r#277
[#441 '&']: r#277
[#441 '(']: r#277
[#441 '*']: r#277
[#441 '-']: r#277
[#441 'array']: r#277
[#441 'bitcast']: r#277
[#441 'bool']: r#277
[#441 'f16']: r#277
[#441 'f32']: r#277
[#441 'false']: r#277
[#441 'i32']: r#277
[#441 'mat2x2']: r#277
[#441 'mat2x3']: r#277
[#441 'mat2x4']: r#277
[#441 'mat3x2']: r#277
[#441 'mat3x3']: r#277
[#441 'mat3x4']: r#277
[#441 'mat4x2']: r#277
[#441 'mat4x3']: r#277
[#441 'mat4x4']: r#277
[#441 'ptr']: r#277
[#441 'sampler']: r#277
[#441 'sampler_comparison']: r#277
[#441 'texture_1d']: r#277
[#441 'texture_2d']: r#277
[#441 'texture_2d_array']: r#277
[#441 'texture_3d']: r#277
[#441 'texture_cube']: r#277
[#441 'texture_cube_array']: r#277
[#441 'texture_depth_2d']: r#277
[#441 'texture_depth_2d_array']: r#277
[#441 'texture_depth_cube']: r#277
[#441 'texture_depth_cube_array']: r#277
[#441 'texture_depth_multisampled_2d']: r#277
[#441 'texture_multisampled_2d']: r#277
[#441 'texture_storage_1d']: r#277
[#441 'texture_storage_2d']: r#277
[#441 'texture_storage_2d_array']: r#277
[#441 'texture_storage_3d']: r#277
[#441 'true']: r#277
[#441 'u32']: r#277
[#441 'vec2']: r#277
[#441 'vec3']: r#277
[#441 'vec4']: r#277
[#441 '~']: r#277
[#442 '!']: r#278
[#442 '&']: r#278
[#442 '(']: r#278
[#442 '*']: r#278
[#442 '-']: r#278
[#442 'array']: r#278
[#442 'bitcast']: r#278
[#442 'bool']: r#278
[#442 'f16']: r#278
[#442 'f32']: r#278
[#442 'false']: r#278
[#442 'i32']: r#278
[#442 'mat2x2']: r#278
[#442 'mat2x3']: r#278
[#442 'mat2x4']: r#278
[#442 'mat3x2']: r#278
[#442 'mat3x3']: r#278
[#442 'mat3x4']: r#278
[#442 'mat4x2']: r#278
[#442 'mat4x3']: r#278
[#442 'mat4x4']: r#278
[#442 'ptr']: r#278
[#442 'sampler']: r#278
[#442 'sampler_comparison']: r#278
[#442 'texture_1d']: r#278
[#442 'texture_2d']: r#278
[#442 'texture_2d_array']: r#278
[#442 'texture_3d']: r#278
[#442 'texture_cube']: r#278
[#442 'texture_cube_array']: r#278
[#442 'texture_depth_2d']: r#278
[#442 'texture_depth_2d_array']: r#278
[#442 'texture_depth_cube']: r#278
[#442 'texture_depth_cube_array']: r#278
[#442 'texture_depth_multisampled_2d']: r#278
[#442 'texture_multisampled_2d']: r#278
[#442 'texture_storage_1d']: r#278
[#442 'texture_storage_2d']: r#278
[#442 'texture_storage_2d_array']: r#278
[#442 'texture_storage_3d']: r#278
[#442 'true']: r#278
[#442 'u32']: r#278
[#442 'vec2']: r#278
[#442 'vec3']: r#278
[#442 'vec4']: r#278
[#442 '~']: r#278
[#443 '!']: r#279
[#443 '&']: r#279
[#443 '(']: r#279
[#443 '*']: r#279
[#443 '-']: r#279
[#443 'array']: r#279
[#443 'bitcast']: r#279
[#443 'bool']: r#279
[#443 'f16']: r#279
[#443 'f32']: r#279
[#443 'false']: r#279
[#443 'i32']: r#279
[#443 'mat2x2']: r#279
[#443 'mat2x3']: r#279
[#443 'mat2x4']: r#279
[#443 'mat3x2']: r#279
[#443 'mat3x3']: r#279
[#443 'mat3x4']: r#279
[#443 'mat4x2']: r#279
[#443 'mat4x3']: r#279
[#443 'mat4x4']: r#279
[#443 'ptr']: r#279
[#443 'sampler']: r#279
[#443 'sampler_comparison']: r#279
[#443 'texture_1d']: r#279
[#443 'texture_2d']: r#279
[#443 'texture_2d_array']: r#279
[#443 'texture_3d']: r#279
[#443 'texture_cube']: r#279
[#443 'texture_cube_array']: r#279
[#443 'texture_depth_2d']: r#279
[#443 'texture_depth_2d_array']: r#279
[#443 'texture_depth_cube']: r#279
[#443 'texture_depth_cube_array']: r#279
[#443 'texture_depth_multisampled_2d']: r#279
[#443 'texture_multisampled_2d']: r#279
[#443 'texture_storage_1d']: r#279
[#443 'texture_storage_2d']: r#279
[#443 'texture_storage_2d_array']: r#279
[#443 'texture_storage_3d']: r#279
[#443 'true']: r#279
[#443 'u32']: r#279
[#443 'vec2']: r#279
[#443 'vec3']: r#279
[#443 'vec4']: r#279
[#443 '~']: r#279
[#444 '!']: r#280
[#444 '&']: r#280
[#444 '(']: r#280
[#444 '*']: r#280
[#444 '-']: r#280
[#444 'array']: r#280
[#444 'bitcast']: r#280
[#444 'bool']: r#280
[#444 'f16']: r#280
[#444 'f32']: r#280
[#444 'false']: r#280
[#444 'i32']: r#280
[#444 'mat2x2']: r#280
[#444 'mat2x3']: r#280
[#444 'mat2x4']: r#280
[#444 'mat3x2']: r#280
[#444 'mat3x3']: r#280
[#444 'mat3x4']: r#280
[#444 'mat4x2']: r#280
[#444 'mat4x3']: r#280
[#444 'mat4x4']: r#280
[#444 'ptr']: r#280
[#444 'sampler']: r#280
[#444 'sampler_comparison']: r#280
[#444 'texture_1d']: r#280
[#444 'texture_2d']: r#280
[#444 'texture_2d_array']: r#280
[#444 'texture_3d']: r#280
[#444 'texture_cube']: r#280
[#444 'texture_cube_array']: r#280
[#444 'texture_depth_2d']: r#280
[#444 'texture_depth_2d_array']: r#280
[#444 'texture_depth_cube']: r#280
[#444 'texture_depth_cube_array']: r#280
[#444 'texture_depth_multisampled_2d']: r#280
[#444 'texture_multisampled_2d']: r#280
[#444 'texture_storage_1d']: r#280
[#444 'texture_storage_2d']: r#280
[#444 'texture_storage_2d_array']: r#280
[#444 'texture_storage_3d']: r#280
[#444 'true']: r#280
[#444 'u32']: r#280
[#444 'vec2']: r#280
[#444 'vec3']: r#280
[#444 'vec4']: r#280
[#444 '~']: r#280
[#445 '!']: r#281
[#445 '&']: r#281
[#445 '(']: r#281
[#445 '*']: r#281
[#445 '-']: r#281
[#445 'array']: r#281
[#445 'bitcast']: r#281
[#445 'bool']: r#281
[#445 'f16']: r#281
[#445 'f32']: r#281
[#445 'false']: r#281
[#445 'i32']: r#281
[#445 'mat2x2']: r#281
[#445 'mat2x3']: r#281
[#445 'mat2x4']: r#281
[#445 'mat3x2']: r#281
[#445 'mat3x3']: r#281
[#445 'mat3x4']: r#281
[#445 'mat4x2']: r#281
[#445 'mat4x3']: r#281
[#445 'mat4x4']: r#281
[#445 'ptr']: r#281
[#445 'sampler']: r#281
[#445 'sampler_comparison']: r#281
[#445 'texture_1d']: r#281
[#445 'texture_2d']: r#281
[#445 'texture_2d_array']: r#281
[#445 'texture_3d']: r#281
[#445 'texture_cube']: r#281
[#445 'texture_cube_array']: r#281
[#445 'texture_depth_2d']: r#281
[#445 'texture_depth_2d_array']: r#281
[#445 'texture_depth_cube']: r#281
[#445 'texture_depth_cube_array']: r#281
[#445 'texture_depth_multisampled_2d']: r#281
[#445 'texture_multisampled_2d']: r#281
[#445 'texture_storage_1d']: r#281
[#445 'texture_storage_2d']: r#281
[#445 'texture_storage_2d_array']: r#281
[#445 'texture_storage_3d']: r#281
[#445 'true']: r#281
[#445 'u32']: r#281
[#445 'vec2']: r#281
[#445 'vec3']: r#281
[#445 'vec4']: r#281
[#445 '~']: r#281
[#446 '!']: r#282
[#446 '&']: r#282
[#446 '(']: r#282
[#446 '*']: r#282
[#446 '-']: r#282
[#446 'array']: r#282
[#446 'bitcast']: r#282
[#446 'bool']: r#282
[#446 'f16']: r#282
[#446 'f32']: r#282
[#446 'false']: r#282
[#446 'i32']: r#282
[#446 'mat2x2']: r#282
[#446 'mat2x3']: r#282
[#446 'mat2x4']: r#282
[#446 'mat3x2']: r#282
[#446 'mat3x3']: r#282
[#446 'mat3x4']: r#282
[#446 'mat4x2']: r#282
[#446 'mat4x3']: r#282
[#446 'mat4x4']: r#282
[#446 'ptr']: r#282
[#446 'sampler']: r#282
[#446 'sampler_comparison']: r#282
[#446 'texture_1d']: r#282
[#446 'texture_2d']: r#282
[#446 'texture_2d_array']: r#282
[#446 'texture_3d']: r#282
[#446 'texture_cube']: r#282
[#446 'texture_cube_array']: r#282
[#446 'texture_depth_2d']: r#282
[#446 'texture_depth_2d_array']: r#282
[#446 'texture_depth_cube']: r#282
[#446 'texture_depth_cube_array']: r#282
[#446 'texture_depth_multisampled_2d']: r#282
[#446 'texture_multisampled_2d']: r#282
[#446 'texture_storage_1d']: r#282
[#446 'texture_storage_2d']: r#282
[#446 'texture_storage_2d_array']: r#282
[#446 'texture_storage_3d']: r#282
[#446 'true']: r#282
[#446 'u32']: r#282
[#446 'vec2']: r#282
[#446 'vec3']: r#282
[#446 'vec4']: r#282
[#446 '~']: r#282
[#447 '!']: r#283
[#447 '&']: r#283
[#447 '(']: r#283
[#447 '*']: r#283
[#447 '-']: r#283
[#447 'array']: r#283
[#447 'bitcast']: r#283
[#447 'bool']: r#283
[#447 'f16']: r#283
[#447 'f32']: r#283
[#447 'false']: r#283
[#447 'i32']: r#283
[#447 'mat2x2']: r#283
[#447 'mat2x3']: r#283
[#447 'mat2x4']: r#283
[#447 'mat3x2']: r#283
[#447 'mat3x3']: r#283
[#447 'mat3x4']: r#283
[#447 'mat4x2']: r#283
[#447 'mat4x3']: r#283
[#447 'mat4x4']: r#283
[#447 'ptr']: r#283
[#447 'sampler']: r#283
[#447 'sampler_comparison']: r#283
[#447 'texture_1d']: r#283
[#447 'texture_2d']: r#283
[#447 'texture_2d_array']: r#283
[#447 'texture_3d']: r#283
[#447 'texture_cube']: r#283
[#447 'texture_cube_array']: r#283
[#447 'texture_depth_2d']: r#283
[#447 'texture_depth_2d_array']: r#283
[#447 'texture_depth_cube']: r#283
[#447 'texture_depth_cube_array']: r#283
[#447 'texture_depth_multisampled_2d']: r#283
[#447 'texture_multisampled_2d']: r#283
[#447 'texture_storage_1d']: r#283
[#447 'texture_storage_2d']: r#283
[#447 'texture_storage_2d_array']: r#283
[#447 'texture_storage_3d']: r#283
[#447 'true']: r#283
[#447 'u32']: r#283
[#447 'vec2']: r#283
[#447 'vec3']: r#283
[#447 'vec4']: r#283
[#447 '~']: r#283
[#448 '=']: s#174
[#449 ':']: s#176
[#449 '=']: r#284
[#450 '=']: r#285
[#451 '=']: s#174
[#452 ':']: s#176
[#452 '=']: r#286
[#453 '=']: r#287
[#454 ')']: r#288
[#454 ';']: r#288
[#455 '{']: s#184
[#456 '&']: s#73
[#456 '*']: s#72
[#456 'const']: s#372
[#456 'let']: s#371
[#456 'var']: s#161
[#456 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#457 '&']: s#73
[#457 '*']: s#72
[#457 ';']: s#19
[#457 'break']: s#373
[#457 'const']: s#372
[#457 'continue']: s#374
[#457 'discard']: s#357
[#457 'for']: s#367
[#457 'if']: s#364
[#457 'let']: s#371
[#457 'loop']: s#366
[#457 'return']: s#363
[#457 'staticAssert']: s#26
[#457 'switch']: s#365
[#457 'var']: s#161
[#457 'while']: s#368
[#457 '{']: s#184
[#457 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#458 '{']: s#184
[#459 '{']: s#184
[#460 ';']: r#289
[#461 ';']: r#290
[#462 '&']: r#291
[#462 '(']: r#291
[#462 '*']: r#291
[#462 ';']: r#291
[#462 'break']: r#291
[#462 'const']: r#291
[#462 'continue']: r#291
[#462 'continuing']: r#291
[#462 'discard']: r#291
[#462 'fallthrough']: r#291
[#462 'for']: r#291
[#462 'if']: r#291
[#462 'let']: r#291
[#462 'loop']: r#291
[#462 'return']: r#291
[#462 'staticAssert']: r#291
[#462 'switch']: r#291
[#462 'var']: r#291
[#462 'while']: r#291
[#462 '{']: r#291
[#462 '}']: r#291
[#462 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#291
[#463 '&']: r#292
[#463 '(']: r#292
[#463 '*']: r#292
[#463 ';']: r#292
[#463 'break']: r#292
[#463 'const']: r#292
[#463 'continue']: r#292
[#463 'continuing']: r#292
[#463 'discard']: r#292
[#463 'fallthrough']: r#292
[#463 'for']: r#292
[#463 'if']: r#292
[#463 'let']: r#292
[#463 'loop']: r#292
[#463 'return']: r#292
[#463 'staticAssert']: r#292
[#463 'switch']: r#292
[#463 'var']: r#292
[#463 'while']: r#292
[#463 '{']: r#292
[#463 '}']: r#292
[#463 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#292
[#464 '&']: r#293
[#464 '(']: r#293
[#464 '*']: r#293
[#464 ';']: r#293
[#464 'break']: r#293
[#464 'const']: r#293
[#464 'continue']: r#293
[#464 'continuing']: r#293
[#464 'discard']: r#293
[#464 'fallthrough']: r#293
[#464 'for']: r#293
[#464 'if']: r#293
[#464 'let']: r#293
[#464 'loop']: r#293
[#464 'return']: r#293
[#464 'staticAssert']: r#293
[#464 'switch']: r#293
[#464 'var']: r#293
[#464 'while']: r#293
[#464 '{']: r#293
[#464 '}']: r#293
[#464 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#293
[#465 '&']: r#294
[#465 '(']: r#294
[#465 '*']: r#294
[#465 ';']: r#294
[#465 'break']: r#294
[#465 'const']: r#294
[#465 'continue']: r#294
[#465 'continuing']: r#294
[#465 'discard']: r#294
[#465 'fallthrough']: r#294
[#465 'for']: r#294
[#465 'if']: r#294
[#465 'let']: r#294
[#465 'loop']: r#294
[#465 'return']: r#294
[#465 'staticAssert']: r#294
[#465 'switch']: r#294
[#465 'var']: r#294
[#465 'while']: r#294
[#465 '{']: r#294
[#465 '}']: r#294
[#465 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#294
[#466 '&']: r#295
[#466 '(']: r#295
[#466 '*']: r#295
[#466 ';']: r#295
[#466 'break']: r#295
[#466 'const']: r#295
[#466 'continue']: r#295
[#466 'continuing']: r#295
[#466 'discard']: r#295
[#466 'fallthrough']: r#295
[#466 'for']: r#295
[#466 'if']: r#295
[#466 'let']: r#295
[#466 'loop']: r#295
[#466 'return']: r#295
[#466 'staticAssert']: r#295
[#466 'switch']: r#295
[#466 'var']: r#295
[#466 'while']: r#295
[#466 '{']: r#295
[#466 '}']: r#295
[#466 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#295
[#467 '&']: r#296
[#467 '(']: r#296
[#467 '*']: r#296
[#467 ';']: r#296
[#467 'break']: r#296
[#467 'const']: r#296
[#467 'continue']: r#296
[#467 'continuing']: r#296
[#467 'discard']: r#296
[#467 'fallthrough']: r#296
[#467 'for']: r#296
[#467 'if']: r#296
[#467 'let']: r#296
[#467 'loop']: r#296
[#467 'return']: r#296
[#467 'staticAssert']: r#296
[#467 'switch']: r#296
[#467 'var']: r#296
[#467 'while']: r#296
[#467 '{']: r#296
[#467 '}']: r#296
[#467 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#296
[#468 '&']: r#297
[#468 '(']: r#297
[#468 '*']: r#297
[#468 ';']: r#297
[#468 'break']: r#297
[#468 'const']: r#297
[#468 'continue']: r#297
[#468 'continuing']: r#297
[#468 'discard']: r#297
[#468 'fallthrough']: r#297
[#468 'for']: r#297
[#468 'if']: r#297
[#468 'let']: r#297
[#468 'loop']: r#297
[#468 'return']: r#297
[#468 'staticAssert']: r#297
[#468 'switch']: r#297
[#468 'var']: r#297
[#468 'while']: r#297
[#468 '{']: r#297
[#468 '}']: r#297
[#468 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#297
[#469 '&']: r#298
[#469 '(']: r#298
[#469 '*']: r#298
[#469 ';']: r#298
[#469 'break']: r#298
[#469 'const']: r#298
[#469 'continue']: r#298
[#469 'continuing']: r#298
[#469 'discard']: r#298
[#469 'fallthrough']: r#298
[#469 'for']: r#298
[#469 'if']: r#298
[#469 'let']: r#298
[#469 'loop']: r#298
[#469 'return']: r#298
[#469 'staticAssert']: r#298
[#469 'switch']: r#298
[#469 'var']: r#298
[#469 'while']: r#298
[#469 '{']: r#298
[#469 '}']: r#298
[#469 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#298
[#470 '&']: r#299
[#470 '(']: r#299
[#470 '*']: r#299
[#470 ';']: r#299
[#470 'break']: r#299
[#470 'const']: r#299
[#470 'continue']: r#299
[#470 'continuing']: r#299
[#470 'discard']: r#299
[#470 'fallthrough']: r#299
[#470 'for']: r#299
[#470 'if']: r#299
[#470 'let']: r#299
[#470 'loop']: r#299
[#470 'return']: r#299
[#470 'staticAssert']: r#299
[#470 'switch']: r#299
[#470 'var']: r#299
[#470 'while']: r#299
[#470 '{']: r#299
[#470 '}']: r#299
[#470 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#299
[#471 '&']: r#300
[#471 '(']: r#300
[#471 '*']: r#300
[#471 ';']: r#300
[#471 'break']: r#300
[#471 'const']: r#300
[#471 'continue']: r#300
[#471 'continuing']: r#300
[#471 'discard']: r#300
[#471 'fallthrough']: r#300
[#471 'for']: r#300
[#471 'if']: r#300
[#471 'let']: r#300
[#471 'loop']: r#300
[#471 'return']: r#300
[#471 'staticAssert']: r#300
[#471 'switch']: r#300
[#471 'var']: r#300
[#471 'while']: r#300
[#471 '{']: r#300
[#471 '}']: r#300
[#471 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#300
[#472 '}']: r#301
[#473 '&']: r#302
[#473 '(']: r#302
[#473 '*']: r#302
[#473 ';']: r#302
[#473 '@']: r#302
[#473 'break']: r#302
[#473 'const']: r#302
[#473 'continue']: r#302
[#473 'continuing']: r#302
[#473 'discard']: r#302
[#473 'else']: r#302
[#473 'fallthrough']: r#302
[#473 'fn']: r#302
[#473 'for']: r#302
[#473 'if']: r#302
[#473 'let']: r#302
[#473 'loop']: r#302
[#473 'override']: r#302
[#473 'return']: r#302
[#473 'staticAssert']: r#302
[#473 'struct']: r#302
[#473 'switch']: r#302
[#473 'type']: r#302
[#473 'var']: r#302
[#473 'while']: r#302
[#473 '{']: r#302
[#473 '}']: r#302
[#473 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#302
[#473 EndOfText]: r#302
[#474 '&']: r#303
[#474 '(']: r#303
[#474 '*']: r#303
[#474 ';']: r#303
[#474 '@']: r#303
[#474 'break']: r#303
[#474 'case']: r#303
[#474 'const']: r#303
[#474 'continue']: r#303
[#474 'continuing']: r#303
[#474 'default']: r#303
[#474 'discard']: r#303
[#474 'else']: r#303
[#474 'fallthrough']: r#303
[#474 'fn']: r#303
[#474 'for']: r#303
[#474 'if']: r#303
[#474 'let']: r#303
[#474 'loop']: r#303
[#474 'override']: r#303
[#474 'return']: r#303
[#474 'staticAssert']: r#303
[#474 'struct']: r#303
[#474 'switch']: r#303
[#474 'type']: r#303
[#474 'var']: r#303
[#474 'while']: r#303
[#474 '{']: r#303
[#474 '}']: r#303
[#474 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#303
[#474 EndOfText]: r#303
[#475 'read']: s#523
[#475 'read_write']: s#525
[#475 'write']: s#524
[#476 '(']: r#304
[#476 ')']: r#304
[#476 ',']: r#304
[#476 ';']: r#304
[#476 '=']: r#304
[#476 '>']: r#304
[#476 '{']: r#304
[#476 '}']: r#304
[#477 '(']: r#305
[#477 ')']: r#305
[#477 ',']: r#305
[#477 ';']: r#305
[#477 '=']: r#305
[#477 '>']: r#305
[#477 '{']: r#305
[#477 '}']: r#305
[#478 '>']: s#231
[#479 '!']: s#70
[#479 '&']: s#73
[#479 '(']: s#114
[#479 '*']: s#72
[#479 '-']: s#69
[#479 'array']: s#120
[#479 'bitcast']: s#78
[#479 'bool']: s#87
[#479 'f16']: s#116
[#479 'f32']: s#115
[#479 'false']: s#113
[#479 'i32']: s#117
[#479 'mat2x2']: s#98
[#479 'mat2x3']: s#99
[#479 'mat2x4']: s#100
[#479 'mat3x2']: s#101
[#479 'mat3x3']: s#102
[#479 'mat3x4']: s#103
[#479 'mat4x2']: s#104
[#479 'mat4x3']: s#105
[#479 'mat4x4']: s#106
[#479 'ptr']: s#119
[#479 'sampler']: s#134
[#479 'sampler_comparison']: s#135
[#479 'texture_1d']: s#141
[#479 'texture_2d']: s#142
[#479 'texture_2d_array']: s#143
[#479 'texture_3d']: s#144
[#479 'texture_cube']: s#145
[#479 'texture_cube_array']: s#146
[#479 'texture_depth_2d']: s#136
[#479 'texture_depth_2d_array']: s#137
[#479 'texture_depth_cube']: s#138
[#479 'texture_depth_cube_array']: s#139
[#479 'texture_depth_multisampled_2d']: s#140
[#479 'texture_multisampled_2d']: s#147
[#479 'texture_storage_1d']: s#148
[#479 'texture_storage_2d']: s#149
[#479 'texture_storage_2d_array']: s#150
[#479 'texture_storage_3d']: s#151
[#479 'true']: s#112
[#479 'u32']: s#118
[#479 'vec2']: s#95
[#479 'vec3']: s#96
[#479 'vec4']: s#97
[#479 '~']: s#71
[#479 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#479 /0[fh]/]: s#129
[#479 /0[iu]?/]: s#108
[#479 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#479 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#479 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#479 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#479 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#479 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#479 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#479 /[1-9][0-9]*[fh]/]: s#130
[#479 /[1-9][0-9]*[iu]?/]: s#109
[#480 'array']: s#120
[#480 'bool']: s#87
[#480 'f16']: s#116
[#480 'f32']: s#115
[#480 'i32']: s#117
[#480 'ptr']: s#119
[#480 'sampler']: s#134
[#480 'sampler_comparison']: s#135
[#480 'texture_1d']: s#141
[#480 'texture_2d']: s#142
[#480 'texture_2d_array']: s#143
[#480 'texture_3d']: s#144
[#480 'texture_cube']: s#145
[#480 'texture_cube_array']: s#146
[#480 'texture_depth_2d']: s#136
[#480 'texture_depth_2d_array']: s#137
[#480 'texture_depth_cube']: s#138
[#480 'texture_depth_cube_array']: s#139
[#480 'texture_depth_multisampled_2d']: s#140
[#480 'texture_multisampled_2d']: s#147
[#480 'texture_storage_1d']: s#148
[#480 'texture_storage_2d']: s#149
[#480 'texture_storage_2d_array']: s#150
[#480 'texture_storage_3d']: s#151
[#480 'u32']: s#118
[#480 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#481 '(']: s#114
[#482 '!']: r#306
[#482 '&']: r#306
[#482 '(']: r#306
[#482 '*']: r#306
[#482 '-']: r#306
[#482 'array']: r#306
[#482 'bitcast']: r#306
[#482 'bool']: r#306
[#482 'f16']: r#306
[#482 'f32']: r#306
[#482 'false']: r#306
[#482 'i32']: r#306
[#482 'mat2x2']: r#306
[#482 'mat2x3']: r#306
[#482 'mat2x4']: r#306
[#482 'mat3x2']: r#306
[#482 'mat3x3']: r#306
[#482 'mat3x4']: r#306
[#482 'mat4x2']: r#306
[#482 'mat4x3']: r#306
[#482 'mat4x4']: r#306
[#482 'ptr']: r#306
[#482 'sampler']: r#306
[#482 'sampler_comparison']: r#306
[#482 'texture_1d']: r#306
[#482 'texture_2d']: r#306
[#482 'texture_2d_array']: r#306
[#482 'texture_3d']: r#306
[#482 'texture_cube']: r#306
[#482 'texture_cube_array']: r#306
[#482 'texture_depth_2d']: r#306
[#482 'texture_depth_2d_array']: r#306
[#482 'texture_depth_cube']: r#306
[#482 'texture_depth_cube_array']: r#306
[#482 'texture_depth_multisampled_2d']: r#306
[#482 'texture_multisampled_2d']: r#306
[#482 'texture_storage_1d']: r#306
[#482 'texture_storage_2d']: r#306
[#482 'texture_storage_2d_array']: r#306
[#482 'texture_storage_3d']: r#306
[#482 'true']: r#306
[#482 'u32']: r#306
[#482 'vec2']: r#306
[#482 'vec3']: r#306
[#482 'vec4']: r#306
[#482 '~']: r#306
[#483 '!']: r#307
[#483 '&']: r#307
[#483 '(']: r#307
[#483 '*']: r#307
[#483 '-']: r#307
[#483 'array']: r#307
[#483 'bitcast']: r#307
[#483 'bool']: r#307
[#483 'f16']: r#307
[#483 'f32']: r#307
[#483 'false']: r#307
[#483 'i32']: r#307
[#483 'mat2x2']: r#307
[#483 'mat2x3']: r#307
[#483 'mat2x4']: r#307
[#483 'mat3x2']: r#307
[#483 'mat3x3']: r#307
[#483 'mat3x4']: r#307
[#483 'mat4x2']: r#307
[#483 'mat4x3']: r#307
[#483 'mat4x4']: r#307
[#483 'ptr']: r#307
[#483 'sampler']: r#307
[#483 'sampler_comparison']: r#307
[#483 'texture_1d']: r#307
[#483 'texture_2d']: r#307
[#483 'texture_2d_array']: r#307
[#483 'texture_3d']: r#307
[#483 'texture_cube']: r#307
[#483 'texture_cube_array']: r#307
[#483 'texture_depth_2d']: r#307
[#483 'texture_depth_2d_array']: r#307
[#483 'texture_depth_cube']: r#307
[#483 'texture_depth_cube_array']: r#307
[#483 'texture_depth_multisampled_2d']: r#307
[#483 'texture_multisampled_2d']: r#307
[#483 'texture_storage_1d']: r#307
[#483 'texture_storage_2d']: r#307
[#483 'texture_storage_2d_array']: r#307
[#483 'texture_storage_3d']: r#307
[#483 'true']: r#307
[#483 'u32']: r#307
[#483 'vec2']: r#307
[#483 'vec3']: r#307
[#483 'vec4']: r#307
[#483 '~']: r#307
[#484 ',']: s#401
[#485 '!=']: r#308
[#485 '%']: r#308
[#485 '&&']: r#308
[#485 '&']: r#308
[#485 ')']: r#308
[#485 '*']: r#308
[#485 '+']: r#308
[#485 ',']: r#308
[#485 '-']: r#308
[#485 '.']: r#308
[#485 '/']: r#308
[#485 ':']: r#308
[#485 ';']: r#308
[#485 '<']: r#308
[#485 '<<']: r#308
[#485 '<=']: r#308
[#485 '==']: r#308
[#485 '>']: r#308
[#485 '>=']: r#308
[#485 '>>']: r#308
[#485 '[']: r#308
[#485 ']']: r#308
[#485 '^']: r#308
[#485 '{']: r#308
[#485 '|']: r#308
[#485 '||']: r#308
[#486 '.']: s#202
[#486 '[']: s#201
[#487 '!=']: r#309
[#487 '%']: r#309
[#487 '%=']: r#309
[#487 '&&']: r#309
[#487 '&']: r#309
[#487 '&=']: r#309
[#487 ')']: r#309
[#487 '*']: r#309
[#487 '*=']: r#309
[#487 '+']: r#309
[#487 '++']: r#309
[#487 '+=']: r#309
[#487 ',']: r#309
[#487 '-']: r#309
[#487 '--']: r#309
[#487 '-=']: r#309
[#487 '.']: r#309
[#487 '/']: r#309
[#487 '/=']: r#309
[#487 ':']: r#309
[#487 ';']: r#309
[#487 '<']: r#309
[#487 '<<']: r#309
[#487 '<<=']: r#309
[#487 '<=']: r#309
[#487 '=']: r#309
[#487 '==']: r#309
[#487 '>']: r#309
[#487 '>=']: r#309
[#487 '>>']: r#309
[#487 '>>=']: r#309
[#487 '[']: r#309
[#487 ']']: r#309
[#487 '^']: r#309
[#487 '^=']: r#309
[#487 '{']: r#309
[#487 '|']: r#309
[#487 '|=']: r#309
[#487 '||']: r#309
[#488 '!=']: r#310
[#488 '%']: r#310
[#488 '%=']: r#310
[#488 '&&']: r#310
[#488 '&']: r#310
[#488 '&=']: r#310
[#488 ')']: r#310
[#488 '*']: r#310
[#488 '*=']: r#310
[#488 '+']: r#310
[#488 '++']: r#310
[#488 '+=']: r#310
[#488 ',']: r#310
[#488 '-']: r#310
[#488 '--']: r#310
[#488 '-=']: r#310
[#488 '/']: r#310
[#488 '/=']: r#310
[#488 ':']: r#310
[#488 ';']: r#310
[#488 '<']: r#310
[#488 '<<']: r#310
[#488 '<<=']: r#310
[#488 '<=']: r#310
[#488 '=']: r#310
[#488 '==']: r#310
[#488 '>']: r#310
[#488 '>=']: r#310
[#488 '>>']: r#310
[#488 '>>=']: r#310
[#488 ']']: r#310
[#488 '^']: r#310
[#488 '^=']: r#310
[#488 '{']: r#310
[#488 '|']: r#310
[#488 '|=']: r#310
[#488 '||']: r#310
[#489 '!=']: r#311
[#489 '%']: r#311
[#489 '%=']: r#311
[#489 '&&']: r#311
[#489 '&']: r#311
[#489 '&=']: r#311
[#489 ')']: r#311
[#489 '*']: r#311
[#489 '*=']: r#311
[#489 '+']: r#311
[#489 '++']: r#311
[#489 '+=']: r#311
[#489 ',']: r#311
[#489 '-']: r#311
[#489 '--']: r#311
[#489 '-=']: r#311
[#489 '/']: r#311
[#489 '/=']: r#311
[#489 ':']: r#311
[#489 ';']: r#311
[#489 '<']: r#311
[#489 '<<']: r#311
[#489 '<<=']: r#311
[#489 '<=']: r#311
[#489 '=']: r#311
[#489 '==']: r#311
[#489 '>']: r#311
[#489 '>=']: r#311
[#489 '>>']: r#311
[#489 '>>=']: r#311
[#489 ']']: r#311
[#489 '^']: r#311
[#489 '^=']: r#311
[#489 '{']: r#311
[#489 '|']: r#311
[#489 '|=']: r#311
[#489 '||']: r#311
[#490 '!=']: r#312
[#490 '%']: r#312
[#490 '%=']: r#312
[#490 '&&']: r#312
[#490 '&']: r#312
[#490 '&=']: r#312
[#490 ')']: r#312
[#490 '*']: r#312
[#490 '*=']: r#312
[#490 '+']: r#312
[#490 '++']: r#312
[#490 '+=']: r#312
[#490 ',']: r#312
[#490 '-']: r#312
[#490 '--']: r#312
[#490 '-=']: r#312
[#490 '/']: r#312
[#490 '/=']: r#312
[#490 ':']: r#312
[#490 ';']: r#312
[#490 '<']: r#312
[#490 '<<']: r#312
[#490 '<<=']: r#312
[#490 '<=']: r#312
[#490 '=']: r#312
[#490 '==']: r#312
[#490 '>']: r#312
[#490 '>=']: r#312
[#490 '>>']: r#312
[#490 '>>=']: r#312
[#490 ']']: r#312
[#490 '^']: r#312
[#490 '^=']: r#312
[#490 '{']: r#312
[#490 '|']: r#312
[#490 '|=']: r#312
[#490 '||']: r#312
[#491 '!=']: r#313
[#491 '%']: r#313
[#491 '%=']: r#313
[#491 '&&']: r#313
[#491 '&']: r#313
[#491 '&=']: r#313
[#491 ')']: r#313
[#491 '*']: r#313
[#491 '*=']: r#313
[#491 '+']: r#313
[#491 '++']: r#313
[#491 '+=']: r#313
[#491 ',']: r#313
[#491 '-']: r#313
[#491 '--']: r#313
[#491 '-=']: r#313
[#491 '/']: r#313
[#491 '/=']: r#313
[#491 ':']: r#313
[#491 ';']: r#313
[#491 '<']: r#313
[#491 '<<']: r#313
[#491 '<<=']: r#313
[#491 '<=']: r#313
[#491 '=']: r#313
[#491 '==']: r#313
[#491 '>']: r#313
[#491 '>=']: r#313
[#491 '>>']: r#313
[#491 '>>=']: r#313
[#491 ']']: r#313
[#491 '^']: r#313
[#491 '^=']: r#313
[#491 '{']: r#313
[#491 '|']: r#313
[#491 '|=']: r#313
[#491 '||']: r#313
[#492 '@']: r#314
[#492 'array']: r#314
[#492 'bool']: r#314
[#492 'f16']: r#314
[#492 'f32']: r#314
[#492 'fn']: r#314
[#492 'i32']: r#314
[#492 'override']: r#314
[#492 'ptr']: r#314
[#492 'sampler']: r#314
[#492 'sampler_comparison']: r#314
[#492 'texture_1d']: r#314
[#492 'texture_2d']: r#314
[#492 'texture_2d_array']: r#314
[#492 'texture_3d']: r#314
[#492 'texture_cube']: r#314
[#492 'texture_cube_array']: r#314
[#492 'texture_depth_2d']: r#314
[#492 'texture_depth_2d_array']: r#314
[#492 'texture_depth_cube']: r#314
[#492 'texture_depth_cube_array']: r#314
[#492 'texture_depth_multisampled_2d']: r#314
[#492 'texture_multisampled_2d']: r#314
[#492 'texture_storage_1d']: r#314
[#492 'texture_storage_2d']: r#314
[#492 'texture_storage_2d_array']: r#314
[#492 'texture_storage_3d']: r#314
[#492 'u32']: r#314
[#492 'var']: r#314
[#492 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#314
[#493 ')']: r#315
[#493 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#493 /0[iu]?/]: s#108
[#493 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#493 /[1-9][0-9]*[iu]?/]: s#109
[#494 ')']: s#316
[#495 '@']: r#316
[#495 'array']: r#316
[#495 'bool']: r#316
[#495 'f16']: r#316
[#495 'f32']: r#316
[#495 'fn']: r#316
[#495 'i32']: r#316
[#495 'override']: r#316
[#495 'ptr']: r#316
[#495 'sampler']: r#316
[#495 'sampler_comparison']: r#316
[#495 'texture_1d']: r#316
[#495 'texture_2d']: r#316
[#495 'texture_2d_array']: r#316
[#495 'texture_3d']: r#316
[#495 'texture_cube']: r#316
[#495 'texture_cube_array']: r#316
[#495 'texture_depth_2d']: r#316
[#495 'texture_depth_2d_array']: r#316
[#495 'texture_depth_cube']: r#316
[#495 'texture_depth_cube_array']: r#316
[#495 'texture_depth_multisampled_2d']: r#316
[#495 'texture_multisampled_2d']: r#316
[#495 'texture_storage_1d']: r#316
[#495 'texture_storage_2d']: r#316
[#495 'texture_storage_2d_array']: r#316
[#495 'texture_storage_3d']: r#316
[#495 'u32']: r#316
[#495 'var']: r#316
[#495 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#316
[#496 ')']: r#315
[#497 '@']: r#317
[#497 'array']: r#317
[#497 'bool']: r#317
[#497 'f16']: r#317
[#497 'f32']: r#317
[#497 'fn']: r#317
[#497 'i32']: r#317
[#497 'override']: r#317
[#497 'ptr']: r#317
[#497 'sampler']: r#317
[#497 'sampler_comparison']: r#317
[#497 'texture_1d']: r#317
[#497 'texture_2d']: r#317
[#497 'texture_2d_array']: r#317
[#497 'texture_3d']: r#317
[#497 'texture_cube']: r#317
[#497 'texture_cube_array']: r#317
[#497 'texture_depth_2d']: r#317
[#497 'texture_depth_2d_array']: r#317
[#497 'texture_depth_cube']: r#317
[#497 'texture_depth_cube_array']: r#317
[#497 'texture_depth_multisampled_2d']: r#317
[#497 'texture_multisampled_2d']: r#317
[#497 'texture_storage_1d']: r#317
[#497 'texture_storage_2d']: r#317
[#497 'texture_storage_2d_array']: r#317
[#497 'texture_storage_3d']: r#317
[#497 'u32']: r#317
[#497 'var']: r#317
[#497 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#317
[#498 '@']: r#318
[#498 'array']: r#318
[#498 'bool']: r#318
[#498 'f16']: r#318
[#498 'f32']: r#318
[#498 'fn']: r#318
[#498 'i32']: r#318
[#498 'override']: r#318
[#498 'ptr']: r#318
[#498 'sampler']: r#318
[#498 'sampler_comparison']: r#318
[#498 'texture_1d']: r#318
[#498 'texture_2d']: r#318
[#498 'texture_2d_array']: r#318
[#498 'texture_3d']: r#318
[#498 'texture_cube']: r#318
[#498 'texture_cube_array']: r#318
[#498 'texture_depth_2d']: r#318
[#498 'texture_depth_2d_array']: r#318
[#498 'texture_depth_cube']: r#318
[#498 'texture_depth_cube_array']: r#318
[#498 'texture_depth_multisampled_2d']: r#318
[#498 'texture_multisampled_2d']: r#318
[#498 'texture_storage_1d']: r#318
[#498 'texture_storage_2d']: r#318
[#498 'texture_storage_2d_array']: r#318
[#498 'texture_storage_3d']: r#318
[#498 'u32']: r#318
[#498 'var']: r#318
[#498 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#318
[#499 ')']: r#315
[#499 'center']: s#506
[#499 'centroid']: s#507
[#499 'sample']: s#508
[#500 '@']: r#319
[#500 'array']: r#319
[#500 'bool']: r#319
[#500 'f16']: r#319
[#500 'f32']: r#319
[#500 'fn']: r#319
[#500 'i32']: r#319
[#500 'override']: r#319
[#500 'ptr']: r#319
[#500 'sampler']: r#319
[#500 'sampler_comparison']: r#319
[#500 'texture_1d']: r#319
[#500 'texture_2d']: r#319
[#500 'texture_2d_array']: r#319
[#500 'texture_3d']: r#319
[#500 'texture_cube']: r#319
[#500 'texture_cube_array']: r#319
[#500 'texture_depth_2d']: r#319
[#500 'texture_depth_2d_array']: r#319
[#500 'texture_depth_cube']: r#319
[#500 'texture_depth_cube_array']: r#319
[#500 'texture_depth_multisampled_2d']: r#319
[#500 'texture_multisampled_2d']: r#319
[#500 'texture_storage_1d']: r#319
[#500 'texture_storage_2d']: r#319
[#500 'texture_storage_2d_array']: r#319
[#500 'texture_storage_3d']: r#319
[#500 'u32']: r#319
[#500 'var']: r#319
[#500 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#319
[#501 '@']: r#320
[#501 'array']: r#320
[#501 'bool']: r#320
[#501 'f16']: r#320
[#501 'f32']: r#320
[#501 'fn']: r#320
[#501 'i32']: r#320
[#501 'override']: r#320
[#501 'ptr']: r#320
[#501 'sampler']: r#320
[#501 'sampler_comparison']: r#320
[#501 'texture_1d']: r#320
[#501 'texture_2d']: r#320
[#501 'texture_2d_array']: r#320
[#501 'texture_3d']: r#320
[#501 'texture_cube']: r#320
[#501 'texture_cube_array']: r#320
[#501 'texture_depth_2d']: r#320
[#501 'texture_depth_2d_array']: r#320
[#501 'texture_depth_cube']: r#320
[#501 'texture_depth_cube_array']: r#320
[#501 'texture_depth_multisampled_2d']: r#320
[#501 'texture_multisampled_2d']: r#320
[#501 'texture_storage_1d']: r#320
[#501 'texture_storage_2d']: r#320
[#501 'texture_storage_2d_array']: r#320
[#501 'texture_storage_3d']: r#320
[#501 'u32']: r#320
[#501 'var']: r#320
[#501 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#320
[#502 '@']: r#321
[#502 'array']: r#321
[#502 'bool']: r#321
[#502 'f16']: r#321
[#502 'f32']: r#321
[#502 'fn']: r#321
[#502 'i32']: r#321
[#502 'override']: r#321
[#502 'ptr']: r#321
[#502 'sampler']: r#321
[#502 'sampler_comparison']: r#321
[#502 'texture_1d']: r#321
[#502 'texture_2d']: r#321
[#502 'texture_2d_array']: r#321
[#502 'texture_3d']: r#321
[#502 'texture_cube']: r#321
[#502 'texture_cube_array']: r#321
[#502 'texture_depth_2d']: r#321
[#502 'texture_depth_2d_array']: r#321
[#502 'texture_depth_cube']: r#321
[#502 'texture_depth_cube_array']: r#321
[#502 'texture_depth_multisampled_2d']: r#321
[#502 'texture_multisampled_2d']: r#321
[#502 'texture_storage_1d']: r#321
[#502 'texture_storage_2d']: r#321
[#502 'texture_storage_2d_array']: r#321
[#502 'texture_storage_3d']: r#321
[#502 'u32']: r#321
[#502 'var']: r#321
[#502 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#321
[#503 '@']: r#322
[#503 'array']: r#322
[#503 'bool']: r#322
[#503 'f16']: r#322
[#503 'f32']: r#322
[#503 'fn']: r#322
[#503 'i32']: r#322
[#503 'override']: r#322
[#503 'ptr']: r#322
[#503 'sampler']: r#322
[#503 'sampler_comparison']: r#322
[#503 'texture_1d']: r#322
[#503 'texture_2d']: r#322
[#503 'texture_2d_array']: r#322
[#503 'texture_3d']: r#322
[#503 'texture_cube']: r#322
[#503 'texture_cube_array']: r#322
[#503 'texture_depth_2d']: r#322
[#503 'texture_depth_2d_array']: r#322
[#503 'texture_depth_cube']: r#322
[#503 'texture_depth_cube_array']: r#322
[#503 'texture_depth_multisampled_2d']: r#322
[#503 'texture_multisampled_2d']: r#322
[#503 'texture_storage_1d']: r#322
[#503 'texture_storage_2d']: r#322
[#503 'texture_storage_2d_array']: r#322
[#503 'texture_storage_3d']: r#322
[#503 'u32']: r#322
[#503 'var']: r#322
[#503 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#322
[#504 '@']: r#323
[#504 'array']: r#323
[#504 'bool']: r#323
[#504 'f16']: r#323
[#504 'f32']: r#323
[#504 'fn']: r#323
[#504 'i32']: r#323
[#504 'override']: r#323
[#504 'ptr']: r#323
[#504 'sampler']: r#323
[#504 'sampler_comparison']: r#323
[#504 'texture_1d']: r#323
[#504 'texture_2d']: r#323
[#504 'texture_2d_array']: r#323
[#504 'texture_3d']: r#323
[#504 'texture_cube']: r#323
[#504 'texture_cube_array']: r#323
[#504 'texture_depth_2d']: r#323
[#504 'texture_depth_2d_array']: r#323
[#504 'texture_depth_cube']: r#323
[#504 'texture_depth_cube_array']: r#323
[#504 'texture_depth_multisampled_2d']: r#323
[#504 'texture_multisampled_2d']: r#323
[#504 'texture_storage_1d']: r#323
[#504 'texture_storage_2d']: r#323
[#504 'texture_storage_2d_array']: r#323
[#504 'texture_storage_3d']: r#323
[#504 'u32']: r#323
[#504 'var']: r#323
[#504 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#323
[#505 ',']: s#401
[#506 ')']: r#324
[#506 ',']: r#324
[#507 ')']: r#325
[#507 ',']: r#325
[#508 ')']: r#326
[#508 ',']: r#326
[#509 '@']: r#327
[#509 'array']: r#327
[#509 'bool']: r#327
[#509 'f16']: r#327
[#509 'f32']: r#327
[#509 'fn']: r#327
[#509 'i32']: r#327
[#509 'override']: r#327
[#509 'ptr']: r#327
[#509 'sampler']: r#327
[#509 'sampler_comparison']: r#327
[#509 'texture_1d']: r#327
[#509 'texture_2d']: r#327
[#509 'texture_2d_array']: r#327
[#509 'texture_3d']: r#327
[#509 'texture_cube']: r#327
[#509 'texture_cube_array']: r#327
[#509 'texture_depth_2d']: r#327
[#509 'texture_depth_2d_array']: r#327
[#509 'texture_depth_cube']: r#327
[#509 'texture_depth_cube_array']: r#327
[#509 'texture_depth_multisampled_2d']: r#327
[#509 'texture_multisampled_2d']: r#327
[#509 'texture_storage_1d']: r#327
[#509 'texture_storage_2d']: r#327
[#509 'texture_storage_2d_array']: r#327
[#509 'texture_storage_3d']: r#327
[#509 'u32']: r#327
[#509 'var']: r#327
[#509 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#327
[#510 ',']: s#401
[#511 '!=']: r#328
[#511 '%']: r#328
[#511 '%=']: r#328
[#511 '&&']: r#328
[#511 '&']: r#328
[#511 '&=']: r#328
[#511 ')']: r#328
[#511 '*']: r#328
[#511 '*=']: r#328
[#511 '+']: r#328
[#511 '++']: r#328
[#511 '+=']: r#328
[#511 ',']: r#328
[#511 '-']: r#328
[#511 '--']: r#328
[#511 '-=']: r#328
[#511 '/']: r#328
[#511 '/=']: r#328
[#511 ':']: r#328
[#511 ';']: r#328
[#511 '<']: r#328
[#511 '<<']: r#328
[#511 '<<=']: r#328
[#511 '<=']: r#328
[#511 '=']: r#328
[#511 '==']: r#328
[#511 '>']: r#328
[#511 '>=']: r#328
[#511 '>>']: r#328
[#511 '>>=']: r#328
[#511 ']']: r#328
[#511 '^']: r#328
[#511 '^=']: r#328
[#511 '{']: r#328
[#511 '|']: r#328
[#511 '|=']: r#328
[#511 '||']: r#328
[#512 '!=']: r#329
[#512 '%']: r#329
[#512 '%=']: r#329
[#512 '&&']: r#329
[#512 '&']: r#329
[#512 '&=']: r#329
[#512 ')']: r#329
[#512 '*']: r#329
[#512 '*=']: r#329
[#512 '+']: r#329
[#512 '++']: r#329
[#512 '+=']: r#329
[#512 ',']: r#329
[#512 '-']: r#329
[#512 '--']: r#329
[#512 '-=']: r#329
[#512 '/']: r#329
[#512 '/=']: r#329
[#512 ':']: r#329
[#512 ';']: r#329
[#512 '<']: r#329
[#512 '<<']: r#329
[#512 '<<=']: r#329
[#512 '<=']: r#329
[#512 '=']: r#329
[#512 '==']: r#329
[#512 '>']: r#329
[#512 '>=']: r#329
[#512 '>>']: r#329
[#512 '>>=']: r#329
[#512 ']']: r#329
[#512 '^']: r#329
[#512 '^=']: r#329
[#512 '{']: r#329
[#512 '|']: r#329
[#512 '|=']: r#329
[#512 '||']: r#329
[#513 ')']: r#330
[#514 ')']: r#331
[#515 '!=']: r#332
[#515 '%']: r#332
[#515 '&&']: r#332
[#515 '&']: r#332
[#515 ')']: r#332
[#515 '*']: r#332
[#515 '+']: r#332
[#515 ',']: r#332
[#515 '-']: r#332
[#515 '.']: r#332
[#515 '/']: r#332
[#515 ':']: r#332
[#515 ';']: r#332
[#515 '<']: r#332
[#515 '<<']: r#332
[#515 '<=']: r#332
[#515 '==']: r#332
[#515 '>']: r#332
[#515 '>=']: r#332
[#515 '>>']: r#332
[#515 '[']: r#332
[#515 ']']: r#332
[#515 '^']: r#332
[#515 '{']: r#332
[#515 '|']: r#332
[#515 '||']: r#332
[#516 ',']: s#401
[#517 '>']: r#333
[#518 '+']: s#219
[#518 '-']: s#69
[#518 '>']: r#334
[#519 '>']: r#335
[#520 '%']: r#31
[#520 '&']: r#28
[#520 '*']: r#31
[#520 '+']: r#31
[#520 '-']: r#31
[#520 '/']: r#31
[#520 '>']: r#31
[#520 '^']: r#30
[#520 '|']: r#29
[#521 '(']: r#336
[#521 ')']: r#336
[#521 ',']: r#336
[#521 ';']: r#336
[#521 '=']: r#336
[#521 '>']: r#336
[#521 '{']: r#336
[#521 '}']: r#336
[#522 '>']: s#231
[#523 '>']: r#337
[#524 '>']: r#338
[#525 '>']: r#339
[#526 'else']: s#580
[#527 'case']: s#577
[#527 'default']: s#578
[#528 'continuing']: s#573
[#529 'continuing']: r#340
[#529 '}']: r#340
[#530 '&']: s#73
[#530 '*']: s#72
[#530 ';']: s#19
[#530 'break']: s#373
[#530 'const']: s#372
[#530 'continue']: s#374
[#530 'discard']: s#357
[#530 'for']: s#367
[#530 'if']: s#364
[#530 'let']: s#371
[#530 'loop']: s#366
[#530 'return']: s#363
[#530 'staticAssert']: s#26
[#530 'switch']: s#365
[#530 'var']: s#161
[#530 'while']: s#368
[#530 '{']: s#184
[#530 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#531 ')']: s#316
[#532 ';']: s#19
[#533 ';']: r#341
[#534 ';']: r#342
[#535 ';']: r#343
[#536 ';']: r#344
[#537 ';']: r#345
[#538 ';']: r#346
[#539 '&']: r#347
[#539 '(']: r#347
[#539 '*']: r#347
[#539 ';']: r#347
[#539 'break']: r#347
[#539 'const']: r#347
[#539 'continue']: r#347
[#539 'continuing']: r#347
[#539 'discard']: r#347
[#539 'fallthrough']: r#347
[#539 'for']: r#347
[#539 'if']: r#347
[#539 'let']: r#347
[#539 'loop']: r#347
[#539 'return']: r#347
[#539 'staticAssert']: r#347
[#539 'switch']: r#347
[#539 'var']: r#347
[#539 'while']: r#347
[#539 '{']: r#347
[#539 '}']: r#347
[#539 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#347
[#540 '!']: s#70
[#540 '&']: s#73
[#540 '(']: s#114
[#540 '*']: s#72
[#540 '-']: s#69
[#540 'array']: s#120
[#540 'bitcast']: s#78
[#540 'bool']: s#87
[#540 'f16']: s#116
[#540 'f32']: s#115
[#540 'false']: s#113
[#540 'i32']: s#117
[#540 'mat2x2']: s#98
[#540 'mat2x3']: s#99
[#540 'mat2x4']: s#100
[#540 'mat3x2']: s#101
[#540 'mat3x3']: s#102
[#540 'mat3x4']: s#103
[#540 'mat4x2']: s#104
[#540 'mat4x3']: s#105
[#540 'mat4x4']: s#106
[#540 'ptr']: s#119
[#540 'sampler']: s#134
[#540 'sampler_comparison']: s#135
[#540 'texture_1d']: s#141
[#540 'texture_2d']: s#142
[#540 'texture_2d_array']: s#143
[#540 'texture_3d']: s#144
[#540 'texture_cube']: s#145
[#540 'texture_cube_array']: s#146
[#540 'texture_depth_2d']: s#136
[#540 'texture_depth_2d_array']: s#137
[#540 'texture_depth_cube']: s#138
[#540 'texture_depth_cube_array']: s#139
[#540 'texture_depth_multisampled_2d']: s#140
[#540 'texture_multisampled_2d']: s#147
[#540 'texture_storage_1d']: s#148
[#540 'texture_storage_2d']: s#149
[#540 'texture_storage_2d_array']: s#150
[#540 'texture_storage_3d']: s#151
[#540 'true']: s#112
[#540 'u32']: s#118
[#540 'vec2']: s#95
[#540 'vec3']: s#96
[#540 'vec4']: s#97
[#540 '~']: s#71
[#540 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#540 /0[fh]/]: s#129
[#540 /0[iu]?/]: s#108
[#540 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#540 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#540 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#540 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#540 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#540 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#540 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#540 /[1-9][0-9]*[fh]/]: s#130
[#540 /[1-9][0-9]*[iu]?/]: s#109
[#541 '!']: s#70
[#541 '&']: s#73
[#541 '(']: s#114
[#541 '*']: s#72
[#541 '-']: s#69
[#541 'array']: s#120
[#541 'bitcast']: s#78
[#541 'bool']: s#87
[#541 'f16']: s#116
[#541 'f32']: s#115
[#541 'false']: s#113
[#541 'i32']: s#117
[#541 'mat2x2']: s#98
[#541 'mat2x3']: s#99
[#541 'mat2x4']: s#100
[#541 'mat3x2']: s#101
[#541 'mat3x3']: s#102
[#541 'mat3x4']: s#103
[#541 'mat4x2']: s#104
[#541 'mat4x3']: s#105
[#541 'mat4x4']: s#106
[#541 'ptr']: s#119
[#541 'sampler']: s#134
[#541 'sampler_comparison']: s#135
[#541 'texture_1d']: s#141
[#541 'texture_2d']: s#142
[#541 'texture_2d_array']: s#143
[#541 'texture_3d']: s#144
[#541 'texture_cube']: s#145
[#541 'texture_cube_array']: s#146
[#541 'texture_depth_2d']: s#136
[#541 'texture_depth_2d_array']: s#137
[#541 'texture_depth_cube']: s#138
[#541 'texture_depth_cube_array']: s#139
[#541 'texture_depth_multisampled_2d']: s#140
[#541 'texture_multisampled_2d']: s#147
[#541 'texture_storage_1d']: s#148
[#541 'texture_storage_2d']: s#149
[#541 'texture_storage_2d_array']: s#150
[#541 'texture_storage_3d']: s#151
[#541 'true']: s#112
[#541 'u32']: s#118
[#541 'vec2']: s#95
[#541 'vec3']: s#96
[#541 'vec4']: s#97
[#541 '~']: s#71
[#541 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#541 /0[fh]/]: s#129
[#541 /0[iu]?/]: s#108
[#541 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#541 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#541 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#541 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#541 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#541 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#541 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#541 /[1-9][0-9]*[fh]/]: s#130
[#541 /[1-9][0-9]*[iu]?/]: s#109
[#542 ')']: r#348
[#542 ';']: r#348
[#543 ')']: s#316
[#544 '%=']: r#349
[#544 '&=']: r#349
[#544 ')']: r#349
[#544 '*=']: r#349
[#544 '++']: r#349
[#544 '+=']: r#349
[#544 '--']: r#349
[#544 '-=']: r#349
[#544 '/=']: r#349
[#544 '<<=']: r#349
[#544 '=']: r#349
[#544 '>>=']: r#349
[#544 '^=']: r#349
[#544 '|=']: r#349
[#545 '%=']: r#350
[#545 '&=']: r#350
[#545 ')']: r#350
[#545 '*=']: r#350
[#545 '++']: r#350
[#545 '+=']: r#350
[#545 '--']: r#350
[#545 '-=']: r#350
[#545 '/=']: r#350
[#545 '<<=']: r#350
[#545 '=']: r#350
[#545 '>>=']: r#350
[#545 '^=']: r#350
[#545 '|=']: r#350
[#546 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#351
[#547 ')']: r#352
[#547 ',']: r#352
[#548 ':']: s#176
[#549 '@']: r#353
[#549 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#353
[#550 '@']: r#354
[#550 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#354
[#551 ',']: s#401
[#552 '->']: s#562
[#553 '}']: s#474
[#554 '}']: r#355
[#555 'array']: s#120
[#555 'bool']: s#87
[#555 'f16']: s#116
[#555 'f32']: s#115
[#555 'i32']: s#117
[#555 'ptr']: s#119
[#555 'sampler']: s#134
[#555 'sampler_comparison']: s#135
[#555 'texture_1d']: s#141
[#555 'texture_2d']: s#142
[#555 'texture_2d_array']: s#143
[#555 'texture_3d']: s#144
[#555 'texture_cube']: s#145
[#555 'texture_cube_array']: s#146
[#555 'texture_depth_2d']: s#136
[#555 'texture_depth_2d_array']: s#137
[#555 'texture_depth_cube']: s#138
[#555 'texture_depth_cube_array']: s#139
[#555 'texture_depth_multisampled_2d']: s#140
[#555 'texture_multisampled_2d']: s#147
[#555 'texture_storage_1d']: s#148
[#555 'texture_storage_2d']: s#149
[#555 'texture_storage_2d_array']: s#150
[#555 'texture_storage_3d']: s#151
[#555 'u32']: s#118
[#555 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#556 '>']: r#356
[#557 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#357
[#558 ',']: r#358
[#558 '}']: r#358
[#559 ';']: r#359
[#559 '@']: r#359
[#559 'const']: r#359
[#559 'fn']: r#359
[#559 'override']: r#359
[#559 'staticAssert']: r#359
[#559 'struct']: r#359
[#559 'type']: r#359
[#559 'var']: r#359
[#559 EndOfText]: r#359
[#560 '{']: r#360
[#561 '@']: s#32
[#562 '@']: r#361
[#562 'array']: r#361
[#562 'bool']: r#361
[#562 'f16']: r#361
[#562 'f32']: r#361
[#562 'i32']: r#361
[#562 'ptr']: r#361
[#562 'sampler']: r#361
[#562 'sampler_comparison']: r#361
[#562 'texture_1d']: r#361
[#562 'texture_2d']: r#361
[#562 'texture_2d_array']: r#361
[#562 'texture_3d']: r#361
[#562 'texture_cube']: r#361
[#562 'texture_cube_array']: r#361
[#562 'texture_depth_2d']: r#361
[#562 'texture_depth_2d_array']: r#361
[#562 'texture_depth_cube']: r#361
[#562 'texture_depth_cube_array']: r#361
[#562 'texture_depth_multisampled_2d']: r#361
[#562 'texture_multisampled_2d']: r#361
[#562 'texture_storage_1d']: r#361
[#562 'texture_storage_2d']: r#361
[#562 'texture_storage_2d_array']: r#361
[#562 'texture_storage_3d']: r#361
[#562 'u32']: r#361
[#563 ')']: r#362
[#564 ')']: r#363
[#565 '%=']: r#364
[#565 '&=']: r#364
[#565 ')']: r#364
[#565 '*=']: r#364
[#565 '++']: r#364
[#565 '+=']: r#364
[#565 '--']: r#364
[#565 '-=']: r#364
[#565 '.']: r#364
[#565 '/=']: r#364
[#565 '<<=']: r#364
[#565 '=']: r#364
[#565 '>>=']: r#364
[#565 '[']: r#364
[#565 '^=']: r#364
[#565 '|=']: r#364
[#566 ';']: r#365
[#567 ';']: r#366
[#568 '!']: s#70
[#568 '&']: s#73
[#568 '(']: s#114
[#568 '*']: s#72
[#568 '-']: s#69
[#568 'array']: s#120
[#568 'bitcast']: s#78
[#568 'bool']: s#87
[#568 'f16']: s#116
[#568 'f32']: s#115
[#568 'false']: s#113
[#568 'i32']: s#117
[#568 'mat2x2']: s#98
[#568 'mat2x3']: s#99
[#568 'mat2x4']: s#100
[#568 'mat3x2']: s#101
[#568 'mat3x3']: s#102
[#568 'mat3x4']: s#103
[#568 'mat4x2']: s#104
[#568 'mat4x3']: s#105
[#568 'mat4x4']: s#106
[#568 'ptr']: s#119
[#568 'sampler']: s#134
[#568 'sampler_comparison']: s#135
[#568 'texture_1d']: s#141
[#568 'texture_2d']: s#142
[#568 'texture_2d_array']: s#143
[#568 'texture_3d']: s#144
[#568 'texture_cube']: s#145
[#568 'texture_cube_array']: s#146
[#568 'texture_depth_2d']: s#136
[#568 'texture_depth_2d_array']: s#137
[#568 'texture_depth_cube']: s#138
[#568 'texture_depth_cube_array']: s#139
[#568 'texture_depth_multisampled_2d']: s#140
[#568 'texture_multisampled_2d']: s#147
[#568 'texture_storage_1d']: s#148
[#568 'texture_storage_2d']: s#149
[#568 'texture_storage_2d_array']: s#150
[#568 'texture_storage_3d']: s#151
[#568 'true']: s#112
[#568 'u32']: s#118
[#568 'vec2']: s#95
[#568 'vec3']: s#96
[#568 'vec4']: s#97
[#568 '~']: s#71
[#568 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#568 /0[fh]/]: s#129
[#568 /0[iu]?/]: s#108
[#568 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#568 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#568 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#568 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#568 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#568 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#568 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#568 /[1-9][0-9]*[fh]/]: s#130
[#568 /[1-9][0-9]*[iu]?/]: s#109
[#569 '{']: s#184
[#570 'continuing']: r#367
[#570 '}']: r#367
[#571 '}']: s#474
[#572 '}']: r#368
[#573 '{']: s#184
[#574 '}']: s#474
[#575 '}']: r#369
[#576 'case']: s#577
[#576 'default']: s#578
[#577 '!']: s#70
[#577 '&']: s#73
[#577 '(']: s#114
[#577 '*']: s#72
[#577 '-']: s#69
[#577 'array']: s#120
[#577 'bitcast']: s#78
[#577 'bool']: s#87
[#577 'f16']: s#116
[#577 'f32']: s#115
[#577 'false']: s#113
[#577 'i32']: s#117
[#577 'mat2x2']: s#98
[#577 'mat2x3']: s#99
[#577 'mat2x4']: s#100
[#577 'mat3x2']: s#101
[#577 'mat3x3']: s#102
[#577 'mat3x4']: s#103
[#577 'mat4x2']: s#104
[#577 'mat4x3']: s#105
[#577 'mat4x4']: s#106
[#577 'ptr']: s#119
[#577 'sampler']: s#134
[#577 'sampler_comparison']: s#135
[#577 'texture_1d']: s#141
[#577 'texture_2d']: s#142
[#577 'texture_2d_array']: s#143
[#577 'texture_3d']: s#144
[#577 'texture_cube']: s#145
[#577 'texture_cube_array']: s#146
[#577 'texture_depth_2d']: s#136
[#577 'texture_depth_2d_array']: s#137
[#577 'texture_depth_cube']: s#138
[#577 'texture_depth_cube_array']: s#139
[#577 'texture_depth_multisampled_2d']: s#140
[#577 'texture_multisampled_2d']: s#147
[#577 'texture_storage_1d']: s#148
[#577 'texture_storage_2d']: s#149
[#577 'texture_storage_2d_array']: s#150
[#577 'texture_storage_3d']: s#151
[#577 'true']: s#112
[#577 'u32']: s#118
[#577 'vec2']: s#95
[#577 'vec3']: s#96
[#577 'vec4']: s#97
[#577 '~']: s#71
[#577 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#577 /0[fh]/]: s#129
[#577 /0[iu]?/]: s#108
[#577 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#577 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#577 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#577 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#577 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#577 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#577 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#577 /[1-9][0-9]*[fh]/]: s#130
[#577 /[1-9][0-9]*[iu]?/]: s#109
[#578 ':']: s#176
[#579 '&']: r#370
[#579 '(']: r#370
[#579 '*']: r#370
[#579 ';']: r#370
[#579 'break']: r#370
[#579 'const']: r#370
[#579 'continue']: r#370
[#579 'continuing']: r#370
[#579 'discard']: r#370
[#579 'fallthrough']: r#370
[#579 'for']: r#370
[#579 'if']: r#370
[#579 'let']: r#370
[#579 'loop']: r#370
[#579 'return']: r#370
[#579 'staticAssert']: r#370
[#579 'switch']: r#370
[#579 'var']: r#370
[#579 'while']: r#370
[#579 '{']: r#370
[#579 '}']: r#370
[#579 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#370
[#580 'if']: s#364
[#580 '{']: s#184
[#581 '(']: r#371
[#581 ')']: r#371
[#581 ',']: r#371
[#581 ';']: r#371
[#581 '=']: r#371
[#581 '>']: r#371
[#581 '{']: r#371
[#581 '}']: r#371
[#582 '>']: s#231
[#583 'read']: s#523
[#583 'read_write']: s#525
[#583 'write']: s#524
[#584 '@']: r#372
[#584 'array']: r#372
[#584 'bool']: r#372
[#584 'f16']: r#372
[#584 'f32']: r#372
[#584 'fn']: r#372
[#584 'i32']: r#372
[#584 'override']: r#372
[#584 'ptr']: r#372
[#584 'sampler']: r#372
[#584 'sampler_comparison']: r#372
[#584 'texture_1d']: r#372
[#584 'texture_2d']: r#372
[#584 'texture_2d_array']: r#372
[#584 'texture_3d']: r#372
[#584 'texture_cube']: r#372
[#584 'texture_cube_array']: r#372
[#584 'texture_depth_2d']: r#372
[#584 'texture_depth_2d_array']: r#372
[#584 'texture_depth_cube']: r#372
[#584 'texture_depth_cube_array']: r#372
[#584 'texture_depth_multisampled_2d']: r#372
[#584 'texture_multisampled_2d']: r#372
[#584 'texture_storage_1d']: r#372
[#584 'texture_storage_2d']: r#372
[#584 'texture_storage_2d_array']: r#372
[#584 'texture_storage_3d']: r#372
[#584 'u32']: r#372
[#584 'var']: r#372
[#584 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#372
[#585 ')']: r#315
[#585 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#585 /0[iu]?/]: s#108
[#585 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#585 /[1-9][0-9]*[iu]?/]: s#109
[#586 '@']: r#373
[#586 'array']: r#373
[#586 'bool']: r#373
[#586 'f16']: r#373
[#586 'f32']: r#373
[#586 'fn']: r#373
[#586 'i32']: r#373
[#586 'override']: r#373
[#586 'ptr']: r#373
[#586 'sampler']: r#373
[#586 'sampler_comparison']: r#373
[#586 'texture_1d']: r#373
[#586 'texture_2d']: r#373
[#586 'texture_2d_array']: r#373
[#586 'texture_3d']: r#373
[#586 'texture_cube']: r#373
[#586 'texture_cube_array']: r#373
[#586 'texture_depth_2d']: r#373
[#586 'texture_depth_2d_array']: r#373
[#586 'texture_depth_cube']: r#373
[#586 'texture_depth_cube_array']: r#373
[#586 'texture_depth_multisampled_2d']: r#373
[#586 'texture_multisampled_2d']: r#373
[#586 'texture_storage_1d']: r#373
[#586 'texture_storage_2d']: r#373
[#586 'texture_storage_2d_array']: r#373
[#586 'texture_storage_3d']: r#373
[#586 'u32']: r#373
[#586 'var']: r#373
[#586 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#373
[#587 ',']: s#401
[#588 '>']: r#374
[#589 '(']: r#375
[#589 ')']: r#375
[#589 ',']: r#375
[#589 ';']: r#375
[#589 '=']: r#375
[#589 '>']: r#375
[#589 '{']: r#375
[#589 '}']: r#375
[#590 '&']: r#376
[#590 '(']: r#376
[#590 '*']: r#376
[#590 ';']: r#376
[#590 'break']: r#376
[#590 'const']: r#376
[#590 'continue']: r#376
[#590 'continuing']: r#376
[#590 'discard']: r#376
[#590 'fallthrough']: r#376
[#590 'for']: r#376
[#590 'if']: r#376
[#590 'let']: r#376
[#590 'loop']: r#376
[#590 'return']: r#376
[#590 'staticAssert']: r#376
[#590 'switch']: r#376
[#590 'var']: r#376
[#590 'while']: r#376
[#590 '{']: r#376
[#590 '}']: r#376
[#590 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#376
[#591 '&']: r#377
[#591 '(']: r#377
[#591 '*']: r#377
[#591 ';']: r#377
[#591 'break']: r#377
[#591 'const']: r#377
[#591 'continue']: r#377
[#591 'continuing']: r#377
[#591 'discard']: r#377
[#591 'fallthrough']: r#377
[#591 'for']: r#377
[#591 'if']: r#377
[#591 'let']: r#377
[#591 'loop']: r#377
[#591 'return']: r#377
[#591 'staticAssert']: r#377
[#591 'switch']: r#377
[#591 'var']: r#377
[#591 'while']: r#377
[#591 '{']: r#377
[#591 '}']: r#377
[#591 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#377
[#592 '&']: r#378
[#592 '(']: r#378
[#592 '*']: r#378
[#592 ';']: r#378
[#592 'break']: r#378
[#592 'const']: r#378
[#592 'continue']: r#378
[#592 'continuing']: r#378
[#592 'discard']: r#378
[#592 'fallthrough']: r#378
[#592 'for']: r#378
[#592 'if']: r#378
[#592 'let']: r#378
[#592 'loop']: r#378
[#592 'return']: r#378
[#592 'staticAssert']: r#378
[#592 'switch']: r#378
[#592 'var']: r#378
[#592 'while']: r#378
[#592 '{']: r#378
[#592 '}']: r#378
[#592 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#378
[#593 '{']: s#184
[#594 '{']: r#379
[#595 ':']: s#176
[#596 ',']: s#401
[#597 '}']: r#380
[#598 '&']: r#381
[#598 '(']: r#381
[#598 '*']: r#381
[#598 ';']: r#381
[#598 'break']: r#381
[#598 'const']: r#381
[#598 'continue']: r#381
[#598 'continuing']: r#381
[#598 'discard']: r#381
[#598 'fallthrough']: r#381
[#598 'for']: r#381
[#598 'if']: r#381
[#598 'let']: r#381
[#598 'loop']: r#381
[#598 'return']: r#381
[#598 'staticAssert']: r#381
[#598 'switch']: r#381
[#598 'var']: r#381
[#598 'while']: r#381
[#598 '{']: r#381
[#598 '}']: r#381
[#598 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#381
[#599 '}']: r#382
[#600 '&']: s#73
[#600 '*']: s#72
[#600 ';']: s#19
[#600 'break']: s#373
[#600 'const']: s#372
[#600 'continue']: s#374
[#600 'discard']: s#357
[#600 'for']: s#367
[#600 'if']: s#364
[#600 'let']: s#371
[#600 'loop']: s#366
[#600 'return']: s#363
[#600 'staticAssert']: s#26
[#600 'switch']: s#365
[#600 'var']: s#161
[#600 'while']: s#368
[#600 '{']: s#184
[#600 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#601 '&']: r#383
[#601 '(']: r#383
[#601 '*']: r#383
[#601 ';']: r#383
[#601 'break']: r#383
[#601 'const']: r#383
[#601 'continue']: r#383
[#601 'continuing']: r#383
[#601 'discard']: r#383
[#601 'fallthrough']: r#383
[#601 'for']: r#383
[#601 'if']: r#383
[#601 'let']: r#383
[#601 'loop']: r#383
[#601 'return']: r#383
[#601 'staticAssert']: r#383
[#601 'switch']: r#383
[#601 'var']: r#383
[#601 'while']: r#383
[#601 '{']: r#383
[#601 '}']: r#383
[#601 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#383
[#602 '&']: r#384
[#602 '(']: r#384
[#602 '*']: r#384
[#602 ';']: r#384
[#602 'break']: r#384
[#602 'const']: r#384
[#602 'continue']: r#384
[#602 'continuing']: r#384
[#602 'discard']: r#384
[#602 'fallthrough']: r#384
[#602 'for']: r#384
[#602 'if']: r#384
[#602 'let']: r#384
[#602 'loop']: r#384
[#602 'return']: r#384
[#602 'staticAssert']: r#384
[#602 'switch']: r#384
[#602 'var']: r#384
[#602 'while']: r#384
[#602 '{']: r#384
[#602 '}']: r#384
[#602 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#384
[#603 ';']: s#19
[#604 ';']: r#385
[#605 'array']: s#120
[#605 'bool']: s#87
[#605 'f16']: s#116
[#605 'f32']: s#115
[#605 'i32']: s#117
[#605 'ptr']: s#119
[#605 'sampler']: s#134
[#605 'sampler_comparison']: s#135
[#605 'texture_1d']: s#141
[#605 'texture_2d']: s#142
[#605 'texture_2d_array']: s#143
[#605 'texture_3d']: s#144
[#605 'texture_cube']: s#145
[#605 'texture_cube_array']: s#146
[#605 'texture_depth_2d']: s#136
[#605 'texture_depth_2d_array']: s#137
[#605 'texture_depth_cube']: s#138
[#605 'texture_depth_cube_array']: s#139
[#605 'texture_depth_multisampled_2d']: s#140
[#605 'texture_multisampled_2d']: s#147
[#605 'texture_storage_1d']: s#148
[#605 'texture_storage_2d']: s#149
[#605 'texture_storage_2d_array']: s#150
[#605 'texture_storage_3d']: s#151
[#605 'u32']: s#118
[#605 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#606 'array']: r#386
[#606 'bool']: r#386
[#606 'f16']: r#386
[#606 'f32']: r#386
[#606 'i32']: r#386
[#606 'ptr']: r#386
[#606 'sampler']: r#386
[#606 'sampler_comparison']: r#386
[#606 'texture_1d']: r#386
[#606 'texture_2d']: r#386
[#606 'texture_2d_array']: r#386
[#606 'texture_3d']: r#386
[#606 'texture_cube']: r#386
[#606 'texture_cube_array']: r#386
[#606 'texture_depth_2d']: r#386
[#606 'texture_depth_2d_array']: r#386
[#606 'texture_depth_cube']: r#386
[#606 'texture_depth_cube_array']: r#386
[#606 'texture_depth_multisampled_2d']: r#386
[#606 'texture_multisampled_2d']: r#386
[#606 'texture_storage_1d']: r#386
[#606 'texture_storage_2d']: r#386
[#606 'texture_storage_2d_array']: r#386
[#606 'texture_storage_3d']: r#386
[#606 'u32']: r#386
[#607 '@']: s#32
[#608 'array']: r#387
[#608 'bool']: r#387
[#608 'f16']: r#387
[#608 'f32']: r#387
[#608 'i32']: r#387
[#608 'ptr']: r#387
[#608 'sampler']: r#387
[#608 'sampler_comparison']: r#387
[#608 'texture_1d']: r#387
[#608 'texture_2d']: r#387
[#608 'texture_2d_array']: r#387
[#608 'texture_3d']: r#387
[#608 'texture_cube']: r#387
[#608 'texture_cube_array']: r#387
[#608 'texture_depth_2d']: r#387
[#608 'texture_depth_2d_array']: r#387
[#608 'texture_depth_cube']: r#387
[#608 'texture_depth_cube_array']: r#387
[#608 'texture_depth_multisampled_2d']: r#387
[#608 'texture_multisampled_2d']: r#387
[#608 'texture_storage_1d']: r#387
[#608 'texture_storage_2d']: r#387
[#608 'texture_storage_2d_array']: r#387
[#608 'texture_storage_3d']: r#387
[#608 'u32']: r#387
[#609 '{']: r#388
[#610 '&']: s#73
[#610 '*']: s#72
[#610 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#611 'break']: s#634
[#612 'break']: r#389
[#612 '}']: r#389
[#613 '&']: s#73
[#613 '*']: s#72
[#613 ';']: s#19
[#613 'break']: s#373
[#613 'const']: s#372
[#613 'continue']: s#374
[#613 'discard']: s#357
[#613 'for']: s#367
[#613 'if']: s#364
[#613 'let']: s#371
[#613 'loop']: s#366
[#613 'return']: s#363
[#613 'staticAssert']: s#26
[#613 'switch']: s#365
[#613 'var']: s#161
[#613 'while']: s#368
[#613 '{']: s#184
[#613 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#614 ',']: s#401
[#615 ',']: r#390
[#615 ':']: r#390
[#615 '{']: r#390
[#616 ',']: s#401
[#617 '!']: s#70
[#617 '&']: s#73
[#617 '(']: s#114
[#617 '*']: s#72
[#617 '-']: s#69
[#617 'array']: s#120
[#617 'bitcast']: s#78
[#617 'bool']: s#87
[#617 'f16']: s#116
[#617 'f32']: s#115
[#617 'false']: s#113
[#617 'i32']: s#117
[#617 'mat2x2']: s#98
[#617 'mat2x3']: s#99
[#617 'mat2x4']: s#100
[#617 'mat3x2']: s#101
[#617 'mat3x3']: s#102
[#617 'mat3x4']: s#103
[#617 'mat4x2']: s#104
[#617 'mat4x3']: s#105
[#617 'mat4x4']: s#106
[#617 'ptr']: s#119
[#617 'sampler']: s#134
[#617 'sampler_comparison']: s#135
[#617 'texture_1d']: s#141
[#617 'texture_2d']: s#142
[#617 'texture_2d_array']: s#143
[#617 'texture_3d']: s#144
[#617 'texture_cube']: s#145
[#617 'texture_cube_array']: s#146
[#617 'texture_depth_2d']: s#136
[#617 'texture_depth_2d_array']: s#137
[#617 'texture_depth_cube']: s#138
[#617 'texture_depth_cube_array']: s#139
[#617 'texture_depth_multisampled_2d']: s#140
[#617 'texture_multisampled_2d']: s#147
[#617 'texture_storage_1d']: s#148
[#617 'texture_storage_2d']: s#149
[#617 'texture_storage_2d_array']: s#150
[#617 'texture_storage_3d']: s#151
[#617 'true']: s#112
[#617 'u32']: s#118
[#617 'vec2']: s#95
[#617 'vec3']: s#96
[#617 'vec4']: s#97
[#617 '~']: s#71
[#617 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#617 /0[fh]/]: s#129
[#617 /0[iu]?/]: s#108
[#617 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#617 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#617 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#617 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#617 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#617 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#617 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#617 /[1-9][0-9]*[fh]/]: s#130
[#617 /[1-9][0-9]*[iu]?/]: s#109
[#618 '{']: s#184
[#619 '{']: r#391
[#620 'case']: r#392
[#620 'default']: r#392
[#620 '}']: r#392
[#621 '&']: s#73
[#621 '*']: s#72
[#621 ';']: s#19
[#621 'break']: s#373
[#621 'const']: s#372
[#621 'continue']: s#374
[#621 'discard']: s#357
[#621 'for']: s#367
[#621 'if']: s#364
[#621 'let']: s#371
[#621 'loop']: s#366
[#621 'return']: s#363
[#621 'staticAssert']: s#26
[#621 'switch']: s#365
[#621 'var']: s#161
[#621 'while']: s#368
[#621 '{']: s#184
[#621 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#622 '@']: r#393
[#622 'array']: r#393
[#622 'bool']: r#393
[#622 'f16']: r#393
[#622 'f32']: r#393
[#622 'fn']: r#393
[#622 'i32']: r#393
[#622 'override']: r#393
[#622 'ptr']: r#393
[#622 'sampler']: r#393
[#622 'sampler_comparison']: r#393
[#622 'texture_1d']: r#393
[#622 'texture_2d']: r#393
[#622 'texture_2d_array']: r#393
[#622 'texture_3d']: r#393
[#622 'texture_cube']: r#393
[#622 'texture_cube_array']: r#393
[#622 'texture_depth_2d']: r#393
[#622 'texture_depth_2d_array']: r#393
[#622 'texture_depth_cube']: r#393
[#622 'texture_depth_cube_array']: r#393
[#622 'texture_depth_multisampled_2d']: r#393
[#622 'texture_multisampled_2d']: r#393
[#622 'texture_storage_1d']: r#393
[#622 'texture_storage_2d']: r#393
[#622 'texture_storage_2d_array']: r#393
[#622 'texture_storage_3d']: r#393
[#622 'u32']: r#393
[#622 'var']: r#393
[#622 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: r#393
[#623 'fallthrough']: s#646
[#624 'fallthrough']: r#394
[#624 '}']: r#394
[#625 '&']: s#73
[#625 '*']: s#72
[#625 ';']: s#19
[#625 'break']: s#373
[#625 'const']: s#372
[#625 'continue']: s#374
[#625 'discard']: s#357
[#625 'for']: s#367
[#625 'if']: s#364
[#625 'let']: s#371
[#625 'loop']: s#366
[#625 'return']: s#363
[#625 'staticAssert']: s#26
[#625 'switch']: s#365
[#625 'var']: s#161
[#625 'while']: s#368
[#625 '{']: s#184
[#625 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#626 'case']: r#395
[#626 'default']: r#395
[#626 '}']: r#395
[#627 ',']: r#396
[#627 ':']: r#396
[#627 '{']: r#396
[#628 ',']: r#397
[#628 ':']: r#397
[#628 '{']: r#397
[#629 ':']: r#398
[#629 '{']: r#398
[#630 ':']: r#399
[#630 '{']: r#399
[#631 'break']: r#400
[#631 '}']: r#400
[#632 '}']: s#474
[#633 '}']: r#401
[#634 'if']: s#641
[#635 ')']: r#402
[#636 ')']: r#403
[#637 ')']: r#404
[#638 ')']: r#405
[#639 ')']: r#406
[#640 ')']: r#407
[#641 '!']: s#70
[#641 '&']: s#73
[#641 '(']: s#114
[#641 '*']: s#72
[#641 '-']: s#69
[#641 'array']: s#120
[#641 'bitcast']: s#78
[#641 'bool']: s#87
[#641 'f16']: s#116
[#641 'f32']: s#115
[#641 'false']: s#113
[#641 'i32']: s#117
[#641 'mat2x2']: s#98
[#641 'mat2x3']: s#99
[#641 'mat2x4']: s#100
[#641 'mat3x2']: s#101
[#641 'mat3x3']: s#102
[#641 'mat3x4']: s#103
[#641 'mat4x2']: s#104
[#641 'mat4x3']: s#105
[#641 'mat4x4']: s#106
[#641 'ptr']: s#119
[#641 'sampler']: s#134
[#641 'sampler_comparison']: s#135
[#641 'texture_1d']: s#141
[#641 'texture_2d']: s#142
[#641 'texture_2d_array']: s#143
[#641 'texture_3d']: s#144
[#641 'texture_cube']: s#145
[#641 'texture_cube_array']: s#146
[#641 'texture_depth_2d']: s#136
[#641 'texture_depth_2d_array']: s#137
[#641 'texture_depth_cube']: s#138
[#641 'texture_depth_cube_array']: s#139
[#641 'texture_depth_multisampled_2d']: s#140
[#641 'texture_multisampled_2d']: s#147
[#641 'texture_storage_1d']: s#148
[#641 'texture_storage_2d']: s#149
[#641 'texture_storage_2d_array']: s#150
[#641 'texture_storage_3d']: s#151
[#641 'true']: s#112
[#641 'u32']: s#118
[#641 'vec2']: s#95
[#641 'vec3']: s#96
[#641 'vec4']: s#97
[#641 '~']: s#71
[#641 /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/]: s#79
[#641 /0[fh]/]: s#129
[#641 /0[iu]?/]: s#108
[#641 /0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+([pP][+-]?[0-9]+[fh]?)?/]: s#131
[#641 /0[xX][0-9a-fA-F]+[iu]?/]: s#107
[#641 /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/]: s#133
[#641 /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*([pP][+-]?[0-9]+[fh]?)?/]: s#132
[#641 /[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/]: s#126
[#641 /[0-9]+[eE][+-]?[0-9]+[fh]?/]: s#128
[#641 /[0-9]+\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/]: s#127
[#641 /[1-9][0-9]*[fh]/]: s#130
[#641 /[1-9][0-9]*[iu]?/]: s#109
[#642 '}']: r#408
[#643 'fallthrough']: r#409
[#643 '}']: r#409
[#644 '}']: s#474
[#645 '}']: r#410
[#646 ';']: s#19
[#647 '}']: r#411
[#648 'case']: r#412
[#648 'default']: r#412
[#648 '}']: r#412
[#649 ';']: s#19
[#650 '}']: r#413

=Goto:
[#0 global_directive]: #4
[#0 translation_unit]: #1
[#0 translation_unit/0.0]: #2
[#0 translation_unit/0.0/0]: #3
[#2 attr]: #31
[#2 attribute]: #30
[#2 function_decl]: #17
[#2 function_decl/0.0]: #25
[#2 function_decl/0.0/0]: #29
[#2 global_constant_decl]: #14
[#2 global_constant_decl/1.0]: #22
[#2 global_constant_decl/1.0/0]: #28
[#2 global_decl]: #11
[#2 global_variable_decl]: #13
[#2 global_variable_decl/0.0]: #20
[#2 global_variable_decl/0.0/0]: #27
[#2 semicolon]: #12
[#2 static_assert_statement]: #18
[#2 struct_decl]: #16
[#2 translation_unit/0.1]: #9
[#2 translation_unit/0.1/0]: #10
[#2 type_alias_decl]: #15
[#4 global_directive]: #4
[#4 translation_unit/0.0/0]: #8
[#5 extension_name]: #6
[#6 semicolon]: #167
[#11 attr]: #31
[#11 attribute]: #30
[#11 function_decl]: #17
[#11 function_decl/0.0]: #25
[#11 function_decl/0.0/0]: #29
[#11 global_constant_decl]: #14
[#11 global_constant_decl/1.0]: #22
[#11 global_constant_decl/1.0/0]: #28
[#11 global_decl]: #11
[#11 global_variable_decl]: #13
[#11 global_variable_decl/0.0]: #20
[#11 global_variable_decl/0.0/0]: #27
[#11 semicolon]: #12
[#11 static_assert_statement]: #18
[#11 struct_decl]: #16
[#11 translation_unit/0.1/0]: #166
[#11 type_alias_decl]: #15
[#13 semicolon]: #165
[#14 semicolon]: #164
[#15 semicolon]: #163
[#18 semicolon]: #162
[#20 variable_decl]: #160
[#21 global_constant_decl/0.1]: #157
[#21 ident]: #158
[#21 variable_ident_decl]: #159
[#23 ident]: #155
[#24 ident]: #154
[#25 function_header]: #152
[#26 additive_expression]: #59
[#26 and]: #67
[#26 array_type_decl]: #93
[#26 bang]: #64
[#26 binary_and_expression]: #56
[#26 binary_or_expression]: #57
[#26 binary_xor_expression]: #58
[#26 bitwise_expression]: #54
[#26 bool_literal]: #85
[#26 callable]: #75
[#26 const_literal]: #76
[#26 decimal_float_literal]: #110
[#26 depth_texture_type]: #122
[#26 expression]: #50
[#26 float16]: #89
[#26 float32]: #88
[#26 float_literal]: #84
[#26 hex_float_literal]: #111
[#26 ident]: #74
[#26 int32]: #90
[#26 int_literal]: #83
[#26 mat_prefix]: #82
[#26 minus]: #63
[#26 multiplicative_expression]: #61
[#26 multisampled_texture_type]: #124
[#26 paren_expression]: #77
[#26 paren_left]: #86
[#26 pointer]: #92
[#26 primary_expression]: #68
[#26 relational_expression]: #51
[#26 sampled_texture_type]: #123
[#26 sampler_type]: #121
[#26 shift_expression]: #55
[#26 short_circuit_and_expression]: #53
[#26 short_circuit_or_expression]: #52
[#26 singular_expression]: #62
[#26 star]: #66
[#26 storage_texture_type]: #125
[#26 texture_sampler_types]: #94
[#26 tilde]: #65
[#26 type_decl_without_ident]: #80
[#26 uint32]: #91
[#26 unary_expression]: #60
[#26 vec_prefix]: #81
[#30 attr]: #31
[#30 attribute]: #30
[#30 function_decl/0.0/0]: #49
[#30 global_constant_decl/1.0/0]: #48
[#30 global_variable_decl/0.0/0]: #47
[#33 paren_left]: #248
[#34 paren_left]: #247
[#35 paren_left]: #246
[#37 paren_left]: #245
[#38 paren_left]: #244
[#39 paren_left]: #243
[#41 paren_left]: #242
[#42 paren_left]: #241
[#43 paren_left]: #240
[#52 or_or]: #238
[#53 and_and]: #236
[#55 equal_equal]: #229
[#55 greater_than]: #226
[#55 greater_than_equal]: #228
[#55 less_than]: #225
[#55 less_than_equal]: #227
[#55 not_equal]: #230
[#56 and]: #224
[#57 or]: #222
[#58 xor]: #220
[#59 minus]: #218
[#59 plus]: #217
[#60 shift_left]: #213
[#60 shift_right]: #214
[#61 forward_slash]: #209
[#61 modulo]: #210
[#61 star]: #208
[#63 and]: #67
[#63 array_type_decl]: #93
[#63 bang]: #64
[#63 bool_literal]: #85
[#63 callable]: #75
[#63 const_literal]: #76
[#63 decimal_float_literal]: #110
[#63 depth_texture_type]: #122
[#63 float16]: #89
[#63 float32]: #88
[#63 float_literal]: #84
[#63 hex_float_literal]: #111
[#63 ident]: #74
[#63 int32]: #90
[#63 int_literal]: #83
[#63 mat_prefix]: #82
[#63 minus]: #63
[#63 multisampled_texture_type]: #124
[#63 paren_expression]: #77
[#63 paren_left]: #86
[#63 pointer]: #92
[#63 primary_expression]: #68
[#63 sampled_texture_type]: #123
[#63 sampler_type]: #121
[#63 singular_expression]: #62
[#63 star]: #66
[#63 storage_texture_type]: #125
[#63 texture_sampler_types]: #94
[#63 tilde]: #65
[#63 type_decl_without_ident]: #80
[#63 uint32]: #91
[#63 unary_expression]: #207
[#63 vec_prefix]: #81
[#64 and]: #67
[#64 array_type_decl]: #93
[#64 bang]: #64
[#64 bool_literal]: #85
[#64 callable]: #75
[#64 const_literal]: #76
[#64 decimal_float_literal]: #110
[#64 depth_texture_type]: #122
[#64 float16]: #89
[#64 float32]: #88
[#64 float_literal]: #84
[#64 hex_float_literal]: #111
[#64 ident]: #74
[#64 int32]: #90
[#64 int_literal]: #83
[#64 mat_prefix]: #82
[#64 minus]: #63
[#64 multisampled_texture_type]: #124
[#64 paren_expression]: #77
[#64 paren_left]: #86
[#64 pointer]: #92
[#64 primary_expression]: #68
[#64 sampled_texture_type]: #123
[#64 sampler_type]: #121
[#64 singular_expression]: #62
[#64 star]: #66
[#64 storage_texture_type]: #125
[#64 texture_sampler_types]: #94
[#64 tilde]: #65
[#64 type_decl_without_ident]: #80
[#64 uint32]: #91
[#64 unary_expression]: #206
[#64 vec_prefix]: #81
[#65 and]: #67
[#65 array_type_decl]: #93
[#65 bang]: #64
[#65 bool_literal]: #85
[#65 callable]: #75
[#65 const_literal]: #76
[#65 decimal_float_literal]: #110
[#65 depth_texture_type]: #122
[#65 float16]: #89
[#65 float32]: #88
[#65 float_literal]: #84
[#65 hex_float_literal]: #111
[#65 ident]: #74
[#65 int32]: #90
[#65 int_literal]: #83
[#65 mat_prefix]: #82
[#65 minus]: #63
[#65 multisampled_texture_type]: #124
[#65 paren_expression]: #77
[#65 paren_left]: #86
[#65 pointer]: #92
[#65 primary_expression]: #68
[#65 sampled_texture_type]: #123
[#65 sampler_type]: #121
[#65 singular_expression]: #62
[#65 star]: #66
[#65 storage_texture_type]: #125
[#65 texture_sampler_types]: #94
[#65 tilde]: #65
[#65 type_decl_without_ident]: #80
[#65 uint32]: #91
[#65 unary_expression]: #205
[#65 vec_prefix]: #81
[#66 and]: #67
[#66 array_type_decl]: #93
[#66 bang]: #64
[#66 bool_literal]: #85
[#66 callable]: #75
[#66 const_literal]: #76
[#66 decimal_float_literal]: #110
[#66 depth_texture_type]: #122
[#66 float16]: #89
[#66 float32]: #88
[#66 float_literal]: #84
[#66 hex_float_literal]: #111
[#66 ident]: #74
[#66 int32]: #90
[#66 int_literal]: #83
[#66 mat_prefix]: #82
[#66 minus]: #63
[#66 multisampled_texture_type]: #124
[#66 paren_expression]: #77
[#66 paren_left]: #86
[#66 pointer]: #92
[#66 primary_expression]: #68
[#66 sampled_texture_type]: #123
[#66 sampler_type]: #121
[#66 singular_expression]: #62
[#66 star]: #66
[#66 storage_texture_type]: #125
[#66 texture_sampler_types]: #94
[#66 tilde]: #65
[#66 type_decl_without_ident]: #80
[#66 uint32]: #91
[#66 unary_expression]: #204
[#66 vec_prefix]: #81
[#67 and]: #67
[#67 array_type_decl]: #93
[#67 bang]: #64
[#67 bool_literal]: #85
[#67 callable]: #75
[#67 const_literal]: #76
[#67 decimal_float_literal]: #110
[#67 depth_texture_type]: #122
[#67 float16]: #89
[#67 float32]: #88
[#67 float_literal]: #84
[#67 hex_float_literal]: #111
[#67 ident]: #74
[#67 int32]: #90
[#67 int_literal]: #83
[#67 mat_prefix]: #82
[#67 minus]: #63
[#67 multisampled_texture_type]: #124
[#67 paren_expression]: #77
[#67 paren_left]: #86
[#67 pointer]: #92
[#67 primary_expression]: #68
[#67 sampled_texture_type]: #123
[#67 sampler_type]: #121
[#67 singular_expression]: #62
[#67 star]: #66
[#67 storage_texture_type]: #125
[#67 texture_sampler_types]: #94
[#67 tilde]: #65
[#67 type_decl_without_ident]: #80
[#67 uint32]: #91
[#67 unary_expression]: #203
[#67 vec_prefix]: #81
[#68 bracket_left]: #199
[#68 period]: #200
[#68 postfix_expression]: #198
[#68 singular_expression/0.1]: #197
[#75 argument_expression_list]: #195
[#75 paren_left]: #196
[#78 less_than]: #194
[#86 additive_expression]: #59
[#86 and]: #67
[#86 array_type_decl]: #93
[#86 bang]: #64
[#86 binary_and_expression]: #56
[#86 binary_or_expression]: #57
[#86 binary_xor_expression]: #58
[#86 bitwise_expression]: #54
[#86 bool_literal]: #85
[#86 callable]: #75
[#86 const_literal]: #76
[#86 decimal_float_literal]: #110
[#86 depth_texture_type]: #122
[#86 expression]: #193
[#86 float16]: #89
[#86 float32]: #88
[#86 float_literal]: #84
[#86 hex_float_literal]: #111
[#86 ident]: #74
[#86 int32]: #90
[#86 int_literal]: #83
[#86 mat_prefix]: #82
[#86 minus]: #63
[#86 multiplicative_expression]: #61
[#86 multisampled_texture_type]: #124
[#86 paren_expression]: #77
[#86 paren_left]: #86
[#86 pointer]: #92
[#86 primary_expression]: #68
[#86 relational_expression]: #51
[#86 sampled_texture_type]: #123
[#86 sampler_type]: #121
[#86 shift_expression]: #55
[#86 short_circuit_and_expression]: #53
[#86 short_circuit_or_expression]: #52
[#86 singular_expression]: #62
[#86 star]: #66
[#86 storage_texture_type]: #125
[#86 texture_sampler_types]: #94
[#86 tilde]: #65
[#86 type_decl_without_ident]: #80
[#86 uint32]: #91
[#86 unary_expression]: #60
[#86 vec_prefix]: #81
[#92 less_than]: #192
[#120 less_than]: #191
[#123 less_than]: #190
[#124 less_than]: #189
[#125 less_than]: #188
[#152 brace_left]: #187
[#152 compound_statement]: #186
[#153 ident]: #185
[#154 brace_left]: #183
[#154 struct_body_decl]: #182
[#155 equal]: #181
[#156 global_constant_decl/1.2]: #178
[#156 ident]: #179
[#156 variable_ident_decl]: #180
[#157 equal]: #177
[#158 colon]: #175
[#160 equal]: #173
[#160 global_variable_decl/0.2]: #172
[#161 less_than]: #170
[#161 variable_decl/0.1]: #168
[#161 variable_qualifier]: #169
[#168 ident]: #397
[#168 variable_decl/0.2]: #396
[#168 variable_ident_decl]: #398
[#170 address_space]: #395
[#173 additive_expression]: #59
[#173 and]: #67
[#173 array_type_decl]: #93
[#173 bang]: #64
[#173 binary_and_expression]: #56
[#173 binary_or_expression]: #57
[#173 binary_xor_expression]: #58
[#173 bitwise_expression]: #54
[#173 bool_literal]: #85
[#173 callable]: #75
[#173 const_literal]: #76
[#173 decimal_float_literal]: #110
[#173 depth_texture_type]: #122
[#173 expression]: #394
[#173 float16]: #89
[#173 float32]: #88
[#173 float_literal]: #84
[#173 hex_float_literal]: #111
[#173 ident]: #74
[#173 int32]: #90
[#173 int_literal]: #83
[#173 mat_prefix]: #82
[#173 minus]: #63
[#173 multiplicative_expression]: #61
[#173 multisampled_texture_type]: #124
[#173 paren_expression]: #77
[#173 paren_left]: #86
[#173 pointer]: #92
[#173 primary_expression]: #68
[#173 relational_expression]: #51
[#173 sampled_texture_type]: #123
[#173 sampler_type]: #121
[#173 shift_expression]: #55
[#173 short_circuit_and_expression]: #53
[#173 short_circuit_or_expression]: #52
[#173 singular_expression]: #62
[#173 star]: #66
[#173 storage_texture_type]: #125
[#173 texture_sampler_types]: #94
[#173 tilde]: #65
[#173 type_decl_without_ident]: #80
[#173 uint32]: #91
[#173 unary_expression]: #60
[#173 vec_prefix]: #81
[#175 array_type_decl]: #93
[#175 depth_texture_type]: #122
[#175 float16]: #89
[#175 float32]: #88
[#175 ident]: #313
[#175 int32]: #90
[#175 multisampled_texture_type]: #124
[#175 pointer]: #92
[#175 sampled_texture_type]: #123
[#175 sampler_type]: #121
[#175 storage_texture_type]: #125
[#175 texture_sampler_types]: #94
[#175 type_decl]: #393
[#175 type_decl_without_ident]: #314
[#175 uint32]: #91
[#177 additive_expression]: #59
[#177 and]: #67
[#177 array_type_decl]: #93
[#177 bang]: #64
[#177 binary_and_expression]: #56
[#177 binary_or_expression]: #57
[#177 binary_xor_expression]: #58
[#177 bitwise_expression]: #54
[#177 bool_literal]: #85
[#177 callable]: #75
[#177 const_literal]: #76
[#177 decimal_float_literal]: #110
[#177 depth_texture_type]: #122
[#177 expression]: #392
[#177 float16]: #89
[#177 float32]: #88
[#177 float_literal]: #84
[#177 hex_float_literal]: #111
[#177 ident]: #74
[#177 int32]: #90
[#177 int_literal]: #83
[#177 mat_prefix]: #82
[#177 minus]: #63
[#177 multiplicative_expression]: #61
[#177 multisampled_texture_type]: #124
[#177 paren_expression]: #77
[#177 paren_left]: #86
[#177 pointer]: #92
[#177 primary_expression]: #68
[#177 relational_expression]: #51
[#177 sampled_texture_type]: #123
[#177 sampler_type]: #121
[#177 shift_expression]: #55
[#177 short_circuit_and_expression]: #53
[#177 short_circuit_or_expression]: #52
[#177 singular_expression]: #62
[#177 star]: #66
[#177 storage_texture_type]: #125
[#177 texture_sampler_types]: #94
[#177 tilde]: #65
[#177 type_decl_without_ident]: #80
[#177 uint32]: #91
[#177 unary_expression]: #60
[#177 vec_prefix]: #81
[#178 equal]: #391
[#178 global_constant_decl/1.3]: #390
[#179 colon]: #175
[#181 array_type_decl]: #93
[#181 depth_texture_type]: #122
[#181 float16]: #89
[#181 float32]: #88
[#181 ident]: #313
[#181 int32]: #90
[#181 multisampled_texture_type]: #124
[#181 pointer]: #92
[#181 sampled_texture_type]: #123
[#181 sampler_type]: #121
[#181 storage_texture_type]: #125
[#181 texture_sampler_types]: #94
[#181 type_decl]: #389
[#181 type_decl_without_ident]: #314
[#181 uint32]: #91
[#183 attr]: #31
[#183 attribute]: #388
[#183 struct_body_decl/0.1]: #382
[#183 struct_body_decl/0.1/0]: #383
[#183 struct_body_decl/0.1/0/0.0]: #384
[#183 struct_member]: #385
[#183 struct_member/0.0]: #386
[#183 struct_member/0.0/0]: #387
[#185 paren_left]: #381
[#187 and]: #380
[#187 assignment_statement]: #358
[#187 brace_left]: #187
[#187 break_statement]: #355
[#187 compound_statement]: #359
[#187 compound_statement/0.1]: #343
[#187 compound_statement/0.1/0]: #344
[#187 continue_statement]: #356
[#187 decrement_statement]: #361
[#187 for_statement]: #351
[#187 func_call_statement]: #353
[#187 ident]: #369
[#187 if_statement]: #348
[#187 increment_statement]: #360
[#187 lhs_expression]: #375
[#187 lhs_expression/0.0]: #376
[#187 lhs_expression/0.0/0]: #377
[#187 lhs_expression/0.0/0/0.0]: #378
[#187 loop_statement]: #350
[#187 return_statement]: #347
[#187 semicolon]: #346
[#187 star]: #379
[#187 statement]: #345
[#187 static_assert_statement]: #362
[#187 switch_statement]: #349
[#187 variable_decl]: #370
[#187 variable_statement]: #354
[#187 while_statement]: #352
[#188 texel_format]: #326
[#189 array_type_decl]: #93
[#189 depth_texture_type]: #122
[#189 float16]: #89
[#189 float32]: #88
[#189 ident]: #313
[#189 int32]: #90
[#189 multisampled_texture_type]: #124
[#189 pointer]: #92
[#189 sampled_texture_type]: #123
[#189 sampler_type]: #121
[#189 storage_texture_type]: #125
[#189 texture_sampler_types]: #94
[#189 type_decl]: #325
[#189 type_decl_without_ident]: #314
[#189 uint32]: #91
[#190 array_type_decl]: #93
[#190 depth_texture_type]: #122
[#190 float16]: #89
[#190 float32]: #88
[#190 ident]: #313
[#190 int32]: #90
[#190 multisampled_texture_type]: #124
[#190 pointer]: #92
[#190 sampled_texture_type]: #123
[#190 sampler_type]: #121
[#190 storage_texture_type]: #125
[#190 texture_sampler_types]: #94
[#190 type_decl]: #324
[#190 type_decl_without_ident]: #314
[#190 uint32]: #91
[#191 array_type_decl]: #93
[#191 depth_texture_type]: #122
[#191 float16]: #89
[#191 float32]: #88
[#191 ident]: #313
[#191 int32]: #90
[#191 multisampled_texture_type]: #124
[#191 pointer]: #92
[#191 sampled_texture_type]: #123
[#191 sampler_type]: #121
[#191 storage_texture_type]: #125
[#191 texture_sampler_types]: #94
[#191 type_decl]: #323
[#191 type_decl_without_ident]: #314
[#191 uint32]: #91
[#192 address_space]: #317
[#193 paren_right]: #315
[#194 array_type_decl]: #93
[#194 depth_texture_type]: #122
[#194 float16]: #89
[#194 float32]: #88
[#194 ident]: #313
[#194 int32]: #90
[#194 multisampled_texture_type]: #124
[#194 pointer]: #92
[#194 sampled_texture_type]: #123
[#194 sampler_type]: #121
[#194 storage_texture_type]: #125
[#194 texture_sampler_types]: #94
[#194 type_decl]: #312
[#194 type_decl_without_ident]: #314
[#194 uint32]: #91
[#196 additive_expression]: #59
[#196 and]: #67
[#196 argument_expression_list/0.1]: #307
[#196 argument_expression_list/0.1/0.0]: #308
[#196 argument_expression_list/0.1/0.0/0]: #309
[#196 argument_expression_list/0.1/0.0/0/0.0]: #310
[#196 array_type_decl]: #93
[#196 bang]: #64
[#196 binary_and_expression]: #56
[#196 binary_or_expression]: #57
[#196 binary_xor_expression]: #58
[#196 bitwise_expression]: #54
[#196 bool_literal]: #85
[#196 callable]: #75
[#196 const_literal]: #76
[#196 decimal_float_literal]: #110
[#196 depth_texture_type]: #122
[#196 expression]: #311
[#196 float16]: #89
[#196 float32]: #88
[#196 float_literal]: #84
[#196 hex_float_literal]: #111
[#196 ident]: #74
[#196 int32]: #90
[#196 int_literal]: #83
[#196 mat_prefix]: #82
[#196 minus]: #63
[#196 multiplicative_expression]: #61
[#196 multisampled_texture_type]: #124
[#196 paren_expression]: #77
[#196 paren_left]: #86
[#196 pointer]: #92
[#196 primary_expression]: #68
[#196 relational_expression]: #51
[#196 sampled_texture_type]: #123
[#196 sampler_type]: #121
[#196 shift_expression]: #55
[#196 short_circuit_and_expression]: #53
[#196 short_circuit_or_expression]: #52
[#196 singular_expression]: #62
[#196 star]: #66
[#196 storage_texture_type]: #125
[#196 texture_sampler_types]: #94
[#196 tilde]: #65
[#196 type_decl_without_ident]: #80
[#196 uint32]: #91
[#196 unary_expression]: #60
[#196 vec_prefix]: #81
[#199 additive_expression]: #59
[#199 and]: #67
[#199 array_type_decl]: #93
[#199 bang]: #64
[#199 binary_and_expression]: #56
[#199 binary_or_expression]: #57
[#199 binary_xor_expression]: #58
[#199 bitwise_expression]: #54
[#199 bool_literal]: #85
[#199 callable]: #75
[#199 const_literal]: #76
[#199 decimal_float_literal]: #110
[#199 depth_texture_type]: #122
[#199 expression]: #306
[#199 float16]: #89
[#199 float32]: #88
[#199 float_literal]: #84
[#199 hex_float_literal]: #111
[#199 ident]: #74
[#199 int32]: #90
[#199 int_literal]: #83
[#199 mat_prefix]: #82
[#199 minus]: #63
[#199 multiplicative_expression]: #61
[#199 multisampled_texture_type]: #124
[#199 paren_expression]: #77
[#199 paren_left]: #86
[#199 pointer]: #92
[#199 primary_expression]: #68
[#199 relational_expression]: #51
[#199 sampled_texture_type]: #123
[#199 sampler_type]: #121
[#199 shift_expression]: #55
[#199 short_circuit_and_expression]: #53
[#199 short_circuit_or_expression]: #52
[#199 singular_expression]: #62
[#199 star]: #66
[#199 storage_texture_type]: #125
[#199 texture_sampler_types]: #94
[#199 tilde]: #65
[#199 type_decl_without_ident]: #80
[#199 uint32]: #91
[#199 unary_expression]: #60
[#199 vec_prefix]: #81
[#200 member_ident]: #295
[#200 swizzle_name]: #296
[#208 and]: #67
[#208 array_type_decl]: #93
[#208 bang]: #64
[#208 bool_literal]: #85
[#208 callable]: #75
[#208 const_literal]: #76
[#208 decimal_float_literal]: #110
[#208 depth_texture_type]: #122
[#208 float16]: #89
[#208 float32]: #88
[#208 float_literal]: #84
[#208 hex_float_literal]: #111
[#208 ident]: #74
[#208 int32]: #90
[#208 int_literal]: #83
[#208 mat_prefix]: #82
[#208 minus]: #63
[#208 multisampled_texture_type]: #124
[#208 paren_expression]: #77
[#208 paren_left]: #86
[#208 pointer]: #92
[#208 primary_expression]: #68
[#208 sampled_texture_type]: #123
[#208 sampler_type]: #121
[#208 singular_expression]: #62
[#208 star]: #66
[#208 storage_texture_type]: #125
[#208 texture_sampler_types]: #94
[#208 tilde]: #65
[#208 type_decl_without_ident]: #80
[#208 uint32]: #91
[#208 unary_expression]: #294
[#208 vec_prefix]: #81
[#209 and]: #67
[#209 array_type_decl]: #93
[#209 bang]: #64
[#209 bool_literal]: #85
[#209 callable]: #75
[#209 const_literal]: #76
[#209 decimal_float_literal]: #110
[#209 depth_texture_type]: #122
[#209 float16]: #89
[#209 float32]: #88
[#209 float_literal]: #84
[#209 hex_float_literal]: #111
[#209 ident]: #74
[#209 int32]: #90
[#209 int_literal]: #83
[#209 mat_prefix]: #82
[#209 minus]: #63
[#209 multisampled_texture_type]: #124
[#209 paren_expression]: #77
[#209 paren_left]: #86
[#209 pointer]: #92
[#209 primary_expression]: #68
[#209 sampled_texture_type]: #123
[#209 sampler_type]: #121
[#209 singular_expression]: #62
[#209 star]: #66
[#209 storage_texture_type]: #125
[#209 texture_sampler_types]: #94
[#209 tilde]: #65
[#209 type_decl_without_ident]: #80
[#209 uint32]: #91
[#209 unary_expression]: #293
[#209 vec_prefix]: #81
[#210 and]: #67
[#210 array_type_decl]: #93
[#210 bang]: #64
[#210 bool_literal]: #85
[#210 callable]: #75
[#210 const_literal]: #76
[#210 decimal_float_literal]: #110
[#210 depth_texture_type]: #122
[#210 float16]: #89
[#210 float32]: #88
[#210 float_literal]: #84
[#210 hex_float_literal]: #111
[#210 ident]: #74
[#210 int32]: #90
[#210 int_literal]: #83
[#210 mat_prefix]: #82
[#210 minus]: #63
[#210 multisampled_texture_type]: #124
[#210 paren_expression]: #77
[#210 paren_left]: #86
[#210 pointer]: #92
[#210 primary_expression]: #68
[#210 sampled_texture_type]: #123
[#210 sampler_type]: #121
[#210 singular_expression]: #62
[#210 star]: #66
[#210 storage_texture_type]: #125
[#210 texture_sampler_types]: #94
[#210 tilde]: #65
[#210 type_decl_without_ident]: #80
[#210 uint32]: #91
[#210 unary_expression]: #292
[#210 vec_prefix]: #81
[#213 and]: #67
[#213 array_type_decl]: #93
[#213 bang]: #64
[#213 bool_literal]: #85
[#213 callable]: #75
[#213 const_literal]: #76
[#213 decimal_float_literal]: #110
[#213 depth_texture_type]: #122
[#213 float16]: #89
[#213 float32]: #88
[#213 float_literal]: #84
[#213 hex_float_literal]: #111
[#213 ident]: #74
[#213 int32]: #90
[#213 int_literal]: #83
[#213 mat_prefix]: #82
[#213 minus]: #63
[#213 multisampled_texture_type]: #124
[#213 paren_expression]: #77
[#213 paren_left]: #86
[#213 pointer]: #92
[#213 primary_expression]: #68
[#213 sampled_texture_type]: #123
[#213 sampler_type]: #121
[#213 singular_expression]: #62
[#213 star]: #66
[#213 storage_texture_type]: #125
[#213 texture_sampler_types]: #94
[#213 tilde]: #65
[#213 type_decl_without_ident]: #80
[#213 uint32]: #91
[#213 unary_expression]: #291
[#213 vec_prefix]: #81
[#214 and]: #67
[#214 array_type_decl]: #93
[#214 bang]: #64
[#214 bool_literal]: #85
[#214 callable]: #75
[#214 const_literal]: #76
[#214 decimal_float_literal]: #110
[#214 depth_texture_type]: #122
[#214 float16]: #89
[#214 float32]: #88
[#214 float_literal]: #84
[#214 hex_float_literal]: #111
[#214 ident]: #74
[#214 int32]: #90
[#214 int_literal]: #83
[#214 mat_prefix]: #82
[#214 minus]: #63
[#214 multisampled_texture_type]: #124
[#214 paren_expression]: #77
[#214 paren_left]: #86
[#214 pointer]: #92
[#214 primary_expression]: #68
[#214 sampled_texture_type]: #123
[#214 sampler_type]: #121
[#214 singular_expression]: #62
[#214 star]: #66
[#214 storage_texture_type]: #125
[#214 texture_sampler_types]: #94
[#214 tilde]: #65
[#214 type_decl_without_ident]: #80
[#214 uint32]: #91
[#214 unary_expression]: #290
[#214 vec_prefix]: #81
[#217 and]: #67
[#217 array_type_decl]: #93
[#217 bang]: #64
[#217 bool_literal]: #85
[#217 callable]: #75
[#217 const_literal]: #76
[#217 decimal_float_literal]: #110
[#217 depth_texture_type]: #122
[#217 float16]: #89
[#217 float32]: #88
[#217 float_literal]: #84
[#217 hex_float_literal]: #111
[#217 ident]: #74
[#217 int32]: #90
[#217 int_literal]: #83
[#217 mat_prefix]: #82
[#217 minus]: #63
[#217 multiplicative_expression]: #289
[#217 multisampled_texture_type]: #124
[#217 paren_expression]: #77
[#217 paren_left]: #86
[#217 pointer]: #92
[#217 primary_expression]: #68
[#217 sampled_texture_type]: #123
[#217 sampler_type]: #121
[#217 singular_expression]: #62
[#217 star]: #66
[#217 storage_texture_type]: #125
[#217 texture_sampler_types]: #94
[#217 tilde]: #65
[#217 type_decl_without_ident]: #80
[#217 uint32]: #91
[#217 unary_expression]: #288
[#217 vec_prefix]: #81
[#218 and]: #67
[#218 array_type_decl]: #93
[#218 bang]: #64
[#218 bool_literal]: #85
[#218 callable]: #75
[#218 const_literal]: #76
[#218 decimal_float_literal]: #110
[#218 depth_texture_type]: #122
[#218 float16]: #89
[#218 float32]: #88
[#218 float_literal]: #84
[#218 hex_float_literal]: #111
[#218 ident]: #74
[#218 int32]: #90
[#218 int_literal]: #83
[#218 mat_prefix]: #82
[#218 minus]: #63
[#218 multiplicative_expression]: #287
[#218 multisampled_texture_type]: #124
[#218 paren_expression]: #77
[#218 paren_left]: #86
[#218 pointer]: #92
[#218 primary_expression]: #68
[#218 sampled_texture_type]: #123
[#218 sampler_type]: #121
[#218 singular_expression]: #62
[#218 star]: #66
[#218 storage_texture_type]: #125
[#218 texture_sampler_types]: #94
[#218 tilde]: #65
[#218 type_decl_without_ident]: #80
[#218 uint32]: #91
[#218 unary_expression]: #288
[#218 vec_prefix]: #81
[#220 and]: #67
[#220 array_type_decl]: #93
[#220 bang]: #64
[#220 bool_literal]: #85
[#220 callable]: #75
[#220 const_literal]: #76
[#220 decimal_float_literal]: #110
[#220 depth_texture_type]: #122
[#220 float16]: #89
[#220 float32]: #88
[#220 float_literal]: #84
[#220 hex_float_literal]: #111
[#220 ident]: #74
[#220 int32]: #90
[#220 int_literal]: #83
[#220 mat_prefix]: #82
[#220 minus]: #63
[#220 multisampled_texture_type]: #124
[#220 paren_expression]: #77
[#220 paren_left]: #86
[#220 pointer]: #92
[#220 primary_expression]: #68
[#220 sampled_texture_type]: #123
[#220 sampler_type]: #121
[#220 singular_expression]: #62
[#220 star]: #66
[#220 storage_texture_type]: #125
[#220 texture_sampler_types]: #94
[#220 tilde]: #65
[#220 type_decl_without_ident]: #80
[#220 uint32]: #91
[#220 unary_expression]: #286
[#220 vec_prefix]: #81
[#222 and]: #67
[#222 array_type_decl]: #93
[#222 bang]: #64
[#222 bool_literal]: #85
[#222 callable]: #75
[#222 const_literal]: #76
[#222 decimal_float_literal]: #110
[#222 depth_texture_type]: #122
[#222 float16]: #89
[#222 float32]: #88
[#222 float_literal]: #84
[#222 hex_float_literal]: #111
[#222 ident]: #74
[#222 int32]: #90
[#222 int_literal]: #83
[#222 mat_prefix]: #82
[#222 minus]: #63
[#222 multisampled_texture_type]: #124
[#222 paren_expression]: #77
[#222 paren_left]: #86
[#222 pointer]: #92
[#222 primary_expression]: #68
[#222 sampled_texture_type]: #123
[#222 sampler_type]: #121
[#222 singular_expression]: #62
[#222 star]: #66
[#222 storage_texture_type]: #125
[#222 texture_sampler_types]: #94
[#222 tilde]: #65
[#222 type_decl_without_ident]: #80
[#222 uint32]: #91
[#222 unary_expression]: #285
[#222 vec_prefix]: #81
[#224 and]: #67
[#224 array_type_decl]: #93
[#224 bang]: #64
[#224 bool_literal]: #85
[#224 callable]: #75
[#224 const_literal]: #76
[#224 decimal_float_literal]: #110
[#224 depth_texture_type]: #122
[#224 float16]: #89
[#224 float32]: #88
[#224 float_literal]: #84
[#224 hex_float_literal]: #111
[#224 ident]: #74
[#224 int32]: #90
[#224 int_literal]: #83
[#224 mat_prefix]: #82
[#224 minus]: #63
[#224 multisampled_texture_type]: #124
[#224 paren_expression]: #77
[#224 paren_left]: #86
[#224 pointer]: #92
[#224 primary_expression]: #68
[#224 sampled_texture_type]: #123
[#224 sampler_type]: #121
[#224 singular_expression]: #62
[#224 star]: #66
[#224 storage_texture_type]: #125
[#224 texture_sampler_types]: #94
[#224 tilde]: #65
[#224 type_decl_without_ident]: #80
[#224 uint32]: #91
[#224 unary_expression]: #284
[#224 vec_prefix]: #81
[#225 additive_expression]: #59
[#225 and]: #67
[#225 array_type_decl]: #93
[#225 bang]: #64
[#225 bool_literal]: #85
[#225 callable]: #75
[#225 const_literal]: #76
[#225 decimal_float_literal]: #110
[#225 depth_texture_type]: #122
[#225 float16]: #89
[#225 float32]: #88
[#225 float_literal]: #84
[#225 hex_float_literal]: #111
[#225 ident]: #74
[#225 int32]: #90
[#225 int_literal]: #83
[#225 mat_prefix]: #82
[#225 minus]: #63
[#225 multiplicative_expression]: #61
[#225 multisampled_texture_type]: #124
[#225 paren_expression]: #77
[#225 paren_left]: #86
[#225 pointer]: #92
[#225 primary_expression]: #68
[#225 sampled_texture_type]: #123
[#225 sampler_type]: #121
[#225 shift_expression]: #283
[#225 singular_expression]: #62
[#225 star]: #66
[#225 storage_texture_type]: #125
[#225 texture_sampler_types]: #94
[#225 tilde]: #65
[#225 type_decl_without_ident]: #80
[#225 uint32]: #91
[#225 unary_expression]: #276
[#225 vec_prefix]: #81
[#226 additive_expression]: #59
[#226 and]: #67
[#226 array_type_decl]: #93
[#226 bang]: #64
[#226 bool_literal]: #85
[#226 callable]: #75
[#226 const_literal]: #76
[#226 decimal_float_literal]: #110
[#226 depth_texture_type]: #122
[#226 float16]: #89
[#226 float32]: #88
[#226 float_literal]: #84
[#226 hex_float_literal]: #111
[#226 ident]: #74
[#226 int32]: #90
[#226 int_literal]: #83
[#226 mat_prefix]: #82
[#226 minus]: #63
[#226 multiplicative_expression]: #61
[#226 multisampled_texture_type]: #124
[#226 paren_expression]: #77
[#226 paren_left]: #86
[#226 pointer]: #92
[#226 primary_expression]: #68
[#226 sampled_texture_type]: #123
[#226 sampler_type]: #121
[#226 shift_expression]: #282
[#226 singular_expression]: #62
[#226 star]: #66
[#226 storage_texture_type]: #125
[#226 texture_sampler_types]: #94
[#226 tilde]: #65
[#226 type_decl_without_ident]: #80
[#226 uint32]: #91
[#226 unary_expression]: #276
[#226 vec_prefix]: #81
[#227 additive_expression]: #59
[#227 and]: #67
[#227 array_type_decl]: #93
[#227 bang]: #64
[#227 bool_literal]: #85
[#227 callable]: #75
[#227 const_literal]: #76
[#227 decimal_float_literal]: #110
[#227 depth_texture_type]: #122
[#227 float16]: #89
[#227 float32]: #88
[#227 float_literal]: #84
[#227 hex_float_literal]: #111
[#227 ident]: #74
[#227 int32]: #90
[#227 int_literal]: #83
[#227 mat_prefix]: #82
[#227 minus]: #63
[#227 multiplicative_expression]: #61
[#227 multisampled_texture_type]: #124
[#227 paren_expression]: #77
[#227 paren_left]: #86
[#227 pointer]: #92
[#227 primary_expression]: #68
[#227 sampled_texture_type]: #123
[#227 sampler_type]: #121
[#227 shift_expression]: #281
[#227 singular_expression]: #62
[#227 star]: #66
[#227 storage_texture_type]: #125
[#227 texture_sampler_types]: #94
[#227 tilde]: #65
[#227 type_decl_without_ident]: #80
[#227 uint32]: #91
[#227 unary_expression]: #276
[#227 vec_prefix]: #81
[#228 additive_expression]: #59
[#228 and]: #67
[#228 array_type_decl]: #93
[#228 bang]: #64
[#228 bool_literal]: #85
[#228 callable]: #75
[#228 const_literal]: #76
[#228 decimal_float_literal]: #110
[#228 depth_texture_type]: #122
[#228 float16]: #89
[#228 float32]: #88
[#228 float_literal]: #84
[#228 hex_float_literal]: #111
[#228 ident]: #74
[#228 int32]: #90
[#228 int_literal]: #83
[#228 mat_prefix]: #82
[#228 minus]: #63
[#228 multiplicative_expression]: #61
[#228 multisampled_texture_type]: #124
[#228 paren_expression]: #77
[#228 paren_left]: #86
[#228 pointer]: #92
[#228 primary_expression]: #68
[#228 sampled_texture_type]: #123
[#228 sampler_type]: #121
[#228 shift_expression]: #280
[#228 singular_expression]: #62
[#228 star]: #66
[#228 storage_texture_type]: #125
[#228 texture_sampler_types]: #94
[#228 tilde]: #65
[#228 type_decl_without_ident]: #80
[#228 uint32]: #91
[#228 unary_expression]: #276
[#228 vec_prefix]: #81
[#229 additive_expression]: #59
[#229 and]: #67
[#229 array_type_decl]: #93
[#229 bang]: #64
[#229 bool_literal]: #85
[#229 callable]: #75
[#229 const_literal]: #76
[#229 decimal_float_literal]: #110
[#229 depth_texture_type]: #122
[#229 float16]: #89
[#229 float32]: #88
[#229 float_literal]: #84
[#229 hex_float_literal]: #111
[#229 ident]: #74
[#229 int32]: #90
[#229 int_literal]: #83
[#229 mat_prefix]: #82
[#229 minus]: #63
[#229 multiplicative_expression]: #61
[#229 multisampled_texture_type]: #124
[#229 paren_expression]: #77
[#229 paren_left]: #86
[#229 pointer]: #92
[#229 primary_expression]: #68
[#229 sampled_texture_type]: #123
[#229 sampler_type]: #121
[#229 shift_expression]: #279
[#229 singular_expression]: #62
[#229 star]: #66
[#229 storage_texture_type]: #125
[#229 texture_sampler_types]: #94
[#229 tilde]: #65
[#229 type_decl_without_ident]: #80
[#229 uint32]: #91
[#229 unary_expression]: #276
[#229 vec_prefix]: #81
[#230 additive_expression]: #59
[#230 and]: #67
[#230 array_type_decl]: #93
[#230 bang]: #64
[#230 bool_literal]: #85
[#230 callable]: #75
[#230 const_literal]: #76
[#230 decimal_float_literal]: #110
[#230 depth_texture_type]: #122
[#230 float16]: #89
[#230 float32]: #88
[#230 float_literal]: #84
[#230 hex_float_literal]: #111
[#230 ident]: #74
[#230 int32]: #90
[#230 int_literal]: #83
[#230 mat_prefix]: #82
[#230 minus]: #63
[#230 multiplicative_expression]: #61
[#230 multisampled_texture_type]: #124
[#230 paren_expression]: #77
[#230 paren_left]: #86
[#230 pointer]: #92
[#230 primary_expression]: #68
[#230 sampled_texture_type]: #123
[#230 sampler_type]: #121
[#230 shift_expression]: #278
[#230 singular_expression]: #62
[#230 star]: #66
[#230 storage_texture_type]: #125
[#230 texture_sampler_types]: #94
[#230 tilde]: #65
[#230 type_decl_without_ident]: #80
[#230 uint32]: #91
[#230 unary_expression]: #276
[#230 vec_prefix]: #81
[#236 additive_expression]: #59
[#236 and]: #67
[#236 array_type_decl]: #93
[#236 bang]: #64
[#236 bool_literal]: #85
[#236 callable]: #75
[#236 const_literal]: #76
[#236 decimal_float_literal]: #110
[#236 depth_texture_type]: #122
[#236 float16]: #89
[#236 float32]: #88
[#236 float_literal]: #84
[#236 hex_float_literal]: #111
[#236 ident]: #74
[#236 int32]: #90
[#236 int_literal]: #83
[#236 mat_prefix]: #82
[#236 minus]: #63
[#236 multiplicative_expression]: #61
[#236 multisampled_texture_type]: #124
[#236 paren_expression]: #77
[#236 paren_left]: #86
[#236 pointer]: #92
[#236 primary_expression]: #68
[#236 relational_expression]: #277
[#236 sampled_texture_type]: #123
[#236 sampler_type]: #121
[#236 shift_expression]: #55
[#236 singular_expression]: #62
[#236 star]: #66
[#236 storage_texture_type]: #125
[#236 texture_sampler_types]: #94
[#236 tilde]: #65
[#236 type_decl_without_ident]: #80
[#236 uint32]: #91
[#236 unary_expression]: #276
[#236 vec_prefix]: #81
[#238 additive_expression]: #59
[#238 and]: #67
[#238 array_type_decl]: #93
[#238 bang]: #64
[#238 bool_literal]: #85
[#238 callable]: #75
[#238 const_literal]: #76
[#238 decimal_float_literal]: #110
[#238 depth_texture_type]: #122
[#238 float16]: #89
[#238 float32]: #88
[#238 float_literal]: #84
[#238 hex_float_literal]: #111
[#238 ident]: #74
[#238 int32]: #90
[#238 int_literal]: #83
[#238 mat_prefix]: #82
[#238 minus]: #63
[#238 multiplicative_expression]: #61
[#238 multisampled_texture_type]: #124
[#238 paren_expression]: #77
[#238 paren_left]: #86
[#238 pointer]: #92
[#238 primary_expression]: #68
[#238 relational_expression]: #275
[#238 sampled_texture_type]: #123
[#238 sampler_type]: #121
[#238 shift_expression]: #55
[#238 singular_expression]: #62
[#238 star]: #66
[#238 storage_texture_type]: #125
[#238 texture_sampler_types]: #94
[#238 tilde]: #65
[#238 type_decl_without_ident]: #80
[#238 uint32]: #91
[#238 unary_expression]: #276
[#238 vec_prefix]: #81
[#240 ident]: #274
[#240 ident_or_int_literal]: #272
[#240 int_literal]: #273
[#241 int_literal]: #271
[#242 int_literal]: #270
[#243 interpolation_type_name]: #266
[#244 int_literal]: #265
[#245 int_literal]: #264
[#246 builtin_value_name]: #251
[#247 int_literal]: #250
[#248 int_literal]: #249
[#249 attrib_end]: #504
[#249 attrib_end/0.0]: #494
[#249 comma]: #496
[#250 attrib_end]: #503
[#250 attrib_end/0.0]: #494
[#250 comma]: #496
[#251 attrib_end]: #502
[#251 attrib_end/0.0]: #494
[#251 comma]: #496
[#264 attrib_end]: #501
[#264 attrib_end/0.0]: #494
[#264 comma]: #496
[#265 attrib_end]: #500
[#265 attrib_end/0.0]: #494
[#265 comma]: #496
[#266 attrib_end]: #498
[#266 attrib_end/0.0]: #494
[#266 comma]: #499
[#270 attrib_end]: #497
[#270 attrib_end/0.0]: #494
[#270 comma]: #496
[#271 attrib_end]: #495
[#271 attrib_end/0.0]: #494
[#271 comma]: #496
[#272 attrib_end]: #492
[#272 attrib_end/0.0]: #494
[#272 comma]: #493
[#276 shift_left]: #213
[#276 shift_right]: #214
[#287 forward_slash]: #209
[#287 modulo]: #210
[#287 star]: #208
[#289 forward_slash]: #209
[#289 modulo]: #210
[#289 star]: #208
[#295 bracket_left]: #199
[#295 period]: #200
[#295 postfix_expression]: #491
[#295 postfix_expression/1.2]: #490
[#296 bracket_left]: #199
[#296 period]: #200
[#296 postfix_expression]: #489
[#296 postfix_expression/2.2]: #488
[#306 bracket_right]: #486
[#307 paren_right]: #485
[#308 additive_expression]: #59
[#308 and]: #67
[#308 array_type_decl]: #93
[#308 bang]: #64
[#308 binary_and_expression]: #56
[#308 binary_or_expression]: #57
[#308 binary_xor_expression]: #58
[#308 bitwise_expression]: #54
[#308 bool_literal]: #85
[#308 callable]: #75
[#308 const_literal]: #76
[#308 decimal_float_literal]: #110
[#308 depth_texture_type]: #122
[#308 expression]: #484
[#308 float16]: #89
[#308 float32]: #88
[#308 float_literal]: #84
[#308 hex_float_literal]: #111
[#308 ident]: #74
[#308 int32]: #90
[#308 int_literal]: #83
[#308 mat_prefix]: #82
[#308 minus]: #63
[#308 multiplicative_expression]: #61
[#308 multisampled_texture_type]: #124
[#308 paren_expression]: #77
[#308 paren_left]: #86
[#308 pointer]: #92
[#308 primary_expression]: #68
[#308 relational_expression]: #51
[#308 sampled_texture_type]: #123
[#308 sampler_type]: #121
[#308 shift_expression]: #55
[#308 short_circuit_and_expression]: #53
[#308 short_circuit_or_expression]: #52
[#308 singular_expression]: #62
[#308 star]: #66
[#308 storage_texture_type]: #125
[#308 texture_sampler_types]: #94
[#308 tilde]: #65
[#308 type_decl_without_ident]: #80
[#308 uint32]: #91
[#308 unary_expression]: #60
[#308 vec_prefix]: #81
[#310 additive_expression]: #59
[#310 and]: #67
[#310 argument_expression_list/0.1/0.0/0]: #483
[#310 argument_expression_list/0.1/0.0/0/0.0]: #310
[#310 array_type_decl]: #93
[#310 bang]: #64
[#310 binary_and_expression]: #56
[#310 binary_or_expression]: #57
[#310 binary_xor_expression]: #58
[#310 bitwise_expression]: #54
[#310 bool_literal]: #85
[#310 callable]: #75
[#310 const_literal]: #76
[#310 decimal_float_literal]: #110
[#310 depth_texture_type]: #122
[#310 expression]: #311
[#310 float16]: #89
[#310 float32]: #88
[#310 float_literal]: #84
[#310 hex_float_literal]: #111
[#310 ident]: #74
[#310 int32]: #90
[#310 int_literal]: #83
[#310 mat_prefix]: #82
[#310 minus]: #63
[#310 multiplicative_expression]: #61
[#310 multisampled_texture_type]: #124
[#310 paren_expression]: #77
[#310 paren_left]: #86
[#310 pointer]: #92
[#310 primary_expression]: #68
[#310 relational_expression]: #51
[#310 sampled_texture_type]: #123
[#310 sampler_type]: #121
[#310 shift_expression]: #55
[#310 short_circuit_and_expression]: #53
[#310 short_circuit_or_expression]: #52
[#310 singular_expression]: #62
[#310 star]: #66
[#310 storage_texture_type]: #125
[#310 texture_sampler_types]: #94
[#310 tilde]: #65
[#310 type_decl_without_ident]: #80
[#310 uint32]: #91
[#310 unary_expression]: #60
[#310 vec_prefix]: #81
[#311 comma]: #482
[#312 greater_than]: #481
[#317 comma]: #480
[#323 array_type_decl/0.3]: #478
[#323 comma]: #479
[#324 greater_than]: #477
[#325 greater_than]: #476
[#326 comma]: #475
[#343 brace_right]: #473
[#345 and]: #380
[#345 assignment_statement]: #358
[#345 brace_left]: #187
[#345 break_statement]: #355
[#345 compound_statement]: #359
[#345 compound_statement/0.1/0]: #472
[#345 continue_statement]: #356
[#345 decrement_statement]: #361
[#345 for_statement]: #351
[#345 func_call_statement]: #353
[#345 ident]: #369
[#345 if_statement]: #348
[#345 increment_statement]: #360
[#345 lhs_expression]: #375
[#345 lhs_expression/0.0]: #376
[#345 lhs_expression/0.0/0]: #377
[#345 lhs_expression/0.0/0/0.0]: #378
[#345 loop_statement]: #350
[#345 return_statement]: #347
[#345 semicolon]: #346
[#345 star]: #379
[#345 statement]: #345
[#345 static_assert_statement]: #362
[#345 switch_statement]: #349
[#345 variable_decl]: #370
[#345 variable_statement]: #354
[#345 while_statement]: #352
[#347 semicolon]: #471
[#353 semicolon]: #470
[#354 semicolon]: #469
[#355 semicolon]: #468
[#356 semicolon]: #467
[#357 semicolon]: #466
[#358 semicolon]: #465
[#360 semicolon]: #464
[#361 semicolon]: #463
[#362 semicolon]: #462
[#363 additive_expression]: #59
[#363 and]: #67
[#363 array_type_decl]: #93
[#363 bang]: #64
[#363 binary_and_expression]: #56
[#363 binary_or_expression]: #57
[#363 binary_xor_expression]: #58
[#363 bitwise_expression]: #54
[#363 bool_literal]: #85
[#363 callable]: #75
[#363 const_literal]: #76
[#363 decimal_float_literal]: #110
[#363 depth_texture_type]: #122
[#363 expression]: #461
[#363 float16]: #89
[#363 float32]: #88
[#363 float_literal]: #84
[#363 hex_float_literal]: #111
[#363 ident]: #74
[#363 int32]: #90
[#363 int_literal]: #83
[#363 mat_prefix]: #82
[#363 minus]: #63
[#363 multiplicative_expression]: #61
[#363 multisampled_texture_type]: #124
[#363 paren_expression]: #77
[#363 paren_left]: #86
[#363 pointer]: #92
[#363 primary_expression]: #68
[#363 relational_expression]: #51
[#363 return_statement/0.1]: #460
[#363 sampled_texture_type]: #123
[#363 sampler_type]: #121
[#363 shift_expression]: #55
[#363 short_circuit_and_expression]: #53
[#363 short_circuit_or_expression]: #52
[#363 singular_expression]: #62
[#363 star]: #66
[#363 storage_texture_type]: #125
[#363 texture_sampler_types]: #94
[#363 tilde]: #65
[#363 type_decl_without_ident]: #80
[#363 uint32]: #91
[#363 unary_expression]: #60
[#363 vec_prefix]: #81
[#364 additive_expression]: #59
[#364 and]: #67
[#364 array_type_decl]: #93
[#364 bang]: #64
[#364 binary_and_expression]: #56
[#364 binary_or_expression]: #57
[#364 binary_xor_expression]: #58
[#364 bitwise_expression]: #54
[#364 bool_literal]: #85
[#364 callable]: #75
[#364 const_literal]: #76
[#364 decimal_float_literal]: #110
[#364 depth_texture_type]: #122
[#364 expression]: #459
[#364 float16]: #89
[#364 float32]: #88
[#364 float_literal]: #84
[#364 hex_float_literal]: #111
[#364 ident]: #74
[#364 int32]: #90
[#364 int_literal]: #83
[#364 mat_prefix]: #82
[#364 minus]: #63
[#364 multiplicative_expression]: #61
[#364 multisampled_texture_type]: #124
[#364 paren_expression]: #77
[#364 paren_left]: #86
[#364 pointer]: #92
[#364 primary_expression]: #68
[#364 relational_expression]: #51
[#364 sampled_texture_type]: #123
[#364 sampler_type]: #121
[#364 shift_expression]: #55
[#364 short_circuit_and_expression]: #53
[#364 short_circuit_or_expression]: #52
[#364 singular_expression]: #62
[#364 star]: #66
[#364 storage_texture_type]: #125
[#364 texture_sampler_types]: #94
[#364 tilde]: #65
[#364 type_decl_without_ident]: #80
[#364 uint32]: #91
[#364 unary_expression]: #60
[#364 vec_prefix]: #81
[#365 additive_expression]: #59
[#365 and]: #67
[#365 array_type_decl]: #93
[#365 bang]: #64
[#365 binary_and_expression]: #56
[#365 binary_or_expression]: #57
[#365 binary_xor_expression]: #58
[#365 bitwise_expression]: #54
[#365 bool_literal]: #85
[#365 callable]: #75
[#365 const_literal]: #76
[#365 decimal_float_literal]: #110
[#365 depth_texture_type]: #122
[#365 expression]: #458
[#365 float16]: #89
[#365 float32]: #88
[#365 float_literal]: #84
[#365 hex_float_literal]: #111
[#365 ident]: #74
[#365 int32]: #90
[#365 int_literal]: #83
[#365 mat_prefix]: #82
[#365 minus]: #63
[#365 multiplicative_expression]: #61
[#365 multisampled_texture_type]: #124
[#365 paren_expression]: #77
[#365 paren_left]: #86
[#365 pointer]: #92
[#365 primary_expression]: #68
[#365 relational_expression]: #51
[#365 sampled_texture_type]: #123
[#365 sampler_type]: #121
[#365 shift_expression]: #55
[#365 short_circuit_and_expression]: #53
[#365 short_circuit_or_expression]: #52
[#365 singular_expression]: #62
[#365 star]: #66
[#365 storage_texture_type]: #125
[#365 texture_sampler_types]: #94
[#365 tilde]: #65
[#365 type_decl_without_ident]: #80
[#365 uint32]: #91
[#365 unary_expression]: #60
[#365 vec_prefix]: #81
[#366 brace_left]: #457
[#367 paren_left]: #456
[#368 additive_expression]: #59
[#368 and]: #67
[#368 array_type_decl]: #93
[#368 bang]: #64
[#368 binary_and_expression]: #56
[#368 binary_or_expression]: #57
[#368 binary_xor_expression]: #58
[#368 bitwise_expression]: #54
[#368 bool_literal]: #85
[#368 callable]: #75
[#368 const_literal]: #76
[#368 decimal_float_literal]: #110
[#368 depth_texture_type]: #122
[#368 expression]: #455
[#368 float16]: #89
[#368 float32]: #88
[#368 float_literal]: #84
[#368 hex_float_literal]: #111
[#368 ident]: #74
[#368 int32]: #90
[#368 int_literal]: #83
[#368 mat_prefix]: #82
[#368 minus]: #63
[#368 multiplicative_expression]: #61
[#368 multisampled_texture_type]: #124
[#368 paren_expression]: #77
[#368 paren_left]: #86
[#368 pointer]: #92
[#368 primary_expression]: #68
[#368 relational_expression]: #51
[#368 sampled_texture_type]: #123
[#368 sampler_type]: #121
[#368 shift_expression]: #55
[#368 short_circuit_and_expression]: #53
[#368 short_circuit_or_expression]: #52
[#368 singular_expression]: #62
[#368 star]: #66
[#368 storage_texture_type]: #125
[#368 texture_sampler_types]: #94
[#368 tilde]: #65
[#368 type_decl_without_ident]: #80
[#368 uint32]: #91
[#368 unary_expression]: #60
[#368 vec_prefix]: #81
[#369 argument_expression_list]: #454
[#369 paren_left]: #196
[#371 ident]: #452
[#371 variable_ident_decl]: #453
[#371 variable_statement/2.1]: #451
[#372 ident]: #449
[#372 variable_ident_decl]: #450
[#372 variable_statement/3.1]: #448
[#375 and_equal]: #433
[#375 assignment_statement/0.1]: #421
[#375 compound_assignment_operator]: #425
[#375 division_equal]: #431
[#375 equal]: #424
[#375 minus_equal]: #429
[#375 minus_minus]: #423
[#375 modulo_equal]: #432
[#375 or_equal]: #434
[#375 plus_equal]: #428
[#375 plus_plus]: #422
[#375 shift_left_equal]: #437
[#375 shift_right_equal]: #436
[#375 times_equal]: #430
[#375 xor_equal]: #435
[#376 core_lhs_expression]: #418
[#376 ident]: #419
[#376 paren_left]: #420
[#378 and]: #380
[#378 lhs_expression/0.0/0]: #417
[#378 lhs_expression/0.0/0/0.0]: #378
[#378 star]: #379
[#381 attr]: #31
[#381 attribute]: #416
[#381 function_header/0.3]: #408
[#381 param]: #413
[#381 param/0.0]: #414
[#381 param/0.0/0]: #415
[#381 param_list]: #409
[#381 param_list/0.0]: #410
[#381 param_list/0.0/0]: #411
[#381 param_list/0.0/0/0.0]: #412
[#382 attr]: #31
[#382 attribute]: #388
[#382 struct_member]: #407
[#382 struct_member/0.0]: #386
[#382 struct_member/0.0/0]: #387
[#384 attr]: #31
[#384 attribute]: #388
[#384 struct_body_decl/0.1/0]: #406
[#384 struct_body_decl/0.1/0/0.0]: #384
[#384 struct_member]: #385
[#384 struct_member/0.0]: #386
[#384 struct_member/0.0/0]: #387
[#385 comma]: #405
[#386 member_ident]: #404
[#388 attr]: #31
[#388 attribute]: #388
[#388 struct_member/0.0/0]: #403
[#391 additive_expression]: #59
[#391 and]: #67
[#391 array_type_decl]: #93
[#391 bang]: #64
[#391 binary_and_expression]: #56
[#391 binary_or_expression]: #57
[#391 binary_xor_expression]: #58
[#391 bitwise_expression]: #54
[#391 bool_literal]: #85
[#391 callable]: #75
[#391 const_literal]: #76
[#391 decimal_float_literal]: #110
[#391 depth_texture_type]: #122
[#391 expression]: #402
[#391 float16]: #89
[#391 float32]: #88
[#391 float_literal]: #84
[#391 hex_float_literal]: #111
[#391 ident]: #74
[#391 int32]: #90
[#391 int_literal]: #83
[#391 mat_prefix]: #82
[#391 minus]: #63
[#391 multiplicative_expression]: #61
[#391 multisampled_texture_type]: #124
[#391 paren_expression]: #77
[#391 paren_left]: #86
[#391 pointer]: #92
[#391 primary_expression]: #68
[#391 relational_expression]: #51
[#391 sampled_texture_type]: #123
[#391 sampler_type]: #121
[#391 shift_expression]: #55
[#391 short_circuit_and_expression]: #53
[#391 short_circuit_or_expression]: #52
[#391 singular_expression]: #62
[#391 star]: #66
[#391 storage_texture_type]: #125
[#391 texture_sampler_types]: #94
[#391 tilde]: #65
[#391 type_decl_without_ident]: #80
[#391 uint32]: #91
[#391 unary_expression]: #60
[#391 vec_prefix]: #81
[#395 comma]: #400
[#395 variable_qualifier/0.2]: #399
[#397 colon]: #175
[#399 greater_than]: #557
[#400 access_mode]: #556
[#404 colon]: #555
[#407 comma]: #554
[#407 struct_body_decl/0.3]: #553
[#408 paren_right]: #552
[#410 attr]: #31
[#410 attribute]: #416
[#410 param]: #551
[#410 param/0.0]: #414
[#410 param/0.0/0]: #415
[#412 attr]: #31
[#412 attribute]: #416
[#412 param]: #413
[#412 param/0.0]: #414
[#412 param/0.0/0]: #415
[#412 param_list/0.0/0]: #550
[#412 param_list/0.0/0/0.0]: #412
[#413 comma]: #549
[#414 ident]: #548
[#414 variable_ident_decl]: #547
[#416 attr]: #31
[#416 attribute]: #416
[#416 param/0.0/0]: #546
[#418 bracket_left]: #199
[#418 lhs_expression/0.2]: #544
[#418 period]: #200
[#418 postfix_expression]: #545
[#420 and]: #380
[#420 lhs_expression]: #543
[#420 lhs_expression/0.0]: #376
[#420 lhs_expression/0.0/0]: #377
[#420 lhs_expression/0.0/0/0.0]: #378
[#420 star]: #379
[#421 additive_expression]: #59
[#421 and]: #67
[#421 array_type_decl]: #93
[#421 bang]: #64
[#421 binary_and_expression]: #56
[#421 binary_or_expression]: #57
[#421 binary_xor_expression]: #58
[#421 bitwise_expression]: #54
[#421 bool_literal]: #85
[#421 callable]: #75
[#421 const_literal]: #76
[#421 decimal_float_literal]: #110
[#421 depth_texture_type]: #122
[#421 expression]: #542
[#421 float16]: #89
[#421 float32]: #88
[#421 float_literal]: #84
[#421 hex_float_literal]: #111
[#421 ident]: #74
[#421 int32]: #90
[#421 int_literal]: #83
[#421 mat_prefix]: #82
[#421 minus]: #63
[#421 multiplicative_expression]: #61
[#421 multisampled_texture_type]: #124
[#421 paren_expression]: #77
[#421 paren_left]: #86
[#421 pointer]: #92
[#421 primary_expression]: #68
[#421 relational_expression]: #51
[#421 sampled_texture_type]: #123
[#421 sampler_type]: #121
[#421 shift_expression]: #55
[#421 short_circuit_and_expression]: #53
[#421 short_circuit_or_expression]: #52
[#421 singular_expression]: #62
[#421 star]: #66
[#421 storage_texture_type]: #125
[#421 texture_sampler_types]: #94
[#421 tilde]: #65
[#421 type_decl_without_ident]: #80
[#421 uint32]: #91
[#421 unary_expression]: #60
[#421 vec_prefix]: #81
[#448 equal]: #541
[#449 colon]: #175
[#451 equal]: #540
[#452 colon]: #175
[#455 brace_left]: #187
[#455 compound_statement]: #539
[#456 and]: #380
[#456 assignment_statement]: #537
[#456 decrement_statement]: #536
[#456 for_header]: #531
[#456 for_header/0.0]: #532
[#456 for_init]: #533
[#456 func_call_statement]: #538
[#456 ident]: #369
[#456 increment_statement]: #535
[#456 lhs_expression]: #375
[#456 lhs_expression/0.0]: #376
[#456 lhs_expression/0.0/0]: #377
[#456 lhs_expression/0.0/0/0.0]: #378
[#456 star]: #379
[#456 variable_decl]: #370
[#456 variable_statement]: #534
[#457 and]: #380
[#457 assignment_statement]: #358
[#457 brace_left]: #187
[#457 break_statement]: #355
[#457 compound_statement]: #359
[#457 continue_statement]: #356
[#457 decrement_statement]: #361
[#457 for_statement]: #351
[#457 func_call_statement]: #353
[#457 ident]: #369
[#457 if_statement]: #348
[#457 increment_statement]: #360
[#457 lhs_expression]: #375
[#457 lhs_expression/0.0]: #376
[#457 lhs_expression/0.0/0]: #377
[#457 lhs_expression/0.0/0/0.0]: #378
[#457 loop_statement]: #350
[#457 loop_statement/0.2]: #528
[#457 loop_statement/0.2/0]: #529
[#457 return_statement]: #347
[#457 semicolon]: #346
[#457 star]: #379
[#457 statement]: #530
[#457 static_assert_statement]: #362
[#457 switch_statement]: #349
[#457 variable_decl]: #370
[#457 variable_statement]: #354
[#457 while_statement]: #352
[#458 brace_left]: #527
[#459 brace_left]: #187
[#459 compound_statement]: #526
[#475 access_mode]: #522
[#478 greater_than]: #521
[#479 additive_expression]: #518
[#479 and]: #67
[#479 array_type_decl]: #93
[#479 bang]: #64
[#479 binary_and_expression]: #56
[#479 binary_or_expression]: #57
[#479 binary_xor_expression]: #58
[#479 bitwise_expression]: #519
[#479 bool_literal]: #85
[#479 callable]: #75
[#479 const_literal]: #76
[#479 decimal_float_literal]: #110
[#479 depth_texture_type]: #122
[#479 element_count_expression]: #517
[#479 float16]: #89
[#479 float32]: #88
[#479 float_literal]: #84
[#479 hex_float_literal]: #111
[#479 ident]: #74
[#479 int32]: #90
[#479 int_literal]: #83
[#479 mat_prefix]: #82
[#479 minus]: #63
[#479 multiplicative_expression]: #61
[#479 multisampled_texture_type]: #124
[#479 paren_expression]: #77
[#479 paren_left]: #86
[#479 pointer]: #92
[#479 primary_expression]: #68
[#479 sampled_texture_type]: #123
[#479 sampler_type]: #121
[#479 singular_expression]: #62
[#479 star]: #66
[#479 storage_texture_type]: #125
[#479 texture_sampler_types]: #94
[#479 tilde]: #65
[#479 type_decl_without_ident]: #80
[#479 uint32]: #91
[#479 unary_expression]: #520
[#479 vec_prefix]: #81
[#480 array_type_decl]: #93
[#480 depth_texture_type]: #122
[#480 float16]: #89
[#480 float32]: #88
[#480 ident]: #313
[#480 int32]: #90
[#480 multisampled_texture_type]: #124
[#480 pointer]: #92
[#480 sampled_texture_type]: #123
[#480 sampler_type]: #121
[#480 storage_texture_type]: #125
[#480 texture_sampler_types]: #94
[#480 type_decl]: #516
[#480 type_decl_without_ident]: #314
[#480 uint32]: #91
[#481 paren_expression]: #515
[#481 paren_left]: #86
[#484 argument_expression_list/0.1/0.2]: #513
[#484 comma]: #514
[#486 bracket_left]: #199
[#486 period]: #200
[#486 postfix_expression]: #512
[#486 postfix_expression/0.3]: #511
[#493 ident]: #274
[#493 ident_or_int_literal]: #510
[#493 int_literal]: #273
[#494 paren_right]: #509
[#499 interpolation_sample_name]: #505
[#505 attrib_end]: #586
[#505 attrib_end/0.0]: #494
[#505 comma]: #496
[#510 attrib_end]: #584
[#510 attrib_end/0.0]: #494
[#510 comma]: #585
[#516 comma]: #583
[#516 type_decl_without_ident/7.5]: #582
[#518 minus]: #218
[#518 plus]: #217
[#522 greater_than]: #581
[#526 if_statement/0.3]: #579
[#527 switch_body]: #576
[#527 switch_statement/0.3]: #574
[#527 switch_statement/0.3/0]: #575
[#528 continuing_statement]: #572
[#528 loop_statement/0.3]: #571
[#530 and]: #380
[#530 assignment_statement]: #358
[#530 brace_left]: #187
[#530 break_statement]: #355
[#530 compound_statement]: #359
[#530 continue_statement]: #356
[#530 decrement_statement]: #361
[#530 for_statement]: #351
[#530 func_call_statement]: #353
[#530 ident]: #369
[#530 if_statement]: #348
[#530 increment_statement]: #360
[#530 lhs_expression]: #375
[#530 lhs_expression/0.0]: #376
[#530 lhs_expression/0.0/0]: #377
[#530 lhs_expression/0.0/0/0.0]: #378
[#530 loop_statement]: #350
[#530 loop_statement/0.2/0]: #570
[#530 return_statement]: #347
[#530 semicolon]: #346
[#530 star]: #379
[#530 statement]: #530
[#530 static_assert_statement]: #362
[#530 switch_statement]: #349
[#530 variable_decl]: #370
[#530 variable_statement]: #354
[#530 while_statement]: #352
[#531 paren_right]: #569
[#532 semicolon]: #568
[#540 additive_expression]: #59
[#540 and]: #67
[#540 array_type_decl]: #93
[#540 bang]: #64
[#540 binary_and_expression]: #56
[#540 binary_or_expression]: #57
[#540 binary_xor_expression]: #58
[#540 bitwise_expression]: #54
[#540 bool_literal]: #85
[#540 callable]: #75
[#540 const_literal]: #76
[#540 decimal_float_literal]: #110
[#540 depth_texture_type]: #122
[#540 expression]: #567
[#540 float16]: #89
[#540 float32]: #88
[#540 float_literal]: #84
[#540 hex_float_literal]: #111
[#540 ident]: #74
[#540 int32]: #90
[#540 int_literal]: #83
[#540 mat_prefix]: #82
[#540 minus]: #63
[#540 multiplicative_expression]: #61
[#540 multisampled_texture_type]: #124
[#540 paren_expression]: #77
[#540 paren_left]: #86
[#540 pointer]: #92
[#540 primary_expression]: #68
[#540 relational_expression]: #51
[#540 sampled_texture_type]: #123
[#540 sampler_type]: #121
[#540 shift_expression]: #55
[#540 short_circuit_and_expression]: #53
[#540 short_circuit_or_expression]: #52
[#540 singular_expression]: #62
[#540 star]: #66
[#540 storage_texture_type]: #125
[#540 texture_sampler_types]: #94
[#540 tilde]: #65
[#540 type_decl_without_ident]: #80
[#540 uint32]: #91
[#540 unary_expression]: #60
[#540 vec_prefix]: #81
[#541 additive_expression]: #59
[#541 and]: #67
[#541 array_type_decl]: #93
[#541 bang]: #64
[#541 binary_and_expression]: #56
[#541 binary_or_expression]: #57
[#541 binary_xor_expression]: #58
[#541 bitwise_expression]: #54
[#541 bool_literal]: #85
[#541 callable]: #75
[#541 const_literal]: #76
[#541 decimal_float_literal]: #110
[#541 depth_texture_type]: #122
[#541 expression]: #566
[#541 float16]: #89
[#541 float32]: #88
[#541 float_literal]: #84
[#541 hex_float_literal]: #111
[#541 ident]: #74
[#541 int32]: #90
[#541 int_literal]: #83
[#541 mat_prefix]: #82
[#541 minus]: #63
[#541 multiplicative_expression]: #61
[#541 multisampled_texture_type]: #124
[#541 paren_expression]: #77
[#541 paren_left]: #86
[#541 pointer]: #92
[#541 primary_expression]: #68
[#541 relational_expression]: #51
[#541 sampled_texture_type]: #123
[#541 sampler_type]: #121
[#541 shift_expression]: #55
[#541 short_circuit_and_expression]: #53
[#541 short_circuit_or_expression]: #52
[#541 singular_expression]: #62
[#541 star]: #66
[#541 storage_texture_type]: #125
[#541 texture_sampler_types]: #94
[#541 tilde]: #65
[#541 type_decl_without_ident]: #80
[#541 uint32]: #91
[#541 unary_expression]: #60
[#541 vec_prefix]: #81
[#543 paren_right]: #565
[#548 colon]: #175
[#551 comma]: #564
[#551 param_list/0.2]: #563
[#552 arrow]: #561
[#552 function_header/0.5]: #560
[#553 brace_right]: #559
[#555 array_type_decl]: #93
[#555 depth_texture_type]: #122
[#555 float16]: #89
[#555 float32]: #88
[#555 ident]: #313
[#555 int32]: #90
[#555 multisampled_texture_type]: #124
[#555 pointer]: #92
[#555 sampled_texture_type]: #123
[#555 sampler_type]: #121
[#555 storage_texture_type]: #125
[#555 texture_sampler_types]: #94
[#555 type_decl]: #558
[#555 type_decl_without_ident]: #314
[#555 uint32]: #91
[#561 attr]: #31
[#561 attribute]: #607
[#561 function_header/0.5/0.1]: #605
[#561 function_header/0.5/0.1/0]: #606
[#568 additive_expression]: #59
[#568 and]: #67
[#568 array_type_decl]: #93
[#568 bang]: #64
[#568 binary_and_expression]: #56
[#568 binary_or_expression]: #57
[#568 binary_xor_expression]: #58
[#568 bitwise_expression]: #54
[#568 bool_literal]: #85
[#568 callable]: #75
[#568 const_literal]: #76
[#568 decimal_float_literal]: #110
[#568 depth_texture_type]: #122
[#568 expression]: #604
[#568 float16]: #89
[#568 float32]: #88
[#568 float_literal]: #84
[#568 for_header/0.2]: #603
[#568 hex_float_literal]: #111
[#568 ident]: #74
[#568 int32]: #90
[#568 int_literal]: #83
[#568 mat_prefix]: #82
[#568 minus]: #63
[#568 multiplicative_expression]: #61
[#568 multisampled_texture_type]: #124
[#568 paren_expression]: #77
[#568 paren_left]: #86
[#568 pointer]: #92
[#568 primary_expression]: #68
[#568 relational_expression]: #51
[#568 sampled_texture_type]: #123
[#568 sampler_type]: #121
[#568 shift_expression]: #55
[#568 short_circuit_and_expression]: #53
[#568 short_circuit_or_expression]: #52
[#568 singular_expression]: #62
[#568 star]: #66
[#568 storage_texture_type]: #125
[#568 texture_sampler_types]: #94
[#568 tilde]: #65
[#568 type_decl_without_ident]: #80
[#568 uint32]: #91
[#568 unary_expression]: #60
[#568 vec_prefix]: #81
[#569 brace_left]: #187
[#569 compound_statement]: #602
[#571 brace_right]: #601
[#573 brace_left]: #600
[#573 continuing_compound_statement]: #599
[#574 brace_right]: #598
[#576 switch_body]: #576
[#576 switch_statement/0.3/0]: #597
[#577 additive_expression]: #59
[#577 and]: #67
[#577 array_type_decl]: #93
[#577 bang]: #64
[#577 binary_and_expression]: #56
[#577 binary_or_expression]: #57
[#577 binary_xor_expression]: #58
[#577 bitwise_expression]: #54
[#577 bool_literal]: #85
[#577 callable]: #75
[#577 case_selectors]: #595
[#577 const_literal]: #76
[#577 decimal_float_literal]: #110
[#577 depth_texture_type]: #122
[#577 expression]: #596
[#577 float16]: #89
[#577 float32]: #88
[#577 float_literal]: #84
[#577 hex_float_literal]: #111
[#577 ident]: #74
[#577 int32]: #90
[#577 int_literal]: #83
[#577 mat_prefix]: #82
[#577 minus]: #63
[#577 multiplicative_expression]: #61
[#577 multisampled_texture_type]: #124
[#577 paren_expression]: #77
[#577 paren_left]: #86
[#577 pointer]: #92
[#577 primary_expression]: #68
[#577 relational_expression]: #51
[#577 sampled_texture_type]: #123
[#577 sampler_type]: #121
[#577 shift_expression]: #55
[#577 short_circuit_and_expression]: #53
[#577 short_circuit_or_expression]: #52
[#577 singular_expression]: #62
[#577 star]: #66
[#577 storage_texture_type]: #125
[#577 texture_sampler_types]: #94
[#577 tilde]: #65
[#577 type_decl_without_ident]: #80
[#577 uint32]: #91
[#577 unary_expression]: #60
[#577 vec_prefix]: #81
[#578 colon]: #594
[#578 switch_body/1.1]: #593
[#580 brace_left]: #187
[#580 compound_statement]: #591
[#580 else_statement]: #590
[#580 if_statement]: #592
[#582 greater_than]: #589
[#583 access_mode]: #588
[#585 ident]: #274
[#585 ident_or_int_literal]: #587
[#585 int_literal]: #273
[#587 attrib_end]: #622
[#587 attrib_end/0.0]: #494
[#587 comma]: #496
[#593 brace_left]: #621
[#593 case_compound_statement]: #620
[#595 colon]: #619
[#595 switch_body/0.2]: #618
[#596 case_selectors/0.1]: #614
[#596 case_selectors/0.1/0]: #615
[#596 case_selectors/0.1/0/0.0]: #616
[#596 comma]: #617
[#600 and]: #380
[#600 assignment_statement]: #358
[#600 brace_left]: #187
[#600 break_statement]: #355
[#600 compound_statement]: #359
[#600 continue_statement]: #356
[#600 continuing_compound_statement/0.1]: #611
[#600 continuing_compound_statement/0.1/0]: #612
[#600 decrement_statement]: #361
[#600 for_statement]: #351
[#600 func_call_statement]: #353
[#600 ident]: #369
[#600 if_statement]: #348
[#600 increment_statement]: #360
[#600 lhs_expression]: #375
[#600 lhs_expression/0.0]: #376
[#600 lhs_expression/0.0/0]: #377
[#600 lhs_expression/0.0/0/0.0]: #378
[#600 loop_statement]: #350
[#600 return_statement]: #347
[#600 semicolon]: #346
[#600 star]: #379
[#600 statement]: #613
[#600 static_assert_statement]: #362
[#600 switch_statement]: #349
[#600 variable_decl]: #370
[#600 variable_statement]: #354
[#600 while_statement]: #352
[#603 semicolon]: #610
[#605 array_type_decl]: #93
[#605 depth_texture_type]: #122
[#605 float16]: #89
[#605 float32]: #88
[#605 ident]: #313
[#605 int32]: #90
[#605 multisampled_texture_type]: #124
[#605 pointer]: #92
[#605 sampled_texture_type]: #123
[#605 sampler_type]: #121
[#605 storage_texture_type]: #125
[#605 texture_sampler_types]: #94
[#605 type_decl]: #609
[#605 type_decl_without_ident]: #314
[#605 uint32]: #91
[#607 attr]: #31
[#607 attribute]: #607
[#607 function_header/0.5/0.1/0]: #608
[#610 and]: #380
[#610 assignment_statement]: #639
[#610 decrement_statement]: #638
[#610 for_header/0.4]: #635
[#610 for_update]: #636
[#610 func_call_statement]: #640
[#610 ident]: #369
[#610 increment_statement]: #637
[#610 lhs_expression]: #375
[#610 lhs_expression/0.0]: #376
[#610 lhs_expression/0.0/0]: #377
[#610 lhs_expression/0.0/0/0.0]: #378
[#610 star]: #379
[#611 break_if_statement]: #633
[#611 continuing_compound_statement/0.2]: #632
[#613 and]: #380
[#613 assignment_statement]: #358
[#613 brace_left]: #187
[#613 break_statement]: #355
[#613 compound_statement]: #359
[#613 continue_statement]: #356
[#613 continuing_compound_statement/0.1/0]: #631
[#613 decrement_statement]: #361
[#613 for_statement]: #351
[#613 func_call_statement]: #353
[#613 ident]: #369
[#613 if_statement]: #348
[#613 increment_statement]: #360
[#613 lhs_expression]: #375
[#613 lhs_expression/0.0]: #376
[#613 lhs_expression/0.0/0]: #377
[#613 lhs_expression/0.0/0/0.0]: #378
[#613 loop_statement]: #350
[#613 return_statement]: #347
[#613 semicolon]: #346
[#613 star]: #379
[#613 statement]: #613
[#613 static_assert_statement]: #362
[#613 switch_statement]: #349
[#613 variable_decl]: #370
[#613 variable_statement]: #354
[#613 while_statement]: #352
[#614 case_selectors/0.2]: #629
[#614 comma]: #630
[#616 case_selectors/0.1/0]: #628
[#616 case_selectors/0.1/0/0.0]: #616
[#616 comma]: #617
[#617 additive_expression]: #59
[#617 and]: #67
[#617 array_type_decl]: #93
[#617 bang]: #64
[#617 binary_and_expression]: #56
[#617 binary_or_expression]: #57
[#617 binary_xor_expression]: #58
[#617 bitwise_expression]: #54
[#617 bool_literal]: #85
[#617 callable]: #75
[#617 const_literal]: #76
[#617 decimal_float_literal]: #110
[#617 depth_texture_type]: #122
[#617 expression]: #627
[#617 float16]: #89
[#617 float32]: #88
[#617 float_literal]: #84
[#617 hex_float_literal]: #111
[#617 ident]: #74
[#617 int32]: #90
[#617 int_literal]: #83
[#617 mat_prefix]: #82
[#617 minus]: #63
[#617 multiplicative_expression]: #61
[#617 multisampled_texture_type]: #124
[#617 paren_expression]: #77
[#617 paren_left]: #86
[#617 pointer]: #92
[#617 primary_expression]: #68
[#617 relational_expression]: #51
[#617 sampled_texture_type]: #123
[#617 sampler_type]: #121
[#617 shift_expression]: #55
[#617 short_circuit_and_expression]: #53
[#617 short_circuit_or_expression]: #52
[#617 singular_expression]: #62
[#617 star]: #66
[#617 storage_texture_type]: #125
[#617 texture_sampler_types]: #94
[#617 tilde]: #65
[#617 type_decl_without_ident]: #80
[#617 uint32]: #91
[#617 unary_expression]: #60
[#617 vec_prefix]: #81
[#618 brace_left]: #621
[#618 case_compound_statement]: #626
[#621 and]: #380
[#621 assignment_statement]: #358
[#621 brace_left]: #187
[#621 break_statement]: #355
[#621 case_compound_statement/0.1]: #623
[#621 case_compound_statement/0.1/0]: #624
[#621 compound_statement]: #359
[#621 continue_statement]: #356
[#621 decrement_statement]: #361
[#621 for_statement]: #351
[#621 func_call_statement]: #353
[#621 ident]: #369
[#621 if_statement]: #348
[#621 increment_statement]: #360
[#621 lhs_expression]: #375
[#621 lhs_expression/0.0]: #376
[#621 lhs_expression/0.0/0]: #377
[#621 lhs_expression/0.0/0/0.0]: #378
[#621 loop_statement]: #350
[#621 return_statement]: #347
[#621 semicolon]: #346
[#621 star]: #379
[#621 statement]: #625
[#621 static_assert_statement]: #362
[#621 switch_statement]: #349
[#621 variable_decl]: #370
[#621 variable_statement]: #354
[#621 while_statement]: #352
[#623 case_compound_statement/0.2]: #644
[#623 fallthrough_statement]: #645
[#625 and]: #380
[#625 assignment_statement]: #358
[#625 brace_left]: #187
[#625 break_statement]: #355
[#625 case_compound_statement/0.1/0]: #643
[#625 compound_statement]: #359
[#625 continue_statement]: #356
[#625 decrement_statement]: #361
[#625 for_statement]: #351
[#625 func_call_statement]: #353
[#625 ident]: #369
[#625 if_statement]: #348
[#625 increment_statement]: #360
[#625 lhs_expression]: #375
[#625 lhs_expression/0.0]: #376
[#625 lhs_expression/0.0/0]: #377
[#625 lhs_expression/0.0/0/0.0]: #378
[#625 loop_statement]: #350
[#625 return_statement]: #347
[#625 semicolon]: #346
[#625 star]: #379
[#625 statement]: #625
[#625 static_assert_statement]: #362
[#625 switch_statement]: #349
[#625 variable_decl]: #370
[#625 variable_statement]: #354
[#625 while_statement]: #352
[#632 brace_right]: #642
[#641 additive_expression]: #59
[#641 and]: #67
[#641 array_type_decl]: #93
[#641 bang]: #64
[#641 binary_and_expression]: #56
[#641 binary_or_expression]: #57
[#641 binary_xor_expression]: #58
[#641 bitwise_expression]: #54
[#641 bool_literal]: #85
[#641 callable]: #75
[#641 const_literal]: #76
[#641 decimal_float_literal]: #110
[#641 depth_texture_type]: #122
[#641 expression]: #649
[#641 float16]: #89
[#641 float32]: #88
[#641 float_literal]: #84
[#641 hex_float_literal]: #111
[#641 ident]: #74
[#641 int32]: #90
[#641 int_literal]: #83
[#641 mat_prefix]: #82
[#641 minus]: #63
[#641 multiplicative_expression]: #61
[#641 multisampled_texture_type]: #124
[#641 paren_expression]: #77
[#641 paren_left]: #86
[#641 pointer]: #92
[#641 primary_expression]: #68
[#641 relational_expression]: #51
[#641 sampled_texture_type]: #123
[#641 sampler_type]: #121
[#641 shift_expression]: #55
[#641 short_circuit_and_expression]: #53
[#641 short_circuit_or_expression]: #52
[#641 singular_expression]: #62
[#641 star]: #66
[#641 storage_texture_type]: #125
[#641 texture_sampler_types]: #94
[#641 tilde]: #65
[#641 type_decl_without_ident]: #80
[#641 uint32]: #91
[#641 unary_expression]: #60
[#641 vec_prefix]: #81
[#644 brace_right]: #648
[#646 semicolon]: #647
[#649 semicolon]: #650
